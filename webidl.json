{
  "!name": "webidl",
  "AVInputPort": {
    "!type": "?"
  },
  "AlarmsManager": {
    "!type": "?"
  },
  "AnalyserNode": {
    "!type": "?"
  },
  "Animation": {
    "!type": "?"
  },
  "AnimationEffect": {
    "!type": "?"
  },
  "AnimationEffectReadonly": {
    "!type": "?"
  },
  "AnimationEvent": {
    "!type": "fn(type: string, eventInitDict: +AnimationEventInit)",
    "prototype": {
      "animationName": {
        "!type": "string"
      },
      "elapsedTime": {
        "!type": "number"
      },
      "pseudoElement": {
        "!type": "string"
      }
    }
  },
  "AnimationPlayer": {
    "!type": "?"
  },
  "AnimationTimeline": {
    "!type": "?"
  },
  "ArchiveReader": {
    "!type": "fn(blob: +Blob, options: +ArchiveReaderOptions)",
    "prototype": {
      "getFilenames": {
        "!type": "fn() -> +ArchiveRequest"
      },
      "getFile": {
        "!type": "fn(filename: string) -> +ArchiveRequest"
      },
      "getFiles": {
        "!type": "fn() -> +ArchiveRequest"
      }
    }
  },
  "ArchiveRequest": {
    "!type": "?"
  },
  "Attr": {
    "!type": "?"
  },
  "AudioBuffer": {
    "!type": "?"
  },
  "AudioBufferSourceNode": {
    "!type": "?"
  },
  "AudioChannelManager": {
    "!type": "?"
  },
  "AudioContext": {
    "!type": "fn(audioChannelType: +AudioChannel)",
    "prototype": {
      "destination": {
        "!type": "+AudioDestinationNode"
      },
      "sampleRate": {
        "!type": "number"
      },
      "currentTime": {
        "!type": "number"
      },
      "listener": {
        "!type": "+AudioListener"
      },
      "state": {
        "!type": "+AudioContextState"
      },
      "suspend": {
        "!type": "fn() -> +Promise[value=+Promise]"
      },
      "resume": {
        "!type": "fn() -> +Promise[value=+Promise]"
      },
      "close": {
        "!type": "fn() -> +Promise[value=+Promise]"
      },
      "onstatechange": {
        "!type": "fn(event)"
      },
      "createBuffer": {
        "!type": "fn(numberOfChannels: number, length: number, sampleRate: number) -> +AudioBuffer"
      },
      "decodeAudioData": {
        "!type": "fn(audioData: +ArrayBuffer, successCallback: +DecodeSuccessCallback, errorCallback: +DecodeErrorCallback) -> +Promise[value=+Promise]"
      },
      "createBufferSource": {
        "!type": "fn() -> +AudioBufferSourceNode"
      },
      "createMediaStreamDestination": {
        "!type": "fn() -> +MediaStreamAudioDestinationNode"
      },
      "createScriptProcessor": {
        "!type": "fn(bufferSize: number, numberOfInputChannels: number, numberOfOutputChannels: number) -> +ScriptProcessorNode"
      },
      "createStereoPanner": {
        "!type": "fn() -> +StereoPannerNode"
      },
      "createAnalyser": {
        "!type": "fn() -> +AnalyserNode"
      },
      "createMediaElementSource": {
        "!type": "fn(mediaElement: +HTMLMediaElement) -> +MediaElementAudioSourceNode"
      },
      "createMediaStreamSource": {
        "!type": "fn(mediaStream: +MediaStream) -> +MediaStreamAudioSourceNode"
      },
      "createGain": {
        "!type": "fn() -> +GainNode"
      },
      "createDelay": {
        "!type": "fn(maxDelayTime: number) -> +DelayNode"
      },
      "createBiquadFilter": {
        "!type": "fn() -> +BiquadFilterNode"
      },
      "createWaveShaper": {
        "!type": "fn() -> +WaveShaperNode"
      },
      "createPanner": {
        "!type": "fn() -> +PannerNode"
      },
      "createConvolver": {
        "!type": "fn() -> +ConvolverNode"
      },
      "createChannelSplitter": {
        "!type": "fn(numberOfOutputs: number) -> +ChannelSplitterNode"
      },
      "createChannelMerger": {
        "!type": "fn(numberOfInputs: number) -> +ChannelMergerNode"
      },
      "createDynamicsCompressor": {
        "!type": "fn() -> +DynamicsCompressorNode"
      },
      "createOscillator": {
        "!type": "fn() -> +OscillatorNode"
      },
      "createPeriodicWave": {
        "!type": "fn(real: +Float32Array, imag: +Float32Array) -> +PeriodicWave"
      },
      "onmozinterruptbegin": {
        "!type": "fn(event)"
      },
      "onmozinterruptend": {
        "!type": "fn(event)"
      },
      "testAudioChannelInAudioNodeStream": {
        "!type": "fn() -> +AudioChannel"
      }
    }
  },
  "AudioDestinationNode": {
    "!type": "?"
  },
  "AudioListener": {
    "!type": "?"
  },
  "AudioNode": {
    "!type": "?"
  },
  "AudioParam": {
    "!type": "?"
  },
  "AudioProcessingEvent": {
    "!type": "?"
  },
  "AudioStreamTrack": {
    "!type": "?"
  },
  "AudioTrack": {
    "!type": "?"
  },
  "AudioTrackList": {
    "!type": "?"
  },
  "AutocompleteErrorEvent": {
    "!type": "fn(type: string, eventInitDict: +AutocompleteErrorEventInit)",
    "prototype": {
      "reason": {
        "!type": "+AutoCompleteErrorReason"
      }
    }
  },
  "BarProp": {
    "!type": "?"
  },
  "BatteryManager": {
    "!type": "?"
  },
  "BeforeAfterKeyboardEvent": {
    "!type": "fn(typeArg: string, eventInitDict: +BeforeAfterKeyboardEventInit)",
    "prototype": {
      "embeddedCancelled": {
        "!type": "bool"
      }
    }
  },
  "BeforeUnloadEvent": {
    "!type": "?"
  },
  "BiquadFilterNode": {
    "!type": "?"
  },
  "Blob": {
    "!type": "fn(blobParts: [?], options: +BlobPropertyBag)",
    "prototype": {
      "size": {
        "!type": "number"
      },
      "type": {
        "!type": "string"
      },
      "slice": {
        "!type": "fn(start: number, end: number, contentType: string) -> +Blob"
      }
    }
  },
  "BlobEvent": {
    "!type": "fn(type: string, eventInitDict: +BlobEventInit)",
    "prototype": {
      "data": {
        "!type": "+Blob"
      }
    }
  },
  "BluetoothAdapter": {
    "!type": "?"
  },
  "BluetoothAdapterEvent": {
    "!type": "fn(type: string, eventInitDict: +BluetoothAdapterEventInit)",
    "prototype": {
      "adapter": {
        "!type": "+BluetoothAdapter"
      },
      "address": {
        "!type": "string"
      }
    }
  },
  "BluetoothAttributeEvent": {
    "!type": "fn(type: string, eventInitDict: +BluetoothAttributeEventInit)",
    "prototype": {
      "attrs": {
        "!type": "[string]"
      }
    }
  },
  "BluetoothClassOfDevice": {
    "!type": "?"
  },
  "BluetoothDevice": {
    "!type": "?"
  },
  "BluetoothDeviceEvent": {
    "!type": "fn(type: string, eventInitDict: +BluetoothDeviceEventInit)",
    "prototype": {
      "device": {
        "!type": "+BluetoothDevice"
      },
      "address": {
        "!type": "string"
      }
    }
  },
  "BluetoothDiscoveryHandle": {
    "!type": "?"
  },
  "BluetoothDiscoveryStateChangedEvent": {
    "!type": "fn(type: string, eventInitDict: +BluetoothDiscoveryStateChangedEventInit)",
    "prototype": {
      "discovering": {
        "!type": "bool"
      }
    }
  },
  "BluetoothGatt": {
    "!type": "?"
  },
  "BluetoothGattCharacteristic": {
    "!type": "?"
  },
  "BluetoothGattCharacteristicEvent": {
    "!type": "fn(type: string, eventInitDict: +BluetoothGattCharacteristicEventInit)",
    "prototype": {
      "characteristic": {
        "!type": "+BluetoothGattCharacteristic"
      }
    }
  },
  "BluetoothGattDescriptor": {
    "!type": "?"
  },
  "BluetoothGattService": {
    "!type": "?"
  },
  "BluetoothManager": {
    "!type": "?"
  },
  "BluetoothPairingEvent": {
    "!type": "fn(type: string, eventInitDict: +BluetoothPairingEventInit)",
    "prototype": {
      "deviceName": {
        "!type": "string"
      },
      "handle": {
        "!type": "+BluetoothPairingHandle"
      }
    }
  },
  "BluetoothPairingHandle": {
    "!type": "?"
  },
  "BluetoothPairingListener": {
    "!type": "?"
  },
  "BluetoothStatusChangedEvent": {
    "!type": "fn(type: string, eventInitDict: +BluetoothStatusChangedEventInit)",
    "prototype": {
      "address": {
        "!type": "string"
      },
      "status": {
        "!type": "bool"
      }
    }
  },
  "BoxObject": {
    "!type": "?"
  },
  "BroadcastChannel": {
    "!type": "fn(channel: string)",
    "prototype": {
      "name": {
        "!type": "string"
      },
      "postMessage": {
        "!type": "fn(message: ?) -> void"
      },
      "close": {
        "!type": "fn() -> void"
      },
      "onmessage": {
        "!type": "fn(event)"
      }
    }
  },
  "BrowserFeedWriter": {
    "!type": "fn()",
    "prototype": {
      "writeContent": {
        "!type": "fn() -> void"
      },
      "close": {
        "!type": "fn() -> void"
      }
    }
  },
  "CDATASection": {
    "!type": "?"
  },
  "CFStateChangeEvent": {
    "!type": "fn(type: string, eventInitDict: +CFStateChangeEventInit)",
    "prototype": {
      "action": {
        "!type": "number"
      },
      "reason": {
        "!type": "number"
      },
      "number": {
        "!type": "string"
      },
      "timeSeconds": {
        "!type": "number"
      },
      "serviceClass": {
        "!type": "number"
      }
    }
  },
  "CSS": {
    "!type": "?"
  },
  "CSS2Properties": {
    "!type": "?"
  },
  "CSSFontFaceLoadEvent": {
    "!type": "fn(type: string, eventInitDict: +CSSFontFaceLoadEventInit)",
    "prototype": {
      "fontfaces": {
        "!type": "[+FontFace]"
      }
    }
  },
  "Counter": {
    "!type": "?"
  },
  "CSSPrimitiveValue": {
    "!type": "?"
  },
  "CSSRuleList": {
    "!type": "?"
  },
  "CSSRule": {
    "!type": "?"
  },
  "CSSStyleDeclaration": {
    "!type": "?"
  },
  "CSSStyleSheet": {
    "!type": "?"
  },
  "CSSValue": {
    "!type": "?"
  },
  "CSSValueList": {
    "!type": "?"
  },
  "Cache": {
    "!type": "?"
  },
  "CacheStorage": {
    "!type": "?"
  },
  "CallEvent": {
    "!type": "fn(type: string, eventInitDict: +CallEventInit)",
    "prototype": {
      "call": {
        "!type": "+TelephonyCall"
      }
    }
  },
  "CallGroupErrorEvent": {
    "!type": "fn(type: string, eventInitDict: +CallGroupErrorEventInit)",
    "prototype": {
      "name": {
        "!type": "string"
      },
      "message": {
        "!type": "string"
      }
    }
  },
  "CameraRecorderAudioProfile": {
    "!type": "?"
  },
  "CameraRecorderVideoProfile": {
    "!type": "?"
  },
  "CameraRecorderProfile": {
    "!type": "?"
  },
  "CameraRecorderProfiles": {
    "!type": "?"
  },
  "CameraCapabilities": {
    "!type": "?"
  },
  "CameraClosedEvent": {
    "!type": "fn(type: string, eventInitDict: +CameraClosedEventInit)",
    "prototype": {
      "reason": {
        "!type": "string"
      }
    }
  },
  "CameraConfigurationEvent": {
    "!type": "fn(type: string, eventInitDict: +CameraConfigurationEventInit)",
    "prototype": {
      "mode": {
        "!type": "+CameraMode"
      },
      "recorderProfile": {
        "!type": "string"
      },
      "previewSize": {
        "!type": "+DOMRectReadOnly"
      },
      "pictureSize": {
        "!type": "+DOMRectReadOnly"
      }
    }
  },
  "CameraControl": {
    "!type": "?"
  },
  "CameraDetectedFace": {
    "!type": "fn(initDict: +CameraDetectedFaceInit)",
    "prototype": {
      "id": {
        "!type": "number"
      },
      "score": {
        "!type": "number"
      },
      "bounds": {
        "!type": "+DOMRect"
      },
      "hasLeftEye": {
        "!type": "bool"
      },
      "leftEye": {
        "!type": "+DOMPoint"
      },
      "hasRightEye": {
        "!type": "bool"
      },
      "rightEye": {
        "!type": "+DOMPoint"
      },
      "hasMouth": {
        "!type": "bool"
      },
      "mouth": {
        "!type": "+DOMPoint"
      }
    }
  },
  "CameraFacesDetectedEvent": {
    "!type": "fn(type: string, eventInitDict: +CameraFacesDetectedEventInit)",
    "prototype": {
      "faces": {
        "!type": "[+CameraDetectedFace]"
      }
    }
  },
  "CameraManager": {
    "!type": "?"
  },
  "CameraStateChangeEvent": {
    "!type": "fn(type: string, eventInitDict: +CameraStateChangeEventInit)",
    "prototype": {
      "newState": {
        "!type": "string"
      }
    }
  },
  "CanvasRenderingContext2D": {
    "!type": "?"
  },
  "CanvasGradient": {
    "!type": "?"
  },
  "CanvasPattern": {
    "!type": "?"
  },
  "TextMetrics": {
    "!type": "?"
  },
  "Path2D": {
    "!type": "fn(pathString: string)",
    "prototype": {
      "addPath": {
        "!type": "fn(path: +Path2D, transformation: +SVGMatrix) -> void"
      },
      "closePath": {
        "!type": "fn() -> void"
      },
      "moveTo": {
        "!type": "fn(x: number, y: number) -> void"
      },
      "lineTo": {
        "!type": "fn(x: number, y: number) -> void"
      },
      "quadraticCurveTo": {
        "!type": "fn(cpx: number, cpy: number, x: number, y: number) -> void"
      },
      "bezierCurveTo": {
        "!type": "fn(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number) -> void"
      },
      "arcTo": {
        "!type": "fn(x1: number, y1: number, x2: number, y2: number, radius: number) -> void"
      },
      "rect": {
        "!type": "fn(x: number, y: number, w: number, h: number) -> void"
      },
      "arc": {
        "!type": "fn(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise: bool) -> void"
      }
    }
  },
  "CaretPosition": {
    "!type": "?"
  },
  "ChannelMergerNode": {
    "!type": "?"
  },
  "ChannelSplitterNode": {
    "!type": "?"
  },
  "CharacterData": {
    "!type": "?"
  },
  "ChromeNotifications": {
    "!type": "?"
  },
  "Client": {
    "!type": "?"
  },
  "WindowClient": {
    "!type": "?"
  },
  "Clients": {
    "!type": "?"
  },
  "ClipboardEvent": {
    "!type": "fn(type: string, eventInitDict: +ClipboardEventInit)",
    "prototype": {
      "clipboardData": {
        "!type": "+DataTransfer"
      }
    }
  },
  "CloseEvent": {
    "!type": "fn(type: string, eventInitDict: +CloseEventInit)",
    "prototype": {
      "wasClean": {
        "!type": "bool"
      },
      "code": {
        "!type": "number"
      },
      "reason": {
        "!type": "string"
      },
      "initCloseEvent": {
        "!type": "fn(aType: string, aCanBubble: bool, aCancelable: bool, aWasClean: bool, aReasonCode: number, aReason: string) -> void"
      }
    }
  },
  "CommandEvent": {
    "!type": "?"
  },
  "Comment": {
    "!type": "fn(data: string)",
    "prototype": {
      "queryInterface": {
        "!type": "fn(iid: +IID) -> nsISupports"
      }
    }
  },
  "CompositionEvent": {
    "!type": "?"
  },
  "ConvolverNode": {
    "!type": "?"
  },
  "Crypto": {
    "!type": "?"
  },
  "CustomEvent": {
    "!type": "fn(type: string, eventInitDict: +CustomEventInit)",
    "prototype": {
      "detail": {
        "!type": "?"
      },
      "initCustomEvent": {
        "!type": "fn(type: string, canBubble: bool, cancelable: bool, detail: ?) -> void"
      }
    }
  },
  "DOMCursor": {
    "!type": "?"
  },
  "DOMError": {
    "!type": "fn(name: string, message: string)",
    "prototype": {
      "name": {
        "!type": "string"
      },
      "message": {
        "!type": "string"
      }
    }
  },
  "StackFrame": {
    "!type": "?"
  },
  "DOMException": {
    "!type": "fn(message: string, name: string)",
    "prototype": {
      "INDEX_SIZE_ERR": {
        "!type": "number"
      },
      "DOMSTRING_SIZE_ERR": {
        "!type": "number"
      },
      "HIERARCHY_REQUEST_ERR": {
        "!type": "number"
      },
      "WRONG_DOCUMENT_ERR": {
        "!type": "number"
      },
      "INVALID_CHARACTER_ERR": {
        "!type": "number"
      },
      "NO_DATA_ALLOWED_ERR": {
        "!type": "number"
      },
      "NO_MODIFICATION_ALLOWED_ERR": {
        "!type": "number"
      },
      "NOT_FOUND_ERR": {
        "!type": "number"
      },
      "NOT_SUPPORTED_ERR": {
        "!type": "number"
      },
      "INUSE_ATTRIBUTE_ERR": {
        "!type": "number"
      },
      "INVALID_STATE_ERR": {
        "!type": "number"
      },
      "SYNTAX_ERR": {
        "!type": "number"
      },
      "INVALID_MODIFICATION_ERR": {
        "!type": "number"
      },
      "NAMESPACE_ERR": {
        "!type": "number"
      },
      "INVALID_ACCESS_ERR": {
        "!type": "number"
      },
      "VALIDATION_ERR": {
        "!type": "number"
      },
      "TYPE_MISMATCH_ERR": {
        "!type": "number"
      },
      "SECURITY_ERR": {
        "!type": "number"
      },
      "NETWORK_ERR": {
        "!type": "number"
      },
      "ABORT_ERR": {
        "!type": "number"
      },
      "URL_MISMATCH_ERR": {
        "!type": "number"
      },
      "QUOTA_EXCEEDED_ERR": {
        "!type": "number"
      },
      "TIMEOUT_ERR": {
        "!type": "number"
      },
      "INVALID_NODE_TYPE_ERR": {
        "!type": "number"
      },
      "DATA_CLONE_ERR": {
        "!type": "number"
      },
      "code": {
        "!type": "number"
      },
      "message": {
        "!type": "string"
      },
      "result": {
        "!type": "number"
      },
      "name": {
        "!type": "string"
      },
      "filename": {
        "!type": "string"
      },
      "lineNumber": {
        "!type": "number"
      },
      "columnNumber": {
        "!type": "number"
      },
      "location": {
        "!type": "+StackFrame"
      },
      "inner": {
        "!type": "nsISupports"
      },
      "data": {
        "!type": "nsISupports"
      },
      "stack": {
        "!type": "string"
      }
    }
  },
  "DOMImplementation": {
    "!type": "?"
  },
  "DOMMMIError": {
    "!type": "?"
  },
  "DOMMatrixReadOnly": {
    "!type": "?"
  },
  "DOMMatrix": {
    "!type": "fn(numberSequence: [number])",
    "prototype": {
      "a": {
        "!type": "number"
      },
      "b": {
        "!type": "number"
      },
      "c": {
        "!type": "number"
      },
      "d": {
        "!type": "number"
      },
      "e": {
        "!type": "number"
      },
      "f": {
        "!type": "number"
      },
      "m11": {
        "!type": "number"
      },
      "m12": {
        "!type": "number"
      },
      "m13": {
        "!type": "number"
      },
      "m14": {
        "!type": "number"
      },
      "m21": {
        "!type": "number"
      },
      "m22": {
        "!type": "number"
      },
      "m23": {
        "!type": "number"
      },
      "m24": {
        "!type": "number"
      },
      "m31": {
        "!type": "number"
      },
      "m32": {
        "!type": "number"
      },
      "m33": {
        "!type": "number"
      },
      "m34": {
        "!type": "number"
      },
      "m41": {
        "!type": "number"
      },
      "m42": {
        "!type": "number"
      },
      "m43": {
        "!type": "number"
      },
      "m44": {
        "!type": "number"
      },
      "multiplySelf": {
        "!type": "fn(other: +DOMMatrix) -> +DOMMatrix"
      },
      "preMultiplySelf": {
        "!type": "fn(other: +DOMMatrix) -> +DOMMatrix"
      },
      "translateSelf": {
        "!type": "fn(tx: number, ty: number, tz: number) -> +DOMMatrix"
      },
      "scaleSelf": {
        "!type": "fn(scale: number, originX: number, originY: number) -> +DOMMatrix"
      },
      "scale3dSelf": {
        "!type": "fn(scale: number, originX: number, originY: number, originZ: number) -> +DOMMatrix"
      },
      "scaleNonUniformSelf": {
        "!type": "fn(scaleX: number, scaleY: number, scaleZ: number, originX: number, originY: number, originZ: number) -> +DOMMatrix"
      },
      "rotateSelf": {
        "!type": "fn(angle: number, originX: number, originY: number) -> +DOMMatrix"
      },
      "rotateFromVectorSelf": {
        "!type": "fn(x: number, y: number) -> +DOMMatrix"
      },
      "rotateAxisAngleSelf": {
        "!type": "fn(x: number, y: number, z: number, angle: number) -> +DOMMatrix"
      },
      "skewXSelf": {
        "!type": "fn(sx: number) -> +DOMMatrix"
      },
      "skewYSelf": {
        "!type": "fn(sy: number) -> +DOMMatrix"
      },
      "invertSelf": {
        "!type": "fn() -> +DOMMatrix"
      },
      "setMatrixValue": {
        "!type": "fn(transformList: string) -> +DOMMatrix"
      }
    }
  },
  "DOMMobileMessageError": {
    "!type": "?"
  },
  "Principal": {
    "!type": "?"
  },
  "URI": {
    "!type": "?"
  },
  "InputStream": {
    "!type": "?"
  },
  "DOMParser": {
    "!type": "fn(prin: +Principal, documentURI: +URI, baseURI: +URI)",
    "prototype": {
      "parseFromString": {
        "!type": "fn(str: string, type: +SupportedType) -> +Document"
      },
      "parseFromBuffer": {
        "!type": "fn(buf: [number], bufLen: number, type: +SupportedType) -> +Document"
      },
      "parseFromStream": {
        "!type": "fn(stream: +InputStream, charset: string, contentLength: number, type: +SupportedType) -> +Document"
      },
      "init": {
        "!type": "fn(principal: +Principal, documentURI: +URI, baseURI: +URI) -> void"
      },
      "queryInterface": {
        "!type": "fn(iid: +IID) -> nsISupports"
      }
    }
  },
  "DOMPointReadOnly": {
    "!type": "?"
  },
  "DOMPoint": {
    "!type": "fn(x: number, y: number, z: number, w: number)",
    "prototype": {
      "x": {
        "!type": "number"
      },
      "y": {
        "!type": "number"
      },
      "z": {
        "!type": "number"
      },
      "w": {
        "!type": "number"
      }
    }
  },
  "DOMQuad": {
    "!type": "fn(rect: +DOMRectReadOnly)",
    "prototype": {
      "p1": {
        "!type": "+DOMPoint"
      },
      "p2": {
        "!type": "+DOMPoint"
      },
      "p3": {
        "!type": "+DOMPoint"
      },
      "p4": {
        "!type": "+DOMPoint"
      },
      "bounds": {
        "!type": "+DOMRectReadOnly"
      }
    }
  },
  "DOMRect": {
    "!type": "fn(x: number, y: number, width: number, height: number)",
    "prototype": {
      "x": {
        "!type": "number"
      },
      "y": {
        "!type": "number"
      },
      "width": {
        "!type": "number"
      },
      "height": {
        "!type": "number"
      }
    }
  },
  "DOMRectReadOnly": {
    "!type": "?"
  },
  "DOMRectList": {
    "!type": "?"
  },
  "DOMRequest": {
    "!type": "?"
  },
  "DOMSettableTokenList": {
    "!type": "?"
  },
  "DOMStringList": {
    "!type": "?"
  },
  "DOMStringMap": {
    "!type": "?"
  },
  "DOMTokenList": {
    "!type": "?"
  },
  "DOMTransactionEvent": {
    "!type": "fn(type: string, eventInitDict: +DOMTransactionEventInit)",
    "prototype": {
      "transactions": {
        "!type": "?"
      }
    }
  },
  "DataChannel": {
    "!type": "?"
  },
  "DataErrorEvent": {
    "!type": "fn(type: string, eventInitDict: +DataErrorEventInit)",
    "prototype": {
      "message": {
        "!type": "string"
      }
    }
  },
  "DataStore": {
    "!type": "?"
  },
  "DataStoreCursor": {
    "!type": "?"
  },
  "DataStoreChangeEvent": {
    "!type": "fn(type: string, eventInitDict: +DataStoreChangeEventInit)",
    "prototype": {
      "revisionId": {
        "!type": "string"
      },
      "id": {
        "!type": "+DataStoreKey"
      },
      "operation": {
        "!type": "string"
      },
      "owner": {
        "!type": "string"
      }
    }
  },
  "DataStoreImpl": {
    "!type": "?"
  },
  "DataStoreCursorImpl": {
    "!type": "?"
  },
  "DataTransfer": {
    "!type": "?"
  },
  "DedicatedWorkerGlobalScope": {
    "!type": "?"
  },
  "DelayNode": {
    "!type": "?"
  },
  "DesktopNotificationCenter": {
    "!type": "?"
  },
  "DesktopNotification": {
    "!type": "?"
  },
  "DeviceLightEvent": {
    "!type": "fn(type: string, eventInitDict: +DeviceLightEventInit)",
    "prototype": {
      "value": {
        "!type": "number"
      }
    }
  },
  "DeviceMotionEvent": {
    "!type": "fn(type: string, eventInitDict: +DeviceMotionEventInit)",
    "prototype": {
      "acceleration": {
        "!type": "+DeviceAcceleration"
      },
      "accelerationIncludingGravity": {
        "!type": "+DeviceAcceleration"
      },
      "rotationRate": {
        "!type": "+DeviceRotationRate"
      },
      "interval": {
        "!type": "number"
      },
      "initDeviceMotionEvent": {
        "!type": "fn(type: string, canBubble: bool, cancelable: bool, acceleration: +DeviceAccelerationInit, accelerationIncludingGravity: +DeviceAccelerationInit, rotationRate: +DeviceRotationRateInit, interval: number) -> void"
      }
    }
  },
  "DeviceOrientationEvent": {
    "!type": "fn(type: string, eventInitDict: +DeviceOrientationEventInit)",
    "prototype": {
      "alpha": {
        "!type": "number"
      },
      "beta": {
        "!type": "number"
      },
      "gamma": {
        "!type": "number"
      },
      "absolute": {
        "!type": "bool"
      },
      "initDeviceOrientationEvent": {
        "!type": "fn(type: string, canBubble: bool, cancelable: bool, alpha: number, beta: number, gamma: number, absolute: bool) -> void"
      }
    }
  },
  "DeviceProximityEvent": {
    "!type": "fn(type: string, eventInitDict: +DeviceProximityEventInit)",
    "prototype": {
      "value": {
        "!type": "number"
      },
      "min": {
        "!type": "number"
      },
      "max": {
        "!type": "number"
      }
    }
  },
  "DeviceStorage": {
    "!type": "?"
  },
  "DeviceStorageChangeEvent": {
    "!type": "fn(type: string, eventInitDict: +DeviceStorageChangeEventInit)",
    "prototype": {
      "path": {
        "!type": "string"
      },
      "reason": {
        "!type": "string"
      }
    }
  },
  "DisplayPortInputPort": {
    "!type": "?"
  },
  "WindowProxy": {
    "!type": "?"
  },
  "Document": {
    "!type": "fn()",
    "prototype": {
      "implementation": {
        "!type": "+DOMImplementation"
      },
      "URL": {
        "!type": "string"
      },
      "documentURI": {
        "!type": "string"
      },
      "compatMode": {
        "!type": "string"
      },
      "characterSet": {
        "!type": "string"
      },
      "contentType": {
        "!type": "string"
      },
      "doctype": {
        "!type": "+DocumentType"
      },
      "documentElement": {
        "!type": "+Element"
      },
      "getElementsByTagName": {
        "!type": "fn(localName: string) -> +HTMLCollection"
      },
      "getElementsByTagNameNS": {
        "!type": "fn(namespace: string, localName: string) -> +HTMLCollection"
      },
      "getElementsByClassName": {
        "!type": "fn(classNames: string) -> +HTMLCollection"
      },
      "getElementById": {
        "!type": "fn(elementId: string) -> +Element"
      },
      "createElement": {
        "!type": "fn(localName: string) -> +Element"
      },
      "createElementNS": {
        "!type": "fn(namespace: string, qualifiedName: string) -> +Element"
      },
      "createDocumentFragment": {
        "!type": "fn() -> +DocumentFragment"
      },
      "createTextNode": {
        "!type": "fn(data: string) -> +Text"
      },
      "createComment": {
        "!type": "fn(data: string) -> +Comment"
      },
      "createProcessingInstruction": {
        "!type": "fn(target: string, data: string) -> +ProcessingInstruction"
      },
      "importNode": {
        "!type": "fn(node: +Node, deep: bool) -> +Node"
      },
      "adoptNode": {
        "!type": "fn(node: +Node) -> +Node"
      },
      "createEvent": {
        "!type": "fn(interface: string) -> +Event"
      },
      "createRange": {
        "!type": "fn() -> +Range"
      },
      "createNodeIterator": {
        "!type": "fn(root: +Node, whatToShow: number, filter: +NodeFilter) -> +NodeIterator"
      },
      "createTreeWalker": {
        "!type": "fn(root: +Node, whatToShow: number, filter: +NodeFilter) -> +TreeWalker"
      },
      "createCDATASection": {
        "!type": "fn(data: string) -> +CDATASection"
      },
      "createAttribute": {
        "!type": "fn(name: string) -> +Attr"
      },
      "createAttributeNS": {
        "!type": "fn(namespace: string, name: string) -> +Attr"
      },
      "inputEncoding": {
        "!type": "string"
      },
      "location": {
        "!type": "+Location"
      },
      "referrer": {
        "!type": "string"
      },
      "lastModified": {
        "!type": "string"
      },
      "readyState": {
        "!type": "string"
      },
      "title": {
        "!type": "string"
      },
      "dir": {
        "!type": "string"
      },
      "defaultView": {
        "!type": "+WindowProxy"
      },
      "activeElement": {
        "!type": "+Element"
      },
      "hasFocus": {
        "!type": "fn() -> bool"
      },
      "onreadystatechange": {
        "!type": "fn(event)"
      },
      "onwheel": {
        "!type": "fn(event)"
      },
      "oncopy": {
        "!type": "fn(event)"
      },
      "oncut": {
        "!type": "fn(event)"
      },
      "onpaste": {
        "!type": "fn(event)"
      },
      "onbeforescriptexecute": {
        "!type": "fn(event)"
      },
      "onafterscriptexecute": {
        "!type": "fn(event)"
      },
      "currentScript": {
        "!type": "+Element"
      },
      "releaseCapture": {
        "!type": "fn() -> void"
      },
      "documentURIObject": {
        "!type": "+URI"
      },
      "referrerPolicy": {
        "!type": "number"
      },
      "registerElement": {
        "!type": "fn(name: string, options: +ElementRegistrationOptions) -> object"
      },
      "hidden": {
        "!type": "bool"
      },
      "visibilityState": {
        "!type": "+VisibilityState"
      },
      "styleSheets": {
        "!type": "+StyleSheetList"
      },
      "selectedStyleSheetSet": {
        "!type": "string"
      },
      "lastStyleSheetSet": {
        "!type": "string"
      },
      "preferredStyleSheetSet": {
        "!type": "string"
      },
      "styleSheetSets": {
        "!type": "+DOMStringList"
      },
      "enableStyleSheetsForSet": {
        "!type": "fn(name: string) -> void"
      },
      "elementFromPoint": {
        "!type": "fn(x: number, y: number) -> +Element"
      },
      "caretPositionFromPoint": {
        "!type": "fn(x: number, y: number) -> +CaretPosition"
      },
      "undoManager": {
        "!type": "+UndoManager"
      },
      "querySelector": {
        "!type": "fn(selectors: string) -> +Element"
      },
      "querySelectorAll": {
        "!type": "fn(selectors: string) -> +NodeList"
      },
      "timeline": {
        "!type": "+DocumentTimeline"
      },
      "getAnonymousNodes": {
        "!type": "fn(elt: +Element) -> +NodeList"
      },
      "getAnonymousElementByAttribute": {
        "!type": "fn(elt: +Element, attrName: string, attrValue: string) -> +Element"
      },
      "getBindingParent": {
        "!type": "fn(node: +Node) -> +Element"
      },
      "loadBindingDocument": {
        "!type": "fn(documentURL: string) -> void"
      },
      "createTouch": {
        "!type": "fn(view: +Window, target: +EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number, clientX: number, clientY: number, radiusX: number, radiusY: number, rotationAngle: number, force: number) -> +Touch"
      },
      "createTouchList": {
        "!type": "fn(touch: +Touch, touches: +Touch) -> +TouchList"
      },
      "styleSheetChangeEventsEnabled": {
        "!type": "bool"
      },
      "obsoleteSheet": {
        "!type": "fn(sheetURI: +URI) -> void"
      },
      "docShell": {
        "!type": "nsIDocShell"
      },
      "contentLanguage": {
        "!type": "string"
      },
      "documentLoadGroup": {
        "!type": "nsILoadGroup"
      },
      "isSrcdocDocument": {
        "!type": "bool"
      },
      "insertAnonymousContent": {
        "!type": "fn(aElement: +Element) -> +AnonymousContent"
      },
      "removeAnonymousContent": {
        "!type": "fn(aContent: +AnonymousContent) -> void"
      },
      "createExpression": {
        "!type": "fn(expression: string, resolver: +XPathNSResolver) -> +XPathExpression"
      },
      "createNSResolver": {
        "!type": "fn(nodeResolver: +Node) -> +Node"
      },
      "evaluate": {
        "!type": "fn(expression: string, contextNode: +Node, resolver: +XPathNSResolver, type: number, result: object) -> +XPathResult"
      },
      "queryInterface": {
        "!type": "fn(iid: +IID) -> nsISupports"
      },
      "onabort": {
        "!type": "fn(event)"
      },
      "onblur": {
        "!type": "fn(event)"
      },
      "onfocus": {
        "!type": "fn(event)"
      },
      "oncanplay": {
        "!type": "fn(event)"
      },
      "oncanplaythrough": {
        "!type": "fn(event)"
      },
      "onchange": {
        "!type": "fn(event)"
      },
      "onclick": {
        "!type": "fn(event)"
      },
      "oncontextmenu": {
        "!type": "fn(event)"
      },
      "ondblclick": {
        "!type": "fn(event)"
      },
      "ondrag": {
        "!type": "fn(event)"
      },
      "ondragend": {
        "!type": "fn(event)"
      },
      "ondragenter": {
        "!type": "fn(event)"
      },
      "ondragleave": {
        "!type": "fn(event)"
      },
      "ondragover": {
        "!type": "fn(event)"
      },
      "ondragstart": {
        "!type": "fn(event)"
      },
      "ondrop": {
        "!type": "fn(event)"
      },
      "ondurationchange": {
        "!type": "fn(event)"
      },
      "onemptied": {
        "!type": "fn(event)"
      },
      "onended": {
        "!type": "fn(event)"
      },
      "oninput": {
        "!type": "fn(event)"
      },
      "oninvalid": {
        "!type": "fn(event)"
      },
      "onkeydown": {
        "!type": "fn(event)"
      },
      "onkeypress": {
        "!type": "fn(event)"
      },
      "onkeyup": {
        "!type": "fn(event)"
      },
      "onload": {
        "!type": "fn(event)"
      },
      "onloadeddata": {
        "!type": "fn(event)"
      },
      "onloadedmetadata": {
        "!type": "fn(event)"
      },
      "onloadstart": {
        "!type": "fn(event)"
      },
      "onmousedown": {
        "!type": "fn(event)"
      },
      "onmouseenter": {
        "!type": "fn(event)"
      },
      "onmouseleave": {
        "!type": "fn(event)"
      },
      "onmousemove": {
        "!type": "fn(event)"
      },
      "onmouseout": {
        "!type": "fn(event)"
      },
      "onmouseover": {
        "!type": "fn(event)"
      },
      "onmouseup": {
        "!type": "fn(event)"
      },
      "onpause": {
        "!type": "fn(event)"
      },
      "onplay": {
        "!type": "fn(event)"
      },
      "onplaying": {
        "!type": "fn(event)"
      },
      "onprogress": {
        "!type": "fn(event)"
      },
      "onratechange": {
        "!type": "fn(event)"
      },
      "onreset": {
        "!type": "fn(event)"
      },
      "onresize": {
        "!type": "fn(event)"
      },
      "onscroll": {
        "!type": "fn(event)"
      },
      "onseeked": {
        "!type": "fn(event)"
      },
      "onseeking": {
        "!type": "fn(event)"
      },
      "onselect": {
        "!type": "fn(event)"
      },
      "onshow": {
        "!type": "fn(event)"
      },
      "onstalled": {
        "!type": "fn(event)"
      },
      "onsubmit": {
        "!type": "fn(event)"
      },
      "onsuspend": {
        "!type": "fn(event)"
      },
      "ontimeupdate": {
        "!type": "fn(event)"
      },
      "onvolumechange": {
        "!type": "fn(event)"
      },
      "onwaiting": {
        "!type": "fn(event)"
      },
      "onpointercancel": {
        "!type": "fn(event)"
      },
      "onpointerdown": {
        "!type": "fn(event)"
      },
      "onpointerup": {
        "!type": "fn(event)"
      },
      "onpointermove": {
        "!type": "fn(event)"
      },
      "onpointerout": {
        "!type": "fn(event)"
      },
      "onpointerover": {
        "!type": "fn(event)"
      },
      "onpointerenter": {
        "!type": "fn(event)"
      },
      "onpointerleave": {
        "!type": "fn(event)"
      },
      "ongotpointercapture": {
        "!type": "fn(event)"
      },
      "onlostpointercapture": {
        "!type": "fn(event)"
      },
      "onmozfullscreenchange": {
        "!type": "fn(event)"
      },
      "onmozfullscreenerror": {
        "!type": "fn(event)"
      },
      "onmozpointerlockchange": {
        "!type": "fn(event)"
      },
      "onmozpointerlockerror": {
        "!type": "fn(event)"
      },
      "ontouchstart": {
        "!type": "fn(event)"
      },
      "ontouchend": {
        "!type": "fn(event)"
      },
      "ontouchmove": {
        "!type": "fn(event)"
      },
      "ontouchcancel": {
        "!type": "fn(event)"
      },
      "children": {
        "!type": "+HTMLCollection"
      },
      "firstElementChild": {
        "!type": "+Element"
      },
      "lastElementChild": {
        "!type": "+Element"
      },
      "childElementCount": {
        "!type": "number"
      },
      "onerror": {
        "!type": "fn(event)"
      },
      "getBoxQuads": {
        "!type": "fn(options: +BoxQuadOptions) -> [+DOMQuad]"
      },
      "convertQuadFromNode": {
        "!type": "fn(quad: +DOMQuad, from: +GeometryNode, options: +ConvertCoordinateOptions) -> +DOMQuad"
      },
      "convertRectFromNode": {
        "!type": "fn(rect: +DOMRectReadOnly, from: +GeometryNode, options: +ConvertCoordinateOptions) -> +DOMQuad"
      },
      "convertPointFromNode": {
        "!type": "fn(point: +DOMPointInit, from: +GeometryNode, options: +ConvertCoordinateOptions) -> +DOMPoint"
      },
      "fonts": {
        "!type": "+FontFaceSet"
      }
    }
  },
  "DocumentFragment": {
    "!type": "fn()",
    "prototype": {
      "getElementById": {
        "!type": "fn(elementId: string) -> +Element"
      },
      "querySelector": {
        "!type": "fn(selectors: string) -> +Element"
      },
      "querySelectorAll": {
        "!type": "fn(selectors: string) -> +NodeList"
      },
      "children": {
        "!type": "+HTMLCollection"
      },
      "firstElementChild": {
        "!type": "+Element"
      },
      "lastElementChild": {
        "!type": "+Element"
      },
      "childElementCount": {
        "!type": "number"
      },
      "queryInterface": {
        "!type": "fn(iid: +IID) -> nsISupports"
      }
    }
  },
  "DocumentTimeline": {
    "!type": "?"
  },
  "DocumentType": {
    "!type": "?"
  },
  "DownloadEvent": {
    "!type": "fn(type: string, eventInitDict: +DownloadEventInit)",
    "prototype": {
      "download": {
        "!type": "+DOMDownload"
      }
    }
  },
  "DOMDownload": {
    "!type": "?"
  },
  "DragEvent": {
    "!type": "fn(type: string, eventInitDict: +DragEventInit)",
    "prototype": {
      "dataTransfer": {
        "!type": "+DataTransfer"
      },
      "initDragEvent": {
        "!type": "fn(type: string, canBubble: bool, cancelable: bool, aView: +Window, aDetail: number, aScreenX: number, aScreenY: number, aClientX: number, aClientY: number, aCtrlKey: bool, aAltKey: bool, aShiftKey: bool, aMetaKey: bool, aButton: number, aRelatedTarget: +EventTarget, aDataTransfer: +DataTransfer) -> void"
      }
    }
  },
  "DummyInterface": {
    "!type": "?"
  },
  "DummyInterfaceWorkers": {
    "!type": "?"
  },
  "DynamicsCompressorNode": {
    "!type": "?"
  },
  "Element": {
    "!type": "?"
  },
  "EngineeringMode": {
    "!type": "?"
  },
  "ErrorEvent": {
    "!type": "fn(type: string, eventInitDict: +ErrorEventInit)",
    "prototype": {
      "message": {
        "!type": "string"
      },
      "filename": {
        "!type": "string"
      },
      "lineno": {
        "!type": "number"
      },
      "colno": {
        "!type": "number"
      },
      "error": {
        "!type": "?"
      }
    }
  },
  "Event": {
    "!type": "fn(type: string, eventInitDict: +EventInit)",
    "prototype": {
      "type": {
        "!type": "string"
      },
      "target": {
        "!type": "+EventTarget"
      },
      "currentTarget": {
        "!type": "+EventTarget"
      },
      "NONE": {
        "!type": "number"
      },
      "CAPTURING_PHASE": {
        "!type": "number"
      },
      "AT_TARGET": {
        "!type": "number"
      },
      "BUBBLING_PHASE": {
        "!type": "number"
      },
      "eventPhase": {
        "!type": "number"
      },
      "stopPropagation": {
        "!type": "fn() -> void"
      },
      "stopImmediatePropagation": {
        "!type": "fn() -> void"
      },
      "bubbles": {
        "!type": "bool"
      },
      "cancelable": {
        "!type": "bool"
      },
      "preventDefault": {
        "!type": "fn() -> void"
      },
      "defaultPrevented": {
        "!type": "bool"
      },
      "isTrusted": {
        "!type": "bool"
      },
      "timeStamp": {
        "!type": "+DOMHighResTimeStamp"
      },
      "initEvent": {
        "!type": "fn(type: string, bubbles: bool, cancelable: bool) -> void"
      },
      "ALT_MASK": {
        "!type": "number"
      },
      "CONTROL_MASK": {
        "!type": "number"
      },
      "SHIFT_MASK": {
        "!type": "number"
      },
      "META_MASK": {
        "!type": "number"
      },
      "originalTarget": {
        "!type": "+EventTarget"
      },
      "explicitOriginalTarget": {
        "!type": "+EventTarget"
      },
      "composedTarget": {
        "!type": "+EventTarget"
      },
      "multipleActionsPrevented": {
        "!type": "bool"
      },
      "isSynthesized": {
        "!type": "bool"
      },
      "getPreventDefault": {
        "!type": "fn() -> bool"
      },
      "queryInterface": {
        "!type": "fn(iid: +IID) -> nsISupports"
      }
    }
  },
  "EventSource": {
    "!type": "fn(url: string, eventSourceInitDict: +EventSourceInit)",
    "prototype": {
      "url": {
        "!type": "string"
      },
      "withCredentials": {
        "!type": "bool"
      },
      "CONNECTING": {
        "!type": "number"
      },
      "OPEN": {
        "!type": "number"
      },
      "CLOSED": {
        "!type": "number"
      },
      "readyState": {
        "!type": "number"
      },
      "onopen": {
        "!type": "fn(event)"
      },
      "onmessage": {
        "!type": "fn(event)"
      },
      "onerror": {
        "!type": "fn(event)"
      },
      "close": {
        "!type": "fn() -> void"
      },
      "queryInterface": {
        "!type": "fn(iid: +IID) -> nsISupports"
      }
    }
  },
  "EventTarget": {
    "!type": "?"
  },
  "ExtendableEvent": {
    "!type": "fn(type: string, eventInitDict: +ExtendableEventInit)",
    "prototype": {
      "waitUntil": {
        "!type": "fn(p: +Promise) -> void"
      }
    }
  },
  "External": {
    "!type": "?"
  },
  "FMRadio": {
    "!type": "?"
  },
  "FetchEvent": {
    "!type": "fn(type: string, eventInitDict: +FetchEventInit)",
    "prototype": {
      "request": {
        "!type": "+Request"
      },
      "client": {
        "!type": "+Client"
      },
      "isReload": {
        "!type": "bool"
      },
      "respondWith": {
        "!type": "fn(r: ?) -> void"
      }
    }
  },
  "File": {
    "!type": "fn(fileBits: string, options: +ChromeFilePropertyBag)",
    "prototype": {
      "name": {
        "!type": "string"
      },
      "lastModified": {
        "!type": "number"
      },
      "lastModifiedDate": {
        "!type": "+Date"
      }
    }
  },
  "FileList": {
    "!type": "?"
  },
  "FileReader": {
    "!type": "fn()",
    "prototype": {
      "readAsArrayBuffer": {
        "!type": "fn(blob: +Blob) -> void"
      },
      "readAsText": {
        "!type": "fn(blob: +Blob, label: string) -> void"
      },
      "readAsDataURL": {
        "!type": "fn(blob: +Blob) -> void"
      },
      "abort": {
        "!type": "fn() -> void"
      },
      "EMPTY": {
        "!type": "number"
      },
      "LOADING": {
        "!type": "number"
      },
      "DONE": {
        "!type": "number"
      },
      "readyState": {
        "!type": "number"
      },
      "result": {
        "!type": "?"
      },
      "error": {
        "!type": "+DOMError"
      },
      "onloadstart": {
        "!type": "fn(event)"
      },
      "onprogress": {
        "!type": "fn(event)"
      },
      "onload": {
        "!type": "fn(event)"
      },
      "onabort": {
        "!type": "fn(event)"
      },
      "onerror": {
        "!type": "fn(event)"
      },
      "onloadend": {
        "!type": "fn(event)"
      },
      "readAsBinaryString": {
        "!type": "fn(filedata: +Blob) -> void"
      }
    }
  },
  "FileReaderSync": {
    "!type": "fn()",
    "prototype": {
      "readAsArrayBuffer": {
        "!type": "fn(blob: +Blob) -> +ArrayBuffer"
      },
      "readAsBinaryString": {
        "!type": "fn(blob: +Blob) -> string"
      },
      "readAsText": {
        "!type": "fn(blob: +Blob, encoding: string) -> string"
      },
      "readAsDataURL": {
        "!type": "fn(blob: +Blob) -> string"
      }
    }
  },
  "FocusEvent": {
    "!type": "fn(typeArg: string, focusEventInitDict: +FocusEventInit)",
    "prototype": {
      "relatedTarget": {
        "!type": "+EventTarget"
      }
    }
  },
  "FontFace": {
    "!type": "fn(family: string, source: ?, descriptors: +FontFaceDescriptors)",
    "prototype": {
      "family": {
        "!type": "string"
      },
      "style": {
        "!type": "string"
      },
      "weight": {
        "!type": "string"
      },
      "stretch": {
        "!type": "string"
      },
      "unicodeRange": {
        "!type": "string"
      },
      "variant": {
        "!type": "string"
      },
      "featureSettings": {
        "!type": "string"
      },
      "status": {
        "!type": "+FontFaceLoadStatus"
      },
      "load": {
        "!type": "fn() -> +Promise[value=+Promise]"
      },
      "loaded": {
        "!type": "+Promise[value=+Promise]"
      }
    }
  },
  "FontFaceSet": {
    "!type": "?"
  },
  "FormData": {
    "!type": "fn(form: +HTMLFormElement)",
    "prototype": {
      "append": {
        "!type": "fn(name: string, value: +Blob, filename: string) -> void"
      },
      "delete": {
        "!type": "fn(name: string) -> void"
      },
      "get": {
        "!type": "fn(name: string) -> +FormDataEntryValue"
      },
      "getAll": {
        "!type": "fn(name: string) -> [+FormDataEntryValue]"
      },
      "has": {
        "!type": "fn(name: string) -> bool"
      },
      "set": {
        "!type": "fn(name: string, value: +Blob, filename: string) -> void"
      },
      "queryInterface": {
        "!type": "fn(iid: +IID) -> nsISupports"
      }
    }
  },
  "GainNode": {
    "!type": "?"
  },
  "GamepadButton": {
    "!type": "?"
  },
  "Gamepad": {
    "!type": "?"
  },
  "GamepadAxisMoveEvent": {
    "!type": "fn(type: string, eventInitDict: +GamepadAxisMoveEventInit)",
    "prototype": {
      "axis": {
        "!type": "number"
      },
      "value": {
        "!type": "number"
      }
    }
  },
  "GamepadButtonEvent": {
    "!type": "fn(type: string, eventInitDict: +GamepadButtonEventInit)",
    "prototype": {
      "button": {
        "!type": "number"
      }
    }
  },
  "GamepadEvent": {
    "!type": "fn(type: string, eventInitDict: +GamepadEventInit)",
    "prototype": {
      "gamepad": {
        "!type": "+Gamepad"
      }
    }
  },
  "HDMIInputPort": {
    "!type": "?"
  },
  "HTMLAllCollection": {
    "!type": "?"
  },
  "HTMLAnchorElement": {
    "!type": "?"
  },
  "HTMLAppletElement": {
    "!type": "?"
  },
  "HTMLAreaElement": {
    "!type": "?"
  },
  "HTMLAudioElement": {
    "!type": "fn(src: string)",
    "prototype": {}
  },
  "Audio": {
    "!type": "fn(src: string)",
    "prototype": {}
  },
  "HTMLBRElement": {
    "!type": "?"
  },
  "HTMLBaseElement": {
    "!type": "?"
  },
  "HTMLBodyElement": {
    "!type": "?"
  },
  "HTMLButtonElement": {
    "!type": "?"
  },
  "Variant": {
    "!type": "?"
  },
  "HTMLCanvasElement": {
    "!type": "?"
  },
  "HTMLCollection": {
    "!type": "?"
  },
  "HTMLContentElement": {
    "!type": "?"
  },
  "HTMLDListElement": {
    "!type": "?"
  },
  "HTMLDataElement": {
    "!type": "?"
  },
  "HTMLDataListElement": {
    "!type": "?"
  },
  "HTMLDirectoryElement": {
    "!type": "?"
  },
  "HTMLDivElement": {
    "!type": "?"
  },
  "HTMLDocument": {
    "!type": "?"
  },
  "HTMLElement": {
    "!type": "?"
  },
  "HTMLUnknownElement": {
    "!type": "?"
  },
  "HTMLEmbedElement": {
    "!type": "?"
  },
  "HTMLFieldSetElement": {
    "!type": "?"
  },
  "HTMLFontElement": {
    "!type": "?"
  },
  "HTMLFormControlsCollection": {
    "!type": "?"
  },
  "HTMLFormElement": {
    "!type": "?"
  },
  "HTMLFrameElement": {
    "!type": "?"
  },
  "HTMLFrameSetElement": {
    "!type": "?"
  },
  "HTMLHRElement": {
    "!type": "?"
  },
  "HTMLHeadElement": {
    "!type": "?"
  },
  "HTMLHeadingElement": {
    "!type": "?"
  },
  "HTMLHtmlElement": {
    "!type": "?"
  },
  "HTMLIFrameElement": {
    "!type": "?"
  },
  "imgINotificationObserver": {
    "!type": "?"
  },
  "imgIRequest": {
    "!type": "?"
  },
  "HTMLImageElement": {
    "!type": "fn(width: number, height: number)",
    "prototype": {
      "alt": {
        "!type": "string"
      },
      "src": {
        "!type": "string"
      },
      "srcset": {
        "!type": "string"
      },
      "crossOrigin": {
        "!type": "string"
      },
      "useMap": {
        "!type": "string"
      },
      "isMap": {
        "!type": "bool"
      },
      "width": {
        "!type": "number"
      },
      "height": {
        "!type": "number"
      },
      "naturalWidth": {
        "!type": "number"
      },
      "naturalHeight": {
        "!type": "number"
      },
      "complete": {
        "!type": "bool"
      },
      "name": {
        "!type": "string"
      },
      "align": {
        "!type": "string"
      },
      "hspace": {
        "!type": "number"
      },
      "vspace": {
        "!type": "number"
      },
      "longDesc": {
        "!type": "string"
      },
      "border": {
        "!type": "string"
      },
      "sizes": {
        "!type": "string"
      },
      "currentSrc": {
        "!type": "string"
      },
      "lowsrc": {
        "!type": "string"
      },
      "x": {
        "!type": "number"
      },
      "y": {
        "!type": "number"
      }
    }
  },
  "Image": {
    "!type": "fn(width: number, height: number)",
    "prototype": {
      "alt": {
        "!type": "string"
      },
      "src": {
        "!type": "string"
      },
      "srcset": {
        "!type": "string"
      },
      "crossOrigin": {
        "!type": "string"
      },
      "useMap": {
        "!type": "string"
      },
      "isMap": {
        "!type": "bool"
      },
      "width": {
        "!type": "number"
      },
      "height": {
        "!type": "number"
      },
      "naturalWidth": {
        "!type": "number"
      },
      "naturalHeight": {
        "!type": "number"
      },
      "complete": {
        "!type": "bool"
      },
      "name": {
        "!type": "string"
      },
      "align": {
        "!type": "string"
      },
      "hspace": {
        "!type": "number"
      },
      "vspace": {
        "!type": "number"
      },
      "longDesc": {
        "!type": "string"
      },
      "border": {
        "!type": "string"
      },
      "sizes": {
        "!type": "string"
      },
      "currentSrc": {
        "!type": "string"
      },
      "lowsrc": {
        "!type": "string"
      },
      "x": {
        "!type": "number"
      },
      "y": {
        "!type": "number"
      }
    }
  },
  "HTMLInputElement": {
    "!type": "?"
  },
  "HTMLLIElement": {
    "!type": "?"
  },
  "HTMLLabelElement": {
    "!type": "?"
  },
  "HTMLLegendElement": {
    "!type": "?"
  },
  "HTMLLinkElement": {
    "!type": "?"
  },
  "HTMLMapElement": {
    "!type": "?"
  },
  "HTMLMediaElement": {
    "!type": "?"
  },
  "MenuBuilder": {
    "!type": "?"
  },
  "HTMLMenuElement": {
    "!type": "?"
  },
  "HTMLMenuItemElement": {
    "!type": "?"
  },
  "HTMLMetaElement": {
    "!type": "?"
  },
  "HTMLMeterElement": {
    "!type": "?"
  },
  "HTMLModElement": {
    "!type": "?"
  },
  "HTMLOListElement": {
    "!type": "?"
  },
  "HTMLObjectElement": {
    "!type": "?"
  },
  "HTMLOptGroupElement": {
    "!type": "?"
  },
  "HTMLOptionElement": {
    "!type": "fn(text: string, value: string, defaultSelected: bool, selected: bool)",
    "prototype": {
      "disabled": {
        "!type": "bool"
      },
      "form": {
        "!type": "+HTMLFormElement"
      },
      "label": {
        "!type": "string"
      },
      "defaultSelected": {
        "!type": "bool"
      },
      "selected": {
        "!type": "bool"
      },
      "value": {
        "!type": "string"
      },
      "text": {
        "!type": "string"
      },
      "index": {
        "!type": "number"
      }
    }
  },
  "Option": {
    "!type": "fn(text: string, value: string, defaultSelected: bool, selected: bool)",
    "prototype": {
      "disabled": {
        "!type": "bool"
      },
      "form": {
        "!type": "+HTMLFormElement"
      },
      "label": {
        "!type": "string"
      },
      "defaultSelected": {
        "!type": "bool"
      },
      "selected": {
        "!type": "bool"
      },
      "value": {
        "!type": "string"
      },
      "text": {
        "!type": "string"
      },
      "index": {
        "!type": "number"
      }
    }
  },
  "HTMLOptionsCollection": {
    "!type": "?"
  },
  "HTMLOutputElement": {
    "!type": "?"
  },
  "HTMLParagraphElement": {
    "!type": "?"
  },
  "HTMLParamElement": {
    "!type": "?"
  },
  "HTMLPictureElement": {
    "!type": "?"
  },
  "HTMLPreElement": {
    "!type": "?"
  },
  "HTMLProgressElement": {
    "!type": "?"
  },
  "HTMLPropertiesCollection": {
    "!type": "?"
  },
  "PropertyNodeList": {
    "!type": "?"
  },
  "HTMLQuoteElement": {
    "!type": "?"
  },
  "HTMLScriptElement": {
    "!type": "?"
  },
  "HTMLSelectElement": {
    "!type": "?"
  },
  "HTMLShadowElement": {
    "!type": "?"
  },
  "HTMLSourceElement": {
    "!type": "?"
  },
  "HTMLSpanElement": {
    "!type": "?"
  },
  "HTMLStyleElement": {
    "!type": "?"
  },
  "HTMLTableCaptionElement": {
    "!type": "?"
  },
  "HTMLTableCellElement": {
    "!type": "?"
  },
  "HTMLTableColElement": {
    "!type": "?"
  },
  "HTMLTableElement": {
    "!type": "?"
  },
  "HTMLTableRowElement": {
    "!type": "?"
  },
  "HTMLTableSectionElement": {
    "!type": "?"
  },
  "HTMLTemplateElement": {
    "!type": "?"
  },
  "HTMLTextAreaElement": {
    "!type": "?"
  },
  "HTMLTimeElement": {
    "!type": "?"
  },
  "HTMLTitleElement": {
    "!type": "?"
  },
  "HTMLTrackElement": {
    "!type": "?"
  },
  "HTMLUListElement": {
    "!type": "?"
  },
  "HTMLVideoElement": {
    "!type": "?"
  },
  "HashChangeEvent": {
    "!type": "fn(type: string, eventInitDict: +HashChangeEventInit)",
    "prototype": {
      "oldURL": {
        "!type": "string"
      },
      "newURL": {
        "!type": "string"
      },
      "initHashChangeEvent": {
        "!type": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, oldURLArg: string, newURLArg: string) -> void"
      }
    }
  },
  "Headers": {
    "!type": "fn(init: +HeadersInit)",
    "prototype": {
      "append": {
        "!type": "fn(name: +ByteString, value: +ByteString) -> void"
      },
      "delete": {
        "!type": "fn(name: +ByteString) -> void"
      },
      "get": {
        "!type": "fn(name: +ByteString) -> +ByteString"
      },
      "getAll": {
        "!type": "fn(name: +ByteString) -> [+ByteString]"
      },
      "has": {
        "!type": "fn(name: +ByteString) -> bool"
      },
      "set": {
        "!type": "fn(name: +ByteString, value: +ByteString) -> void"
      },
      "guard": {
        "!type": "+HeadersGuardEnum"
      }
    }
  },
  "History": {
    "!type": "?"
  },
  "IDBCursor": {
    "!type": "?"
  },
  "IDBCursorWithValue": {
    "!type": "?"
  },
  "IDBDatabase": {
    "!type": "?"
  },
  "IDBFactory": {
    "!type": "?"
  },
  "IDBFileHandle": {
    "!type": "?"
  },
  "IDBFileRequest": {
    "!type": "?"
  },
  "IDBIndex": {
    "!type": "?"
  },
  "IDBKeyRange": {
    "!type": "?"
  },
  "IDBMutableFile": {
    "!type": "?"
  },
  "IDBObjectStore": {
    "!type": "?"
  },
  "IDBOpenDBRequest": {
    "!type": "?"
  },
  "IDBRequest": {
    "!type": "?"
  },
  "IDBTransaction": {
    "!type": "?"
  },
  "IDBVersionChangeEvent": {
    "!type": "fn(type: string, eventInitDict: +IDBVersionChangeEventInit)",
    "prototype": {
      "oldVersion": {
        "!type": "number"
      },
      "newVersion": {
        "!type": "number"
      }
    }
  },
  "IccCardLockError": {
    "!type": "fn(errorName: string, retryCount: number)",
    "prototype": {
      "retryCount": {
        "!type": "number"
      }
    }
  },
  "IccChangeEvent": {
    "!type": "fn(type: string, eventInitDict: +IccChangeEventInit)",
    "prototype": {
      "iccId": {
        "!type": "string"
      }
    }
  },
  "ImageCapture": {
    "!type": "fn(track: +VideoStreamTrack)",
    "prototype": {
      "videoStreamTrack": {
        "!type": "+VideoStreamTrack"
      },
      "onphoto": {
        "!type": "fn(event)"
      },
      "onerror": {
        "!type": "fn(event)"
      },
      "takePhoto": {
        "!type": "fn() -> void"
      }
    }
  },
  "ImageCaptureErrorEvent": {
    "!type": "fn(type: string, imageCaptureErrorInitDict: +ImageCaptureErrorEventInit)",
    "prototype": {
      "imageCaptureError": {
        "!type": "+ImageCaptureError"
      }
    }
  },
  "ImageData": {
    "!type": "fn(data: +Uint8ClampedArray, sw: number, sh: number)",
    "prototype": {
      "width": {
        "!type": "number"
      },
      "height": {
        "!type": "number"
      },
      "data": {
        "!type": "+Uint8ClampedArray"
      }
    }
  },
  "InputEvent": {
    "!type": "fn(type: string, eventInitDict: +InputEventInit)",
    "prototype": {
      "isComposing": {
        "!type": "bool"
      }
    }
  },
  "InputPort": {
    "!type": "?"
  },
  "InputPortManager": {
    "!type": "?"
  },
  "InstallEvent": {
    "!type": "fn(type: string, eventInitDict: +InstallEventInit)",
    "prototype": {
      "activeWorker": {
        "!type": "+ServiceWorker"
      },
      "replace": {
        "!type": "fn() -> void"
      }
    }
  },
  "InstallPhaseEvent": {
    "!type": "fn(type: string, eventInitDict: +EventInit)",
    "prototype": {
      "waitUntil": {
        "!type": "fn(p: +Promise) -> void"
      }
    }
  },
  "KeyEvent": {
    "!type": "?"
  },
  "KeyboardEvent": {
    "!type": "fn(typeArg: string, keyboardEventInitDict: +KeyboardEventInit)",
    "prototype": {
      "charCode": {
        "!type": "number"
      },
      "keyCode": {
        "!type": "number"
      },
      "altKey": {
        "!type": "bool"
      },
      "ctrlKey": {
        "!type": "bool"
      },
      "shiftKey": {
        "!type": "bool"
      },
      "metaKey": {
        "!type": "bool"
      },
      "getModifierState": {
        "!type": "fn(key: string) -> bool"
      },
      "DOM_KEY_LOCATION_STANDARD": {
        "!type": "number"
      },
      "DOM_KEY_LOCATION_LEFT": {
        "!type": "number"
      },
      "DOM_KEY_LOCATION_RIGHT": {
        "!type": "number"
      },
      "DOM_KEY_LOCATION_NUMPAD": {
        "!type": "number"
      },
      "location": {
        "!type": "number"
      },
      "repeat": {
        "!type": "bool"
      },
      "isComposing": {
        "!type": "bool"
      },
      "key": {
        "!type": "string"
      },
      "code": {
        "!type": "string"
      },
      "DOM_VK_CANCEL": {
        "!type": "number"
      },
      "DOM_VK_HELP": {
        "!type": "number"
      },
      "DOM_VK_BACK_SPACE": {
        "!type": "number"
      },
      "DOM_VK_TAB": {
        "!type": "number"
      },
      "DOM_VK_CLEAR": {
        "!type": "number"
      },
      "DOM_VK_RETURN": {
        "!type": "number"
      },
      "DOM_VK_SHIFT": {
        "!type": "number"
      },
      "DOM_VK_CONTROL": {
        "!type": "number"
      },
      "DOM_VK_ALT": {
        "!type": "number"
      },
      "DOM_VK_PAUSE": {
        "!type": "number"
      },
      "DOM_VK_CAPS_LOCK": {
        "!type": "number"
      },
      "DOM_VK_KANA": {
        "!type": "number"
      },
      "DOM_VK_HANGUL": {
        "!type": "number"
      },
      "DOM_VK_EISU": {
        "!type": "number"
      },
      "DOM_VK_JUNJA": {
        "!type": "number"
      },
      "DOM_VK_FINAL": {
        "!type": "number"
      },
      "DOM_VK_HANJA": {
        "!type": "number"
      },
      "DOM_VK_KANJI": {
        "!type": "number"
      },
      "DOM_VK_ESCAPE": {
        "!type": "number"
      },
      "DOM_VK_CONVERT": {
        "!type": "number"
      },
      "DOM_VK_NONCONVERT": {
        "!type": "number"
      },
      "DOM_VK_ACCEPT": {
        "!type": "number"
      },
      "DOM_VK_MODECHANGE": {
        "!type": "number"
      },
      "DOM_VK_SPACE": {
        "!type": "number"
      },
      "DOM_VK_PAGE_UP": {
        "!type": "number"
      },
      "DOM_VK_PAGE_DOWN": {
        "!type": "number"
      },
      "DOM_VK_END": {
        "!type": "number"
      },
      "DOM_VK_HOME": {
        "!type": "number"
      },
      "DOM_VK_LEFT": {
        "!type": "number"
      },
      "DOM_VK_UP": {
        "!type": "number"
      },
      "DOM_VK_RIGHT": {
        "!type": "number"
      },
      "DOM_VK_DOWN": {
        "!type": "number"
      },
      "DOM_VK_SELECT": {
        "!type": "number"
      },
      "DOM_VK_PRINT": {
        "!type": "number"
      },
      "DOM_VK_EXECUTE": {
        "!type": "number"
      },
      "DOM_VK_PRINTSCREEN": {
        "!type": "number"
      },
      "DOM_VK_INSERT": {
        "!type": "number"
      },
      "DOM_VK_DELETE": {
        "!type": "number"
      },
      "DOM_VK_0": {
        "!type": "number"
      },
      "DOM_VK_1": {
        "!type": "number"
      },
      "DOM_VK_2": {
        "!type": "number"
      },
      "DOM_VK_3": {
        "!type": "number"
      },
      "DOM_VK_4": {
        "!type": "number"
      },
      "DOM_VK_5": {
        "!type": "number"
      },
      "DOM_VK_6": {
        "!type": "number"
      },
      "DOM_VK_7": {
        "!type": "number"
      },
      "DOM_VK_8": {
        "!type": "number"
      },
      "DOM_VK_9": {
        "!type": "number"
      },
      "DOM_VK_COLON": {
        "!type": "number"
      },
      "DOM_VK_SEMICOLON": {
        "!type": "number"
      },
      "DOM_VK_LESS_THAN": {
        "!type": "number"
      },
      "DOM_VK_EQUALS": {
        "!type": "number"
      },
      "DOM_VK_GREATER_THAN": {
        "!type": "number"
      },
      "DOM_VK_QUESTION_MARK": {
        "!type": "number"
      },
      "DOM_VK_AT": {
        "!type": "number"
      },
      "DOM_VK_A": {
        "!type": "number"
      },
      "DOM_VK_B": {
        "!type": "number"
      },
      "DOM_VK_C": {
        "!type": "number"
      },
      "DOM_VK_D": {
        "!type": "number"
      },
      "DOM_VK_E": {
        "!type": "number"
      },
      "DOM_VK_F": {
        "!type": "number"
      },
      "DOM_VK_G": {
        "!type": "number"
      },
      "DOM_VK_H": {
        "!type": "number"
      },
      "DOM_VK_I": {
        "!type": "number"
      },
      "DOM_VK_J": {
        "!type": "number"
      },
      "DOM_VK_K": {
        "!type": "number"
      },
      "DOM_VK_L": {
        "!type": "number"
      },
      "DOM_VK_M": {
        "!type": "number"
      },
      "DOM_VK_N": {
        "!type": "number"
      },
      "DOM_VK_O": {
        "!type": "number"
      },
      "DOM_VK_P": {
        "!type": "number"
      },
      "DOM_VK_Q": {
        "!type": "number"
      },
      "DOM_VK_R": {
        "!type": "number"
      },
      "DOM_VK_S": {
        "!type": "number"
      },
      "DOM_VK_T": {
        "!type": "number"
      },
      "DOM_VK_U": {
        "!type": "number"
      },
      "DOM_VK_V": {
        "!type": "number"
      },
      "DOM_VK_W": {
        "!type": "number"
      },
      "DOM_VK_X": {
        "!type": "number"
      },
      "DOM_VK_Y": {
        "!type": "number"
      },
      "DOM_VK_Z": {
        "!type": "number"
      },
      "DOM_VK_WIN": {
        "!type": "number"
      },
      "DOM_VK_CONTEXT_MENU": {
        "!type": "number"
      },
      "DOM_VK_SLEEP": {
        "!type": "number"
      },
      "DOM_VK_NUMPAD0": {
        "!type": "number"
      },
      "DOM_VK_NUMPAD1": {
        "!type": "number"
      },
      "DOM_VK_NUMPAD2": {
        "!type": "number"
      },
      "DOM_VK_NUMPAD3": {
        "!type": "number"
      },
      "DOM_VK_NUMPAD4": {
        "!type": "number"
      },
      "DOM_VK_NUMPAD5": {
        "!type": "number"
      },
      "DOM_VK_NUMPAD6": {
        "!type": "number"
      },
      "DOM_VK_NUMPAD7": {
        "!type": "number"
      },
      "DOM_VK_NUMPAD8": {
        "!type": "number"
      },
      "DOM_VK_NUMPAD9": {
        "!type": "number"
      },
      "DOM_VK_MULTIPLY": {
        "!type": "number"
      },
      "DOM_VK_ADD": {
        "!type": "number"
      },
      "DOM_VK_SEPARATOR": {
        "!type": "number"
      },
      "DOM_VK_SUBTRACT": {
        "!type": "number"
      },
      "DOM_VK_DECIMAL": {
        "!type": "number"
      },
      "DOM_VK_DIVIDE": {
        "!type": "number"
      },
      "DOM_VK_F1": {
        "!type": "number"
      },
      "DOM_VK_F2": {
        "!type": "number"
      },
      "DOM_VK_F3": {
        "!type": "number"
      },
      "DOM_VK_F4": {
        "!type": "number"
      },
      "DOM_VK_F5": {
        "!type": "number"
      },
      "DOM_VK_F6": {
        "!type": "number"
      },
      "DOM_VK_F7": {
        "!type": "number"
      },
      "DOM_VK_F8": {
        "!type": "number"
      },
      "DOM_VK_F9": {
        "!type": "number"
      },
      "DOM_VK_F10": {
        "!type": "number"
      },
      "DOM_VK_F11": {
        "!type": "number"
      },
      "DOM_VK_F12": {
        "!type": "number"
      },
      "DOM_VK_F13": {
        "!type": "number"
      },
      "DOM_VK_F14": {
        "!type": "number"
      },
      "DOM_VK_F15": {
        "!type": "number"
      },
      "DOM_VK_F16": {
        "!type": "number"
      },
      "DOM_VK_F17": {
        "!type": "number"
      },
      "DOM_VK_F18": {
        "!type": "number"
      },
      "DOM_VK_F19": {
        "!type": "number"
      },
      "DOM_VK_F20": {
        "!type": "number"
      },
      "DOM_VK_F21": {
        "!type": "number"
      },
      "DOM_VK_F22": {
        "!type": "number"
      },
      "DOM_VK_F23": {
        "!type": "number"
      },
      "DOM_VK_F24": {
        "!type": "number"
      },
      "DOM_VK_NUM_LOCK": {
        "!type": "number"
      },
      "DOM_VK_SCROLL_LOCK": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_FJ_JISHO": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_FJ_MASSHOU": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_FJ_TOUROKU": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_FJ_LOYA": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_FJ_ROYA": {
        "!type": "number"
      },
      "DOM_VK_CIRCUMFLEX": {
        "!type": "number"
      },
      "DOM_VK_EXCLAMATION": {
        "!type": "number"
      },
      "DOM_VK_DOUBLE_QUOTE": {
        "!type": "number"
      },
      "DOM_VK_HASH": {
        "!type": "number"
      },
      "DOM_VK_DOLLAR": {
        "!type": "number"
      },
      "DOM_VK_PERCENT": {
        "!type": "number"
      },
      "DOM_VK_AMPERSAND": {
        "!type": "number"
      },
      "DOM_VK_UNDERSCORE": {
        "!type": "number"
      },
      "DOM_VK_OPEN_PAREN": {
        "!type": "number"
      },
      "DOM_VK_CLOSE_PAREN": {
        "!type": "number"
      },
      "DOM_VK_ASTERISK": {
        "!type": "number"
      },
      "DOM_VK_PLUS": {
        "!type": "number"
      },
      "DOM_VK_PIPE": {
        "!type": "number"
      },
      "DOM_VK_HYPHEN_MINUS": {
        "!type": "number"
      },
      "DOM_VK_OPEN_CURLY_BRACKET": {
        "!type": "number"
      },
      "DOM_VK_CLOSE_CURLY_BRACKET": {
        "!type": "number"
      },
      "DOM_VK_TILDE": {
        "!type": "number"
      },
      "DOM_VK_VOLUME_MUTE": {
        "!type": "number"
      },
      "DOM_VK_VOLUME_DOWN": {
        "!type": "number"
      },
      "DOM_VK_VOLUME_UP": {
        "!type": "number"
      },
      "DOM_VK_COMMA": {
        "!type": "number"
      },
      "DOM_VK_PERIOD": {
        "!type": "number"
      },
      "DOM_VK_SLASH": {
        "!type": "number"
      },
      "DOM_VK_BACK_QUOTE": {
        "!type": "number"
      },
      "DOM_VK_OPEN_BRACKET": {
        "!type": "number"
      },
      "DOM_VK_BACK_SLASH": {
        "!type": "number"
      },
      "DOM_VK_CLOSE_BRACKET": {
        "!type": "number"
      },
      "DOM_VK_QUOTE": {
        "!type": "number"
      },
      "DOM_VK_META": {
        "!type": "number"
      },
      "DOM_VK_ALTGR": {
        "!type": "number"
      },
      "DOM_VK_WIN_ICO_HELP": {
        "!type": "number"
      },
      "DOM_VK_WIN_ICO_00": {
        "!type": "number"
      },
      "DOM_VK_WIN_ICO_CLEAR": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_RESET": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_JUMP": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_PA1": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_PA2": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_PA3": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_WSCTRL": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_CUSEL": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_ATTN": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_FINISH": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_COPY": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_AUTO": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_ENLW": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_BACKTAB": {
        "!type": "number"
      },
      "DOM_VK_ATTN": {
        "!type": "number"
      },
      "DOM_VK_CRSEL": {
        "!type": "number"
      },
      "DOM_VK_EXSEL": {
        "!type": "number"
      },
      "DOM_VK_EREOF": {
        "!type": "number"
      },
      "DOM_VK_PLAY": {
        "!type": "number"
      },
      "DOM_VK_ZOOM": {
        "!type": "number"
      },
      "DOM_VK_PA1": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_CLEAR": {
        "!type": "number"
      },
      "initKeyEvent": {
        "!type": "fn(type: string, canBubble: bool, cancelable: bool, view: +Window, ctrlKey: bool, altKey: bool, shiftKey: bool, metaKey: bool, keyCode: number, charCode: number) -> void"
      }
    }
  },
  "KeyframeEffectReadonly": {
    "!type": "?"
  },
  "IID": {
    "!type": "?"
  },
  "LocalMediaStream": {
    "!type": "?"
  },
  "Location": {
    "!type": "?"
  },
  "MMICall": {
    "!type": "?"
  },
  "MediaDeviceInfo": {
    "!type": "?"
  },
  "MediaDevices": {
    "!type": "?"
  },
  "MediaElementAudioSourceNode": {
    "!type": "?"
  },
  "MediaEncryptedEvent": {
    "!type": "fn(type: string, eventInitDict: +MediaKeyNeededEventInit)",
    "prototype": {
      "initDataType": {
        "!type": "string"
      },
      "initData": {
        "!type": "+ArrayBuffer"
      }
    }
  },
  "MediaError": {
    "!type": "?"
  },
  "MediaKeyError": {
    "!type": "?"
  },
  "MediaKeyMessageEvent": {
    "!type": "fn(type: string, eventInitDict: +MediaKeyMessageEventInit)",
    "prototype": {
      "messageType": {
        "!type": "+MediaKeyMessageType"
      },
      "message": {
        "!type": "+ArrayBuffer"
      }
    }
  },
  "MediaKeySession": {
    "!type": "?"
  },
  "MediaKeyStatusMap": {
    "!type": "?"
  },
  "MediaKeySystemAccess": {
    "!type": "?"
  },
  "MediaKeys": {
    "!type": "?"
  },
  "MediaList": {
    "!type": "?"
  },
  "MediaQueryList": {
    "!type": "?"
  },
  "MediaRecorder": {
    "!type": "fn(node: +AudioNode, output: number, options: +MediaRecorderOptions)",
    "prototype": {
      "stream": {
        "!type": "+MediaStream"
      },
      "state": {
        "!type": "+RecordingState"
      },
      "mimeType": {
        "!type": "string"
      },
      "ondataavailable": {
        "!type": "fn(event)"
      },
      "onerror": {
        "!type": "fn(event)"
      },
      "onstart": {
        "!type": "fn(event)"
      },
      "onstop": {
        "!type": "fn(event)"
      },
      "onwarning": {
        "!type": "fn(event)"
      },
      "start": {
        "!type": "fn(timeSlice: number) -> void"
      },
      "stop": {
        "!type": "fn() -> void"
      },
      "pause": {
        "!type": "fn() -> void"
      },
      "resume": {
        "!type": "fn() -> void"
      },
      "requestData": {
        "!type": "fn() -> void"
      }
    }
  },
  "MediaSource": {
    "!type": "fn()",
    "prototype": {
      "sourceBuffers": {
        "!type": "+SourceBufferList"
      },
      "activeSourceBuffers": {
        "!type": "+SourceBufferList"
      },
      "readyState": {
        "!type": "+MediaSourceReadyState"
      },
      "duration": {
        "!type": "number"
      },
      "addSourceBuffer": {
        "!type": "fn(type: string) -> +SourceBuffer"
      },
      "removeSourceBuffer": {
        "!type": "fn(sourceBuffer: +SourceBuffer) -> void"
      },
      "endOfStream": {
        "!type": "fn(error: +MediaSourceEndOfStreamError) -> void"
      },
      "isTypeSupported": {
        "!type": "fn(type: string) -> bool"
      }
    }
  },
  "MediaStream": {
    "!type": "?"
  },
  "MediaStreamAudioDestinationNode": {
    "!type": "?"
  },
  "MediaStreamAudioSourceNode": {
    "!type": "?"
  },
  "MediaStreamEvent": {
    "!type": "fn(type: string, eventInitDict: +MediaStreamEventInit)",
    "prototype": {
      "stream": {
        "!type": "+MediaStream"
      }
    }
  },
  "MediaStreamTrack": {
    "!type": "?"
  },
  "MediaStreamTrackEvent": {
    "!type": "fn(type: string, eventInitDict: +MediaStreamTrackEventInit)",
    "prototype": {
      "receiver": {
        "!type": "+RTCRtpReceiver"
      },
      "track": {
        "!type": "+MediaStreamTrack"
      },
      "stream": {
        "!type": "+MediaStream"
      }
    }
  },
  "MenuBoxObject": {
    "!type": "?"
  },
  "MessageChannel": {
    "!type": "fn()",
    "prototype": {
      "port1": {
        "!type": "+MessagePort"
      },
      "port2": {
        "!type": "+MessagePort"
      }
    }
  },
  "MessageEvent": {
    "!type": "fn(type: string, eventInitDict: +MessageEventInit)",
    "prototype": {
      "data": {
        "!type": "?"
      },
      "origin": {
        "!type": "string"
      },
      "lastEventId": {
        "!type": "string"
      },
      "source": {
        "!type": "?"
      },
      "ports": {
        "!type": "+MessagePortList"
      }
    }
  },
  "MessagePort": {
    "!type": "?"
  },
  "MimeType": {
    "!type": "?"
  },
  "MimeTypeArray": {
    "!type": "?"
  },
  "MouseEvent": {
    "!type": "?"
  },
  "MouseScrollEvent": {
    "!type": "?"
  },
  "MutationEvent": {
    "!type": "?"
  },
  "MutationRecord": {
    "!type": "?"
  },
  "MutationObserver": {
    "!type": "fn(mutationCallback: +MutationCallback)",
    "prototype": {
      "observe": {
        "!type": "fn(target: +Node, options: +MutationObserverInit) -> void"
      },
      "disconnect": {
        "!type": "fn() -> void"
      },
      "takeRecords": {
        "!type": "fn() -> [+MutationRecord]"
      },
      "getObservingInfo": {
        "!type": "fn() -> [+MutationObservingInfo]"
      },
      "mutationCallback": {
        "!type": "+MutationCallback"
      },
      "queryInterface": {
        "!type": "fn(iid: +IID) -> nsISupports"
      }
    }
  },
  "NamedNodeMap": {
    "!type": "?"
  },
  "Navigator": {
    "!type": "?"
  },
  "NetworkInformation": {
    "!type": "?"
  },
  "Node": {
    "!type": "?"
  },
  "NodeIterator": {
    "!type": "?"
  },
  "NodeList": {
    "!type": "?"
  },
  "Notification": {
    "!type": "fn(title: string, options: +NotificationOptions)",
    "prototype": {
      "permission": {
        "!type": "+NotificationPermission"
      },
      "requestPermission": {
        "!type": "fn(permissionCallback: +NotificationPermissionCallback) -> void"
      },
      "get": {
        "!type": "fn(filter: +GetNotificationOptions) -> +Promise[value=+Promise]"
      },
      "onclick": {
        "!type": "fn(event)"
      },
      "onshow": {
        "!type": "fn(event)"
      },
      "onerror": {
        "!type": "fn(event)"
      },
      "onclose": {
        "!type": "fn(event)"
      },
      "title": {
        "!type": "string"
      },
      "dir": {
        "!type": "+NotificationDirection"
      },
      "lang": {
        "!type": "string"
      },
      "body": {
        "!type": "string"
      },
      "tag": {
        "!type": "string"
      },
      "icon": {
        "!type": "string"
      },
      "data": {
        "!type": "?"
      },
      "close": {
        "!type": "fn() -> void"
      },
      "queryInterface": {
        "!type": "fn(iid: +IID) -> nsISupports"
      }
    }
  },
  "NotifyPaintEvent": {
    "!type": "?"
  },
  "OfflineAudioCompletionEvent": {
    "!type": "?"
  },
  "OfflineAudioContext": {
    "!type": "fn(numberOfChannels: number, length: number, sampleRate: number)",
    "prototype": {
      "startRendering": {
        "!type": "fn() -> +Promise[value=+Promise]"
      },
      "oncomplete": {
        "!type": "fn(event)"
      }
    }
  },
  "OfflineResourceList": {
    "!type": "?"
  },
  "OscillatorNode": {
    "!type": "?"
  },
  "PageTransitionEvent": {
    "!type": "fn(type: string, eventInitDict: +PageTransitionEventInit)",
    "prototype": {
      "persisted": {
        "!type": "bool"
      }
    }
  },
  "PaintRequest": {
    "!type": "?"
  },
  "PaintRequestList": {
    "!type": "?"
  },
  "PannerNode": {
    "!type": "?"
  },
  "Performance": {
    "!type": "?"
  },
  "PerformanceEntry": {
    "!type": "?"
  },
  "PerformanceMark": {
    "!type": "?"
  },
  "PerformanceMeasure": {
    "!type": "?"
  },
  "PerformanceNavigation": {
    "!type": "?"
  },
  "PerformanceResourceTiming": {
    "!type": "?"
  },
  "PerformanceTiming": {
    "!type": "?"
  },
  "PeriodicWave": {
    "!type": "?"
  },
  "PermissionSettings": {
    "!type": "?"
  },
  "PhoneNumberService": {
    "!type": "?"
  },
  "Plugin": {
    "!type": "?"
  },
  "PluginArray": {
    "!type": "?"
  },
  "PointerEvent": {
    "!type": "fn(type: string, eventInitDict: +PointerEventInit)",
    "prototype": {
      "pointerId": {
        "!type": "number"
      },
      "width": {
        "!type": "number"
      },
      "height": {
        "!type": "number"
      },
      "pressure": {
        "!type": "number"
      },
      "tiltX": {
        "!type": "number"
      },
      "tiltY": {
        "!type": "number"
      },
      "pointerType": {
        "!type": "string"
      },
      "isPrimary": {
        "!type": "bool"
      }
    }
  },
  "PopStateEvent": {
    "!type": "fn(type: string, eventInitDict: +PopStateEventInit)",
    "prototype": {
      "state": {
        "!type": "?"
      }
    }
  },
  "PopupBlockedEvent": {
    "!type": "fn(type: string, eventInitDict: +PopupBlockedEventInit)",
    "prototype": {
      "requestingWindow": {
        "!type": "+Window"
      },
      "popupWindowURI": {
        "!type": "+URI"
      },
      "popupWindowName": {
        "!type": "string"
      },
      "popupWindowFeatures": {
        "!type": "string"
      }
    }
  },
  "PopupBoxObject": {
    "!type": "?"
  },
  "PresentationDeviceInfoManager": {
    "!type": "?"
  },
  "ProcessingInstruction": {
    "!type": "?"
  },
  "ProgressEvent": {
    "!type": "fn(type: string, eventInitDict: +ProgressEventInit)",
    "prototype": {
      "lengthComputable": {
        "!type": "bool"
      },
      "loaded": {
        "!type": "number"
      },
      "total": {
        "!type": "number"
      }
    }
  },
  "Promise": {
    "!type": "fn(init: +PromiseInit)",
    "prototype": {
      "resolve": {
        "!type": "fn(value: ?) -> +Promise[value=+Promise]"
      },
      "reject": {
        "!type": "fn(value: ?) -> +Promise[value=+Promise]"
      },
      "then": {
        "!type": "fn(fulfillCallback: +AnyCallback, rejectCallback: +AnyCallback) -> +Promise[value=+Promise]"
      },
      "catch": {
        "!type": "fn(rejectCallback: +AnyCallback) -> +Promise[value=+Promise]"
      },
      "all": {
        "!type": "fn(iterable: [?]) -> +Promise[value=+Promise]"
      },
      "race": {
        "!type": "fn(iterable: [?]) -> +Promise[value=+Promise]"
      }
    }
  },
  "PushEvent": {
    "!type": "fn(type: string, eventInitDict: +PushEventInit)",
    "prototype": {
      "data": {
        "!type": "+PushMessageData"
      }
    }
  },
  "PushManager": {
    "!type": "?"
  },
  "PushMessageData": {
    "!type": "?"
  },
  "RGBColor": {
    "!type": "?"
  },
  "RTCDataChannel": {
    "!type": "?"
  },
  "RTCDataChannelEvent": {
    "!type": "fn(type: string, eventInitDict: +RTCDataChannelEventInit)",
    "prototype": {
      "channel": {
        "!type": "+RTCDataChannel"
      }
    }
  },
  "RTCPeerConnectionIceEvent": {
    "!type": "fn(type: string, eventInitDict: +RTCPeerConnectionIceEventInit)",
    "prototype": {
      "candidate": {
        "!type": "mozRTCIceCandidate"
      }
    }
  },
  "RTCRtpReceiver": {
    "!type": "?"
  },
  "RTCRtpSender": {
    "!type": "?"
  },
  "RTCStatsReport": {
    "!type": "?"
  },
  "RadioNodeList": {
    "!type": "?"
  },
  "Range": {
    "!type": "fn()",
    "prototype": {
      "startContainer": {
        "!type": "+Node"
      },
      "startOffset": {
        "!type": "number"
      },
      "endContainer": {
        "!type": "+Node"
      },
      "endOffset": {
        "!type": "number"
      },
      "collapsed": {
        "!type": "bool"
      },
      "commonAncestorContainer": {
        "!type": "+Node"
      },
      "setStart": {
        "!type": "fn(refNode: +Node, offset: number) -> void"
      },
      "setEnd": {
        "!type": "fn(refNode: +Node, offset: number) -> void"
      },
      "setStartBefore": {
        "!type": "fn(refNode: +Node) -> void"
      },
      "setStartAfter": {
        "!type": "fn(refNode: +Node) -> void"
      },
      "setEndBefore": {
        "!type": "fn(refNode: +Node) -> void"
      },
      "setEndAfter": {
        "!type": "fn(refNode: +Node) -> void"
      },
      "collapse": {
        "!type": "fn(toStart: bool) -> void"
      },
      "selectNode": {
        "!type": "fn(refNode: +Node) -> void"
      },
      "selectNodeContents": {
        "!type": "fn(refNode: +Node) -> void"
      },
      "START_TO_START": {
        "!type": "number"
      },
      "START_TO_END": {
        "!type": "number"
      },
      "END_TO_END": {
        "!type": "number"
      },
      "END_TO_START": {
        "!type": "number"
      },
      "compareBoundaryPoints": {
        "!type": "fn(how: number, sourceRange: +Range) -> number"
      },
      "deleteContents": {
        "!type": "fn() -> void"
      },
      "extractContents": {
        "!type": "fn() -> +DocumentFragment"
      },
      "cloneContents": {
        "!type": "fn() -> +DocumentFragment"
      },
      "insertNode": {
        "!type": "fn(node: +Node) -> void"
      },
      "surroundContents": {
        "!type": "fn(newParent: +Node) -> void"
      },
      "cloneRange": {
        "!type": "fn() -> +Range"
      },
      "detach": {
        "!type": "fn() -> void"
      },
      "isPointInRange": {
        "!type": "fn(node: +Node, offset: number) -> bool"
      },
      "comparePoint": {
        "!type": "fn(node: +Node, offset: number) -> number"
      },
      "intersectsNode": {
        "!type": "fn(node: +Node) -> bool"
      },
      "createContextualFragment": {
        "!type": "fn(fragment: string) -> +DocumentFragment"
      },
      "getClientRects": {
        "!type": "fn() -> +DOMRectList"
      },
      "getBoundingClientRect": {
        "!type": "fn() -> +DOMRect"
      },
      "queryInterface": {
        "!type": "fn(iid: +IID) -> nsISupports"
      }
    }
  },
  "RecordErrorEvent": {
    "!type": "fn(type: string, eventInitDict: +RecordErrorEventInit)",
    "prototype": {
      "name": {
        "!type": "string"
      }
    }
  },
  "Rect": {
    "!type": "?"
  },
  "Request": {
    "!type": "fn(input: +RequestInfo, init: +RequestInit)",
    "prototype": {
      "method": {
        "!type": "+ByteString"
      },
      "url": {
        "!type": "string"
      },
      "headers": {
        "!type": "+Headers"
      },
      "context": {
        "!type": "+RequestContext"
      },
      "referrer": {
        "!type": "string"
      },
      "mode": {
        "!type": "+RequestMode"
      },
      "credentials": {
        "!type": "+RequestCredentials"
      },
      "cache": {
        "!type": "+RequestCache"
      },
      "clone": {
        "!type": "fn() -> +Request"
      },
      "setContext": {
        "!type": "fn(context: +RequestContext) -> void"
      },
      "bodyUsed": {
        "!type": "bool"
      },
      "arrayBuffer": {
        "!type": "fn() -> +Promise[value=+Promise]"
      },
      "blob": {
        "!type": "fn() -> +Promise[value=+Promise]"
      },
      "formData": {
        "!type": "fn() -> +Promise[value=+Promise]"
      },
      "json": {
        "!type": "fn() -> +Promise[value=+Promise]"
      },
      "text": {
        "!type": "fn() -> +Promise[value=+Promise]"
      }
    }
  },
  "RequestSyncApp": {
    "!type": "?"
  },
  "RequestSyncTask": {
    "!type": "?"
  },
  "RequestSyncManager": {
    "!type": "?"
  },
  "RequestSyncScheduler": {
    "!type": "?"
  },
  "NetworkStatsData": {
    "!type": "?"
  },
  "PowerStatsData": {
    "!type": "?"
  },
  "ResourceStats": {
    "!type": "?"
  },
  "ResourceStatsAlarm": {
    "!type": "?"
  },
  "ResourceStatsManager": {
    "!type": "fn(type: +ResourceType)",
    "prototype": {
      "getStats": {
        "!type": "fn(statsOptions: +ResourceStatsOptions, start: +DOMTimeStamp, end: +DOMTimeStamp) -> +Promise[value=+Promise]"
      },
      "clearStats": {
        "!type": "fn(statsOptions: +ResourceStatsOptions, start: +DOMTimeStamp, end: +DOMTimeStamp) -> +Promise[value=+Promise]"
      },
      "clearAllStats": {
        "!type": "fn() -> +Promise[value=+Promise]"
      },
      "addAlarm": {
        "!type": "fn(threshold: number, statsOptions: +ResourceStatsOptions, alarmOptions: +ResourceStatsAlarmOptions) -> +Promise[value=+Promise]"
      },
      "getAlarms": {
        "!type": "fn(statsOptions: +ResourceStatsOptions) -> +Promise[value=+Promise]"
      },
      "removeAlarm": {
        "!type": "fn(alarmId: number) -> +Promise[value=+Promise]"
      },
      "removeAllAlarms": {
        "!type": "fn() -> +Promise[value=+Promise]"
      },
      "getAvailableComponents": {
        "!type": "fn() -> +Promise[value=+Promise]"
      },
      "resourceTypes": {
        "!type": "[string]"
      },
      "sampleRate": {
        "!type": "number"
      },
      "maxStorageAge": {
        "!type": "number"
      }
    }
  },
  "Response": {
    "!type": "fn(body: +BodyInit, init: +ResponseInit)",
    "prototype": {
      "error": {
        "!type": "fn() -> +Response"
      },
      "redirect": {
        "!type": "fn(url: string, status: number) -> +Response"
      },
      "type": {
        "!type": "+ResponseType"
      },
      "url": {
        "!type": "string"
      },
      "status": {
        "!type": "number"
      },
      "ok": {
        "!type": "bool"
      },
      "statusText": {
        "!type": "+ByteString"
      },
      "headers": {
        "!type": "+Headers"
      },
      "clone": {
        "!type": "fn() -> +Response"
      },
      "bodyUsed": {
        "!type": "bool"
      },
      "arrayBuffer": {
        "!type": "fn() -> +Promise[value=+Promise]"
      },
      "blob": {
        "!type": "fn() -> +Promise[value=+Promise]"
      },
      "formData": {
        "!type": "fn() -> +Promise[value=+Promise]"
      },
      "json": {
        "!type": "fn() -> +Promise[value=+Promise]"
      },
      "text": {
        "!type": "fn() -> +Promise[value=+Promise]"
      }
    }
  },
  "SVGAElement": {
    "!type": "?"
  },
  "SVGAltGlyphElement": {
    "!type": "?"
  },
  "SVGAngle": {
    "!type": "?"
  },
  "SVGAnimateElement": {
    "!type": "?"
  },
  "SVGAnimateMotionElement": {
    "!type": "?"
  },
  "SVGAnimateTransformElement": {
    "!type": "?"
  },
  "SVGAnimatedAngle": {
    "!type": "?"
  },
  "SVGAnimatedBoolean": {
    "!type": "?"
  },
  "SVGAnimatedEnumeration": {
    "!type": "?"
  },
  "SVGAnimatedInteger": {
    "!type": "?"
  },
  "SVGAnimatedLength": {
    "!type": "?"
  },
  "SVGAnimatedLengthList": {
    "!type": "?"
  },
  "SVGAnimatedNumber": {
    "!type": "?"
  },
  "SVGAnimatedNumberList": {
    "!type": "?"
  },
  "SVGAnimatedPreserveAspectRatio": {
    "!type": "?"
  },
  "SVGAnimatedRect": {
    "!type": "?"
  },
  "SVGAnimatedString": {
    "!type": "?"
  },
  "SVGAnimatedTransformList": {
    "!type": "?"
  },
  "SVGAnimationElement": {
    "!type": "?"
  },
  "SVGCircleElement": {
    "!type": "?"
  },
  "SVGClipPathElement": {
    "!type": "?"
  },
  "SVGComponentTransferFunctionElement": {
    "!type": "?"
  },
  "SVGDefsElement": {
    "!type": "?"
  },
  "SVGDescElement": {
    "!type": "?"
  },
  "SVGDocument": {
    "!type": "?"
  },
  "SVGElement": {
    "!type": "?"
  },
  "SVGEllipseElement": {
    "!type": "?"
  },
  "SVGFEBlendElement": {
    "!type": "?"
  },
  "SVGFEColorMatrixElement": {
    "!type": "?"
  },
  "SVGFEComponentTransferElement": {
    "!type": "?"
  },
  "SVGFECompositeElement": {
    "!type": "?"
  },
  "SVGFEConvolveMatrixElement": {
    "!type": "?"
  },
  "SVGFEDiffuseLightingElement": {
    "!type": "?"
  },
  "SVGFEDisplacementMapElement": {
    "!type": "?"
  },
  "SVGFEDistantLightElement": {
    "!type": "?"
  },
  "SVGFEDropShadowElement": {
    "!type": "?"
  },
  "SVGFEFloodElement": {
    "!type": "?"
  },
  "SVGFEFuncAElement": {
    "!type": "?"
  },
  "SVGFEFuncBElement": {
    "!type": "?"
  },
  "SVGFEFuncGElement": {
    "!type": "?"
  },
  "SVGFEFuncRElement": {
    "!type": "?"
  },
  "SVGFEGaussianBlurElement": {
    "!type": "?"
  },
  "SVGFEImageElement": {
    "!type": "?"
  },
  "SVGFEMergeElement": {
    "!type": "?"
  },
  "SVGFEMergeNodeElement": {
    "!type": "?"
  },
  "SVGFEMorphologyElement": {
    "!type": "?"
  },
  "SVGFEOffsetElement": {
    "!type": "?"
  },
  "SVGFEPointLightElement": {
    "!type": "?"
  },
  "SVGFESpecularLightingElement": {
    "!type": "?"
  },
  "SVGFESpotLightElement": {
    "!type": "?"
  },
  "SVGFETileElement": {
    "!type": "?"
  },
  "SVGFETurbulenceElement": {
    "!type": "?"
  },
  "SVGFilterElement": {
    "!type": "?"
  },
  "SVGForeignObjectElement": {
    "!type": "?"
  },
  "SVGGElement": {
    "!type": "?"
  },
  "SVGGradientElement": {
    "!type": "?"
  },
  "SVGGraphicsElement": {
    "!type": "?"
  },
  "SVGIFrameElement": {
    "!type": "?"
  },
  "SVGImageElement": {
    "!type": "?"
  },
  "SVGLength": {
    "!type": "?"
  },
  "SVGLengthList": {
    "!type": "?"
  },
  "SVGLineElement": {
    "!type": "?"
  },
  "SVGLinearGradientElement": {
    "!type": "?"
  },
  "SVGMPathElement": {
    "!type": "?"
  },
  "SVGMarkerElement": {
    "!type": "?"
  },
  "SVGMaskElement": {
    "!type": "?"
  },
  "SVGMatrix": {
    "!type": "?"
  },
  "SVGMetadataElement": {
    "!type": "?"
  },
  "SVGNumber": {
    "!type": "fn(value: number)",
    "prototype": {
      "value": {
        "!type": "number"
      }
    }
  },
  "SVGNumberList": {
    "!type": "?"
  },
  "SVGPathElement": {
    "!type": "?"
  },
  "SVGPathSeg": {
    "!type": "?"
  },
  "SVGPathSegClosePath": {
    "!type": "?"
  },
  "SVGPathSegMovetoAbs": {
    "!type": "?"
  },
  "SVGPathSegMovetoRel": {
    "!type": "?"
  },
  "SVGPathSegLinetoAbs": {
    "!type": "?"
  },
  "SVGPathSegLinetoRel": {
    "!type": "?"
  },
  "SVGPathSegCurvetoCubicAbs": {
    "!type": "?"
  },
  "SVGPathSegCurvetoCubicRel": {
    "!type": "?"
  },
  "SVGPathSegCurvetoQuadraticAbs": {
    "!type": "?"
  },
  "SVGPathSegCurvetoQuadraticRel": {
    "!type": "?"
  },
  "SVGPathSegArcAbs": {
    "!type": "?"
  },
  "SVGPathSegArcRel": {
    "!type": "?"
  },
  "SVGPathSegLinetoHorizontalAbs": {
    "!type": "?"
  },
  "SVGPathSegLinetoHorizontalRel": {
    "!type": "?"
  },
  "SVGPathSegLinetoVerticalAbs": {
    "!type": "?"
  },
  "SVGPathSegLinetoVerticalRel": {
    "!type": "?"
  },
  "SVGPathSegCurvetoCubicSmoothAbs": {
    "!type": "?"
  },
  "SVGPathSegCurvetoCubicSmoothRel": {
    "!type": "?"
  },
  "SVGPathSegCurvetoQuadraticSmoothAbs": {
    "!type": "?"
  },
  "SVGPathSegCurvetoQuadraticSmoothRel": {
    "!type": "?"
  },
  "SVGPathSegList": {
    "!type": "?"
  },
  "SVGPatternElement": {
    "!type": "?"
  },
  "SVGPoint": {
    "!type": "?"
  },
  "SVGPointList": {
    "!type": "?"
  },
  "SVGPolygonElement": {
    "!type": "?"
  },
  "SVGPolylineElement": {
    "!type": "?"
  },
  "SVGPreserveAspectRatio": {
    "!type": "?"
  },
  "SVGRadialGradientElement": {
    "!type": "?"
  },
  "SVGRect": {
    "!type": "?"
  },
  "SVGRectElement": {
    "!type": "?"
  },
  "SVGViewSpec": {
    "!type": "?"
  },
  "SVGSVGElement": {
    "!type": "?"
  },
  "SVGScriptElement": {
    "!type": "?"
  },
  "SVGSetElement": {
    "!type": "?"
  },
  "SVGStopElement": {
    "!type": "?"
  },
  "SVGStringList": {
    "!type": "?"
  },
  "SVGStyleElement": {
    "!type": "?"
  },
  "SVGSwitchElement": {
    "!type": "?"
  },
  "SVGSymbolElement": {
    "!type": "?"
  },
  "SVGTSpanElement": {
    "!type": "?"
  },
  "SVGTextContentElement": {
    "!type": "?"
  },
  "SVGTextElement": {
    "!type": "?"
  },
  "SVGTextPathElement": {
    "!type": "?"
  },
  "SVGTextPositioningElement": {
    "!type": "?"
  },
  "SVGTitleElement": {
    "!type": "?"
  },
  "SVGTransform": {
    "!type": "?"
  },
  "SVGTransformList": {
    "!type": "?"
  },
  "SVGUnitTypes": {
    "!type": "?"
  },
  "SVGUseElement": {
    "!type": "?"
  },
  "SVGViewElement": {
    "!type": "?"
  },
  "SVGZoomAndPan": {
    "!type": "?"
  },
  "SVGZoomEvent": {
    "!type": "?"
  },
  "Screen": {
    "!type": "?"
  },
  "ScriptProcessorNode": {
    "!type": "?"
  },
  "ScrollAreaEvent": {
    "!type": "?"
  },
  "SEReader": {
    "!type": "?"
  },
  "SESession": {
    "!type": "?"
  },
  "SEChannel": {
    "!type": "?"
  },
  "SEResponse": {
    "!type": "?"
  },
  "Selection": {
    "!type": "?"
  },
  "ServiceWorker": {
    "!type": "?"
  },
  "ServiceWorkerClient": {
    "!type": "?"
  },
  "ServiceWorkerClients": {
    "!type": "?"
  },
  "ServiceWorkerContainer": {
    "!type": "?"
  },
  "ServiceWorkerGlobalScope": {
    "!type": "?"
  },
  "ServiceWorkerRegistration": {
    "!type": "?"
  },
  "SettingsLock": {
    "!type": "?"
  },
  "SettingsManager": {
    "!type": "?"
  },
  "ShadowRoot": {
    "!type": "?"
  },
  "SharedWorker": {
    "!type": "fn(scriptURL: string, name: string)",
    "prototype": {
      "port": {
        "!type": "+MessagePort"
      },
      "onerror": {
        "!type": "fn(event)"
      }
    }
  },
  "SharedWorkerGlobalScope": {
    "!type": "?"
  },
  "SimpleGestureEvent": {
    "!type": "?"
  },
  "SimplePushManager": {
    "!type": "?"
  },
  "SourceBuffer": {
    "!type": "?"
  },
  "SourceBufferList": {
    "!type": "?"
  },
  "SpeechGrammar": {
    "!type": "fn()",
    "prototype": {
      "src": {
        "!type": "string"
      },
      "weight": {
        "!type": "number"
      }
    }
  },
  "SpeechGrammarList": {
    "!type": "fn()",
    "prototype": {
      "length": {
        "!type": "number"
      },
      "item": {
        "!type": "fn(index: number) -> +SpeechGrammar"
      },
      "addFromURI": {
        "!type": "fn(src: string, weight: number) -> void"
      },
      "addFromString": {
        "!type": "fn(string: string, weight: number) -> void"
      }
    }
  },
  "SpeechRecognition": {
    "!type": "fn()",
    "prototype": {
      "grammars": {
        "!type": "+SpeechGrammarList"
      },
      "lang": {
        "!type": "string"
      },
      "continuous": {
        "!type": "bool"
      },
      "interimResults": {
        "!type": "bool"
      },
      "maxAlternatives": {
        "!type": "number"
      },
      "serviceURI": {
        "!type": "string"
      },
      "start": {
        "!type": "fn(stream: +MediaStream) -> void"
      },
      "stop": {
        "!type": "fn() -> void"
      },
      "abort": {
        "!type": "fn() -> void"
      },
      "onaudiostart": {
        "!type": "fn(event)"
      },
      "onsoundstart": {
        "!type": "fn(event)"
      },
      "onspeechstart": {
        "!type": "fn(event)"
      },
      "onspeechend": {
        "!type": "fn(event)"
      },
      "onsoundend": {
        "!type": "fn(event)"
      },
      "onaudioend": {
        "!type": "fn(event)"
      },
      "onresult": {
        "!type": "fn(event)"
      },
      "onnomatch": {
        "!type": "fn(event)"
      },
      "onerror": {
        "!type": "fn(event)"
      },
      "onstart": {
        "!type": "fn(event)"
      },
      "onend": {
        "!type": "fn(event)"
      }
    }
  },
  "SpeechRecognitionAlternative": {
    "!type": "?"
  },
  "SpeechRecognitionError": {
    "!type": "fn(type: string, eventInitDict: +SpeechRecognitionErrorInit)",
    "prototype": {
      "error": {
        "!type": "+SpeechRecognitionErrorCode"
      },
      "message": {
        "!type": "string"
      }
    }
  },
  "SpeechRecognitionEvent": {
    "!type": "fn(type: string, eventInitDict: +SpeechRecognitionEventInit)",
    "prototype": {
      "resultIndex": {
        "!type": "number"
      },
      "results": {
        "!type": "nsISupports"
      },
      "interpretation": {
        "!type": "string"
      },
      "emma": {
        "!type": "+Document"
      }
    }
  },
  "SpeechRecognitionResult": {
    "!type": "?"
  },
  "SpeechRecognitionResultList": {
    "!type": "?"
  },
  "SpeechSynthesis": {
    "!type": "?"
  },
  "SpeechSynthesisEvent": {
    "!type": "fn(type: string, eventInitDict: +SpeechSynthesisEventInit)",
    "prototype": {
      "charIndex": {
        "!type": "number"
      },
      "elapsedTime": {
        "!type": "number"
      },
      "name": {
        "!type": "string"
      }
    }
  },
  "SpeechSynthesisUtterance": {
    "!type": "fn(text: string)",
    "prototype": {
      "text": {
        "!type": "string"
      },
      "lang": {
        "!type": "string"
      },
      "voice": {
        "!type": "+SpeechSynthesisVoice"
      },
      "volume": {
        "!type": "number"
      },
      "rate": {
        "!type": "number"
      },
      "pitch": {
        "!type": "number"
      },
      "onstart": {
        "!type": "fn(event)"
      },
      "onend": {
        "!type": "fn(event)"
      },
      "onerror": {
        "!type": "fn(event)"
      },
      "onpause": {
        "!type": "fn(event)"
      },
      "onresume": {
        "!type": "fn(event)"
      },
      "onmark": {
        "!type": "fn(event)"
      },
      "onboundary": {
        "!type": "fn(event)"
      }
    }
  },
  "SpeechSynthesisVoice": {
    "!type": "?"
  },
  "StereoPannerNode": {
    "!type": "?"
  },
  "Storage": {
    "!type": "?"
  },
  "StorageEvent": {
    "!type": "fn(type: string, eventInitDict: +StorageEventInit)",
    "prototype": {
      "key": {
        "!type": "string"
      },
      "oldValue": {
        "!type": "string"
      },
      "newValue": {
        "!type": "string"
      },
      "url": {
        "!type": "string"
      },
      "storageArea": {
        "!type": "+Storage"
      },
      "initStorageEvent": {
        "!type": "fn(type: string, canBubble: bool, cancelable: bool, key: string, oldValue: string, newValue: string, url: string, storageArea: +Storage) -> void"
      }
    }
  },
  "StyleSheet": {
    "!type": "?"
  },
  "StyleSheetList": {
    "!type": "?"
  },
  "CryptoKey": {
    "!type": "?"
  },
  "SubtleCrypto": {
    "!type": "?"
  },
  "TVChannel": {
    "!type": "?"
  },
  "TVCurrentChannelChangedEvent": {
    "!type": "fn(type: string, eventInitDict: +TVCurrentChannelChangedEventInit)",
    "prototype": {
      "channel": {
        "!type": "+TVChannel"
      }
    }
  },
  "TVCurrentSourceChangedEvent": {
    "!type": "fn(type: string, eventInitDict: +TVCurrentSourceChangedEventInit)",
    "prototype": {
      "source": {
        "!type": "+TVSource"
      }
    }
  },
  "TVEITBroadcastedEvent": {
    "!type": "fn(type: string, eventInitDict: +TVEITBroadcastedEventInit)",
    "prototype": {
      "programs": {
        "!type": "[+TVProgram]"
      }
    }
  },
  "TVManager": {
    "!type": "?"
  },
  "TVProgram": {
    "!type": "?"
  },
  "TVScanningStateChangedEvent": {
    "!type": "fn(type: string, eventInitDict: +TVScanningStateChangedEventInit)",
    "prototype": {
      "state": {
        "!type": "+TVScanningState"
      },
      "channel": {
        "!type": "+TVChannel"
      }
    }
  },
  "TVSource": {
    "!type": "?"
  },
  "TVTuner": {
    "!type": "?"
  },
  "Telephony": {
    "!type": "?"
  },
  "TelephonyCall": {
    "!type": "?"
  },
  "TelephonyCallGroup": {
    "!type": "?"
  },
  "TelephonyCallId": {
    "!type": "?"
  },
  "TestInterfaceJS": {
    "!type": "fn(anyArg: ?, objectArg: object, dictionaryArg: +TestInterfaceJSDictionary)",
    "prototype": {
      "anyArg": {
        "!type": "?"
      },
      "objectArg": {
        "!type": "object"
      },
      "dictionaryArg": {
        "!type": "+TestInterfaceJSDictionary"
      },
      "anyAttr": {
        "!type": "?"
      },
      "objectAttr": {
        "!type": "object"
      },
      "dictionaryAttr": {
        "!type": "+TestInterfaceJSDictionary"
      },
      "pingPongAny": {
        "!type": "fn(arg: ?) -> ?"
      },
      "pingPongObject": {
        "!type": "fn(obj: object) -> object"
      },
      "pingPongObjectOrString": {
        "!type": "fn(objOrString: ?) -> ?"
      },
      "pingPongDictionary": {
        "!type": "fn(dict: +TestInterfaceJSDictionary) -> +TestInterfaceJSDictionary"
      },
      "pingPongDictionaryOrLong": {
        "!type": "fn(dictOrLong: ?) -> number"
      },
      "pingPongMap": {
        "!type": "fn(map: +MozMap) -> string"
      },
      "objectSequenceLength": {
        "!type": "fn(seq: [object]) -> number"
      },
      "anySequenceLength": {
        "!type": "fn(seq: [?]) -> number"
      },
      "getCallerPrincipal": {
        "!type": "fn() -> string"
      },
      "convertSVS": {
        "!type": "fn(svs: string) -> string"
      },
      "pingPongUnion": {
        "!type": "fn(something: ?) -> ?"
      },
      "pingPongUnionContainingNull": {
        "!type": "fn(something: ?) -> ?"
      },
      "pingPongNullableUnion": {
        "!type": "fn(something: ?) -> ?"
      },
      "returnBadUnion": {
        "!type": "fn() -> ?"
      },
      "cachedAttr": {
        "!type": "number"
      },
      "setCachedAttr": {
        "!type": "fn(n: number) -> void"
      },
      "clearCachedAttrCache": {
        "!type": "fn() -> void"
      },
      "testSequenceOverload": {
        "!type": "fn(arg: [string]) -> void"
      },
      "testSequenceUnion": {
        "!type": "fn(arg: ?) -> void"
      },
      "testThrowDOMError": {
        "!type": "fn() -> void"
      },
      "testThrowDOMException": {
        "!type": "fn() -> void"
      },
      "testPromiseWithThrowingChromePromiseInit": {
        "!type": "fn() -> +Promise[value=+Promise]"
      },
      "testPromiseWithThrowingContentPromiseInit": {
        "!type": "fn(func: +PromiseInit) -> +Promise[value=+Promise]"
      },
      "testPromiseWithDOMExceptionThrowingPromiseInit": {
        "!type": "fn() -> +Promise[value=+Promise]"
      },
      "testPromiseWithThrowingChromeThenFunction": {
        "!type": "fn() -> +Promise[value=+Promise]"
      },
      "testPromiseWithThrowingContentThenFunction": {
        "!type": "fn(func: +AnyCallback) -> +Promise[value=+Promise]"
      },
      "testPromiseWithDOMExceptionThrowingThenFunction": {
        "!type": "fn() -> +Promise[value=+Promise]"
      },
      "testPromiseWithThrowingChromeThenable": {
        "!type": "fn() -> +Promise[value=+Promise]"
      },
      "testPromiseWithThrowingContentThenable": {
        "!type": "fn(thenable: object) -> +Promise[value=+Promise]"
      },
      "testPromiseWithDOMExceptionThrowingThenable": {
        "!type": "fn() -> +Promise[value=+Promise]"
      }
    }
  },
  "Text": {
    "!type": "fn(data: string)",
    "prototype": {
      "splitText": {
        "!type": "fn(offset: number) -> +Text"
      },
      "wholeText": {
        "!type": "string"
      },
      "queryInterface": {
        "!type": "fn(iid: +IID) -> nsISupports"
      },
      "getBoxQuads": {
        "!type": "fn(options: +BoxQuadOptions) -> [+DOMQuad]"
      },
      "convertQuadFromNode": {
        "!type": "fn(quad: +DOMQuad, from: +GeometryNode, options: +ConvertCoordinateOptions) -> +DOMQuad"
      },
      "convertRectFromNode": {
        "!type": "fn(rect: +DOMRectReadOnly, from: +GeometryNode, options: +ConvertCoordinateOptions) -> +DOMQuad"
      },
      "convertPointFromNode": {
        "!type": "fn(point: +DOMPointInit, from: +GeometryNode, options: +ConvertCoordinateOptions) -> +DOMPoint"
      }
    }
  },
  "TextDecoder": {
    "!type": "fn(label: string, options: +TextDecoderOptions)",
    "prototype": {
      "encoding": {
        "!type": "string"
      },
      "fatal": {
        "!type": "bool"
      },
      "decode": {
        "!type": "fn(input: +BufferSource, options: +TextDecodeOptions) -> string"
      }
    }
  },
  "TextEncoder": {
    "!type": "fn(utfLabel: string)",
    "prototype": {
      "encoding": {
        "!type": "string"
      },
      "encode": {
        "!type": "fn(input: string) -> +Uint8Array"
      }
    }
  },
  "TextTrack": {
    "!type": "?"
  },
  "TextTrackCueList": {
    "!type": "?"
  },
  "TextTrackList": {
    "!type": "?"
  },
  "TimeEvent": {
    "!type": "?"
  },
  "TimeRanges": {
    "!type": "?"
  },
  "Touch": {
    "!type": "?"
  },
  "TouchEvent": {
    "!type": "?"
  },
  "TouchList": {
    "!type": "?"
  },
  "TrackEvent": {
    "!type": "fn(type: string, eventInitDict: +TrackEventInit)",
    "prototype": {
      "track": {
        "!type": "?"
      }
    }
  },
  "TransitionEvent": {
    "!type": "fn(type: string, eventInitDict: +TransitionEventInit)",
    "prototype": {
      "propertyName": {
        "!type": "string"
      },
      "elapsedTime": {
        "!type": "number"
      },
      "pseudoElement": {
        "!type": "string"
      }
    }
  },
  "TreeColumn": {
    "!type": "?"
  },
  "TreeColumns": {
    "!type": "?"
  },
  "TreeWalker": {
    "!type": "?"
  },
  "UDPMessageEvent": {
    "!type": "fn(type: string, eventInitDict: +UDPMessageEventInit)",
    "prototype": {
      "remoteAddress": {
        "!type": "string"
      },
      "remotePort": {
        "!type": "number"
      },
      "data": {
        "!type": "?"
      }
    }
  },
  "UDPSocket": {
    "!type": "fn(options: +UDPOptions)",
    "prototype": {
      "localAddress": {
        "!type": "string"
      },
      "localPort": {
        "!type": "number"
      },
      "remoteAddress": {
        "!type": "string"
      },
      "remotePort": {
        "!type": "number"
      },
      "addressReuse": {
        "!type": "bool"
      },
      "loopback": {
        "!type": "bool"
      },
      "readyState": {
        "!type": "+SocketReadyState"
      },
      "opened": {
        "!type": "+Promise[value=+Promise]"
      },
      "closed": {
        "!type": "+Promise[value=+Promise]"
      },
      "onmessage": {
        "!type": "fn(event)"
      },
      "close": {
        "!type": "fn() -> +Promise[value=+Promise]"
      },
      "joinMulticastGroup": {
        "!type": "fn(multicastGroupAddress: string) -> void"
      },
      "leaveMulticastGroup": {
        "!type": "fn(multicastGroupAddress: string) -> void"
      },
      "send": {
        "!type": "fn(data: ?, remoteAddress: string, remotePort: number) -> bool"
      }
    }
  },
  "UIEvent": {
    "!type": "fn(type: string, eventInitDict: +UIEventInit)",
    "prototype": {
      "view": {
        "!type": "+WindowProxy"
      },
      "detail": {
        "!type": "number"
      },
      "initUIEvent": {
        "!type": "fn(aType: string, aCanBubble: bool, aCancelable: bool, aView: +Window, aDetail: number) -> void"
      },
      "SCROLL_PAGE_UP": {
        "!type": "number"
      },
      "SCROLL_PAGE_DOWN": {
        "!type": "number"
      },
      "layerX": {
        "!type": "number"
      },
      "layerY": {
        "!type": "number"
      },
      "pageX": {
        "!type": "number"
      },
      "pageY": {
        "!type": "number"
      },
      "which": {
        "!type": "number"
      },
      "rangeParent": {
        "!type": "+Node"
      },
      "rangeOffset": {
        "!type": "number"
      },
      "cancelBubble": {
        "!type": "bool"
      },
      "isChar": {
        "!type": "bool"
      }
    }
  },
  "URL": {
    "!type": "fn(url: string, base: string)",
    "prototype": {
      "createObjectURL": {
        "!type": "fn(blob: +Blob, options: objectURLOptions) -> string"
      },
      "revokeObjectURL": {
        "!type": "fn(url: string) -> void"
      },
      "href": {
        "!type": "string"
      },
      "origin": {
        "!type": "string"
      },
      "protocol": {
        "!type": "string"
      },
      "username": {
        "!type": "string"
      },
      "password": {
        "!type": "string"
      },
      "host": {
        "!type": "string"
      },
      "hostname": {
        "!type": "string"
      },
      "port": {
        "!type": "string"
      },
      "pathname": {
        "!type": "string"
      },
      "search": {
        "!type": "string"
      },
      "hash": {
        "!type": "string"
      },
      "searchParams": {
        "!type": "+URLSearchParams"
      }
    }
  },
  "URLSearchParams": {
    "!type": "fn(init: +URLSearchParams)",
    "prototype": {
      "append": {
        "!type": "fn(name: string, value: string) -> void"
      },
      "delete": {
        "!type": "fn(name: string) -> void"
      },
      "get": {
        "!type": "fn(name: string) -> string"
      },
      "getAll": {
        "!type": "fn(name: string) -> [string]"
      },
      "has": {
        "!type": "fn(name: string) -> bool"
      },
      "set": {
        "!type": "fn(name: string, value: string) -> void"
      }
    }
  },
  "USSDReceivedEvent": {
    "!type": "fn(type: string, eventInitDict: +USSDReceivedEventInit)",
    "prototype": {
      "serviceId": {
        "!type": "number"
      },
      "message": {
        "!type": "string"
      },
      "session": {
        "!type": "+USSDSession"
      }
    }
  },
  "USSDSession": {
    "!type": "fn(serviceId: number)",
    "prototype": {
      "send": {
        "!type": "fn(ussd: string) -> +Promise[value=+Promise]"
      },
      "cancel": {
        "!type": "fn() -> +Promise[value=+Promise]"
      }
    }
  },
  "UndoManager": {
    "!type": "?"
  },
  "UserProximityEvent": {
    "!type": "fn(type: string, eventInitDict: +UserProximityEventInit)",
    "prototype": {
      "near": {
        "!type": "bool"
      }
    }
  },
  "VRFieldOfViewReadOnly": {
    "!type": "?"
  },
  "VRFieldOfView": {
    "!type": "fn(upDegrees: number, rightDegrees: number, downDegrees: number, leftDegrees: number)",
    "prototype": {
      "upDegrees": {
        "!type": "number"
      },
      "rightDegrees": {
        "!type": "number"
      },
      "downDegrees": {
        "!type": "number"
      },
      "leftDegrees": {
        "!type": "number"
      }
    }
  },
  "VRPositionState": {
    "!type": "?"
  },
  "VREyeParameters": {
    "!type": "?"
  },
  "VRDevice": {
    "!type": "?"
  },
  "HMDVRDevice": {
    "!type": "?"
  },
  "PositionSensorVRDevice": {
    "!type": "?"
  },
  "VTTCue": {
    "!type": "fn(startTime: number, endTime: number, text: string)",
    "prototype": {
      "track": {
        "!type": "+TextTrack"
      },
      "id": {
        "!type": "string"
      },
      "startTime": {
        "!type": "number"
      },
      "endTime": {
        "!type": "number"
      },
      "pauseOnExit": {
        "!type": "bool"
      },
      "region": {
        "!type": "+VTTRegion"
      },
      "vertical": {
        "!type": "+DirectionSetting"
      },
      "snapToLines": {
        "!type": "bool"
      },
      "line": {
        "!type": "?"
      },
      "lineAlign": {
        "!type": "+AlignSetting"
      },
      "position": {
        "!type": "number"
      },
      "positionAlign": {
        "!type": "+AlignSetting"
      },
      "size": {
        "!type": "number"
      },
      "align": {
        "!type": "+AlignSetting"
      },
      "text": {
        "!type": "string"
      },
      "getCueAsHTML": {
        "!type": "fn() -> +DocumentFragment"
      },
      "onenter": {
        "!type": "fn(event)"
      },
      "onexit": {
        "!type": "fn(event)"
      },
      "displayState": {
        "!type": "+HTMLDivElement"
      },
      "hasBeenReset": {
        "!type": "bool"
      }
    }
  },
  "VTTRegion": {
    "!type": "fn()",
    "prototype": {
      "width": {
        "!type": "number"
      },
      "lines": {
        "!type": "number"
      },
      "regionAnchorX": {
        "!type": "number"
      },
      "regionAnchorY": {
        "!type": "number"
      },
      "viewportAnchorX": {
        "!type": "number"
      },
      "viewportAnchorY": {
        "!type": "number"
      },
      "scroll": {
        "!type": "string"
      }
    }
  },
  "ValidityState": {
    "!type": "?"
  },
  "VideoPlaybackQuality": {
    "!type": "?"
  },
  "VideoStreamTrack": {
    "!type": "?"
  },
  "VideoTrack": {
    "!type": "?"
  },
  "VideoTrackList": {
    "!type": "?"
  },
  "WaveShaperNode": {
    "!type": "?"
  },
  "WebGLQuery": {
    "!type": "?"
  },
  "WebGLSampler": {
    "!type": "?"
  },
  "WebGLSync": {
    "!type": "?"
  },
  "WebGLTransformFeedback": {
    "!type": "?"
  },
  "WebGL2RenderingContext": {
    "!type": "?"
  },
  "WebGLBuffer": {
    "!type": "?"
  },
  "WebGLFramebuffer": {
    "!type": "?"
  },
  "WebGLProgram": {
    "!type": "?"
  },
  "WebGLRenderbuffer": {
    "!type": "?"
  },
  "WebGLShader": {
    "!type": "?"
  },
  "WebGLTexture": {
    "!type": "?"
  },
  "WebGLUniformLocation": {
    "!type": "?"
  },
  "WebGLVertexArray": {
    "!type": "?"
  },
  "WebGLActiveInfo": {
    "!type": "?"
  },
  "WebGLShaderPrecisionFormat": {
    "!type": "?"
  },
  "WebGLRenderingContext": {
    "!type": "?"
  },
  "WebSocket": {
    "!type": "fn(url: string, protocols: [string])",
    "prototype": {
      "url": {
        "!type": "string"
      },
      "CONNECTING": {
        "!type": "number"
      },
      "OPEN": {
        "!type": "number"
      },
      "CLOSING": {
        "!type": "number"
      },
      "CLOSED": {
        "!type": "number"
      },
      "readyState": {
        "!type": "number"
      },
      "bufferedAmount": {
        "!type": "number"
      },
      "onopen": {
        "!type": "fn(event)"
      },
      "onerror": {
        "!type": "fn(event)"
      },
      "onclose": {
        "!type": "fn(event)"
      },
      "extensions": {
        "!type": "string"
      },
      "protocol": {
        "!type": "string"
      },
      "close": {
        "!type": "fn(code: number, reason: string) -> void"
      },
      "onmessage": {
        "!type": "fn(event)"
      },
      "binaryType": {
        "!type": "+BinaryType"
      },
      "send": {
        "!type": "fn(data: string) -> void"
      },
      "queryInterface": {
        "!type": "fn(iid: +IID) -> nsISupports"
      }
    }
  },
  "WheelEvent": {
    "!type": "fn(type: string, eventInitDict: +WheelEventInit)",
    "prototype": {
      "DOM_DELTA_PIXEL": {
        "!type": "number"
      },
      "DOM_DELTA_LINE": {
        "!type": "number"
      },
      "DOM_DELTA_PAGE": {
        "!type": "number"
      },
      "deltaX": {
        "!type": "number"
      },
      "deltaY": {
        "!type": "number"
      },
      "deltaZ": {
        "!type": "number"
      },
      "deltaMode": {
        "!type": "number"
      }
    }
  },
  "ApplicationCache": {
    "!type": "?"
  },
  "Window": {
    "!type": "?"
  },
  "ChromeWindow": {
    "!type": "?"
  },
  "Worker": {
    "!type": "fn(scriptURL: string)",
    "prototype": {
      "terminate": {
        "!type": "fn() -> void"
      },
      "postMessage": {
        "!type": "fn(message: ?, transfer: [?]) -> void"
      },
      "onmessage": {
        "!type": "fn(event)"
      },
      "onerror": {
        "!type": "fn(event)"
      }
    }
  },
  "ChromeWorker": {
    "!type": "fn(scriptURL: string)",
    "prototype": {}
  },
  "WorkerDebuggerGlobalScope": {
    "!type": "?"
  },
  "WorkerGlobalScope": {
    "!type": "?"
  },
  "WorkerLocation": {
    "!type": "?"
  },
  "WorkerNavigator": {
    "!type": "?"
  },
  "XMLDocument": {
    "!type": "?"
  },
  "XMLHttpRequest": {
    "!type": "fn(ignored: string)",
    "prototype": {
      "onreadystatechange": {
        "!type": "fn(event)"
      },
      "UNSENT": {
        "!type": "number"
      },
      "OPENED": {
        "!type": "number"
      },
      "HEADERS_RECEIVED": {
        "!type": "number"
      },
      "LOADING": {
        "!type": "number"
      },
      "DONE": {
        "!type": "number"
      },
      "readyState": {
        "!type": "number"
      },
      "open": {
        "!type": "fn(method: +ByteString, url: string) -> void"
      },
      "setRequestHeader": {
        "!type": "fn(header: +ByteString, value: +ByteString) -> void"
      },
      "timeout": {
        "!type": "number"
      },
      "withCredentials": {
        "!type": "bool"
      },
      "upload": {
        "!type": "+XMLHttpRequestUpload"
      },
      "send": {
        "!type": "fn() -> void"
      },
      "abort": {
        "!type": "fn() -> void"
      },
      "responseURL": {
        "!type": "string"
      },
      "status": {
        "!type": "number"
      },
      "statusText": {
        "!type": "+ByteString"
      },
      "getResponseHeader": {
        "!type": "fn(header: +ByteString) -> +ByteString"
      },
      "getAllResponseHeaders": {
        "!type": "fn() -> +ByteString"
      },
      "overrideMimeType": {
        "!type": "fn(mime: string) -> void"
      },
      "responseType": {
        "!type": "+XMLHttpRequestResponseType"
      },
      "response": {
        "!type": "?"
      },
      "responseText": {
        "!type": "string"
      },
      "responseXML": {
        "!type": "+Document"
      },
      "channel": {
        "!type": "+MozChannel"
      },
      "networkInterfaceId": {
        "!type": "+ByteString"
      },
      "getInterface": {
        "!type": "fn(iid: +IID) -> ?"
      },
      "queryInterface": {
        "!type": "fn(iid: +IID) -> nsISupports"
      }
    }
  },
  "XMLHttpRequestEventTarget": {
    "!type": "?"
  },
  "XMLHttpRequestUpload": {
    "!type": "?"
  },
  "OutputStream": {
    "!type": "?"
  },
  "XMLSerializer": {
    "!type": "fn()",
    "prototype": {
      "serializeToString": {
        "!type": "fn(root: +Node) -> string"
      },
      "serializeToStream": {
        "!type": "fn(root: +Node, stream: +OutputStream, charset: string) -> void"
      },
      "queryInterface": {
        "!type": "fn(iid: +IID) -> nsISupports"
      }
    }
  },
  "XMLStylesheetProcessingInstruction": {
    "!type": "?"
  },
  "XPathEvaluator": {
    "!type": "fn()",
    "prototype": {
      "createExpression": {
        "!type": "fn(expression: string, resolver: +XPathNSResolver) -> +XPathExpression"
      },
      "createNSResolver": {
        "!type": "fn(nodeResolver: +Node) -> +Node"
      },
      "evaluate": {
        "!type": "fn(expression: string, contextNode: +Node, resolver: +XPathNSResolver, type: number, result: object) -> +XPathResult"
      },
      "queryInterface": {
        "!type": "fn(iid: +IID) -> nsISupports"
      }
    }
  },
  "XPathExpression": {
    "!type": "?"
  },
  "XPathResult": {
    "!type": "?"
  },
  "XSLTProcessor": {
    "!type": "fn()",
    "prototype": {
      "importStylesheet": {
        "!type": "fn(style: +Node) -> void"
      },
      "transformToFragment": {
        "!type": "fn(source: +Node, output: +Document) -> +DocumentFragment"
      },
      "transformToDocument": {
        "!type": "fn(source: +Node) -> +Document"
      },
      "setParameter": {
        "!type": "fn(namespaceURI: string, localName: string, value: ?) -> void"
      },
      "getParameter": {
        "!type": "fn(namespaceURI: string, localName: string) -> nsIVariant"
      },
      "removeParameter": {
        "!type": "fn(namespaceURI: string, localName: string) -> void"
      },
      "clearParameters": {
        "!type": "fn() -> void"
      },
      "reset": {
        "!type": "fn() -> void"
      },
      "DISABLE_ALL_LOADS": {
        "!type": "number"
      },
      "flags": {
        "!type": "number"
      }
    }
  },
  "window": {
    "!type": "+Window"
  },
  "self": {
    "!type": "+WindowProxy"
  },
  "document": {
    "!type": "+Document"
  },
  "name": {
    "!type": "string"
  },
  "location": {
    "!type": "+Location"
  },
  "history": {
    "!type": "+History"
  },
  "locationbar": {
    "!type": "+BarProp"
  },
  "menubar": {
    "!type": "+BarProp"
  },
  "personalbar": {
    "!type": "+BarProp"
  },
  "scrollbars": {
    "!type": "+BarProp"
  },
  "statusbar": {
    "!type": "+BarProp"
  },
  "toolbar": {
    "!type": "+BarProp"
  },
  "status": {
    "!type": "string"
  },
  "close": {
    "!type": "fn() -> void"
  },
  "closed": {
    "!type": "bool"
  },
  "stop": {
    "!type": "fn() -> void"
  },
  "focus": {
    "!type": "fn() -> void"
  },
  "blur": {
    "!type": "fn() -> void"
  },
  "frames": {
    "!type": "+WindowProxy"
  },
  "length": {
    "!type": "number"
  },
  "top": {
    "!type": "+WindowProxy"
  },
  "opener": {
    "!type": "?"
  },
  "parent": {
    "!type": "+WindowProxy"
  },
  "frameElement": {
    "!type": "+Element"
  },
  "open": {
    "!type": "fn(url: string, target: string, features: string) -> +WindowProxy"
  },
  "navigator": {
    "!type": "+Navigator"
  },
  "external": {
    "!type": "+External"
  },
  "applicationCache": {
    "!type": "+ApplicationCache"
  },
  "alert": {
    "!type": "fn() -> void"
  },
  "confirm": {
    "!type": "fn(message: string) -> bool"
  },
  "prompt": {
    "!type": "fn(message: string, default: string) -> string"
  },
  "print": {
    "!type": "fn() -> void"
  },
  "showModalDialog": {
    "!type": "fn(url: string, argument: ?, options: string) -> ?"
  },
  "postMessage": {
    "!type": "fn(message: ?, targetOrigin: string, transfer: [+Transferable]) -> void"
  },
  "captureEvents": {
    "!type": "fn() -> void"
  },
  "releaseEvents": {
    "!type": "fn() -> void"
  },
  "getSelection": {
    "!type": "fn() -> +Selection"
  },
  "getComputedStyle": {
    "!type": "fn(elt: +Element, pseudoElt: string) -> +CSSStyleDeclaration"
  },
  "matchMedia": {
    "!type": "fn(query: string) -> +MediaQueryList"
  },
  "screen": {
    "!type": "+Screen"
  },
  "moveTo": {
    "!type": "fn(x: number, y: number) -> void"
  },
  "moveBy": {
    "!type": "fn(x: number, y: number) -> void"
  },
  "resizeTo": {
    "!type": "fn(x: number, y: number) -> void"
  },
  "resizeBy": {
    "!type": "fn(x: number, y: number) -> void"
  },
  "innerWidth": {
    "!type": "?"
  },
  "innerHeight": {
    "!type": "?"
  },
  "scroll": {
    "!type": "fn(x: number, y: number) -> void"
  },
  "scrollTo": {
    "!type": "fn(x: number, y: number) -> void"
  },
  "scrollBy": {
    "!type": "fn(x: number, y: number) -> void"
  },
  "scrollX": {
    "!type": "number"
  },
  "pageXOffset": {
    "!type": "number"
  },
  "scrollY": {
    "!type": "number"
  },
  "pageYOffset": {
    "!type": "number"
  },
  "screenX": {
    "!type": "?"
  },
  "screenY": {
    "!type": "?"
  },
  "outerWidth": {
    "!type": "?"
  },
  "outerHeight": {
    "!type": "?"
  },
  "requestAnimationFrame": {
    "!type": "fn(callback: +FrameRequestCallback) -> number"
  },
  "cancelAnimationFrame": {
    "!type": "fn(handle: number) -> void"
  },
  "performance": {
    "!type": "+Performance"
  },
  "caches": {
    "!type": "+CacheStorage"
  },
  "getDefaultComputedStyle": {
    "!type": "fn(elt: +Element, pseudoElt: string) -> +CSSStyleDeclaration"
  },
  "scrollByLines": {
    "!type": "fn(numLines: number, options: +ScrollOptions) -> void"
  },
  "scrollByPages": {
    "!type": "fn(numPages: number, options: +ScrollOptions) -> void"
  },
  "sizeToContent": {
    "!type": "fn() -> void"
  },
  "controllers": {
    "!type": "+MozControllers"
  },
  "realFrameElement": {
    "!type": "+Element"
  },
  "devicePixelRatio": {
    "!type": "number"
  },
  "scrollMaxX": {
    "!type": "number"
  },
  "scrollMaxY": {
    "!type": "number"
  },
  "fullScreen": {
    "!type": "bool"
  },
  "back": {
    "!type": "fn() -> void"
  },
  "forward": {
    "!type": "fn() -> void"
  },
  "home": {
    "!type": "fn() -> void"
  },
  "updateCommands": {
    "!type": "fn(action: string, sel: +Selection, reason: number) -> void"
  },
  "find": {
    "!type": "fn(str: string, caseSensitive: bool, backwards: bool, wrapAround: bool, wholeWord: bool, searchInFrames: bool, showDialog: bool) -> bool"
  },
  "onwheel": {
    "!type": "fn(event)"
  },
  "ondevicemotion": {
    "!type": "fn(event)"
  },
  "ondeviceorientation": {
    "!type": "fn(event)"
  },
  "ondeviceproximity": {
    "!type": "fn(event)"
  },
  "onuserproximity": {
    "!type": "fn(event)"
  },
  "ondevicelight": {
    "!type": "fn(event)"
  },
  "dump": {
    "!type": "fn(str: string) -> void"
  },
  "setResizable": {
    "!type": "fn(resizable: bool) -> void"
  },
  "openDialog": {
    "!type": "fn(url: string, name: string, options: string, extraArguments: ?) -> +WindowProxy"
  },
  "content": {
    "!type": "object"
  },
  "_content": {
    "!type": "object"
  },
  "getInterface": {
    "!type": "fn(iid: +IID) -> ?"
  },
  "windowRoot": {
    "!type": "+WindowRoot"
  },
  "console": {
    "!type": "+Console"
  },
  "sidebar": {
    "!type": "?"
  },
  "queryInterface": {
    "!type": "fn(iid: +IID) -> nsISupports"
  },
  "onabort": {
    "!type": "fn(event)"
  },
  "onblur": {
    "!type": "fn(event)"
  },
  "onfocus": {
    "!type": "fn(event)"
  },
  "oncanplay": {
    "!type": "fn(event)"
  },
  "oncanplaythrough": {
    "!type": "fn(event)"
  },
  "onchange": {
    "!type": "fn(event)"
  },
  "onclick": {
    "!type": "fn(event)"
  },
  "oncontextmenu": {
    "!type": "fn(event)"
  },
  "ondblclick": {
    "!type": "fn(event)"
  },
  "ondrag": {
    "!type": "fn(event)"
  },
  "ondragend": {
    "!type": "fn(event)"
  },
  "ondragenter": {
    "!type": "fn(event)"
  },
  "ondragleave": {
    "!type": "fn(event)"
  },
  "ondragover": {
    "!type": "fn(event)"
  },
  "ondragstart": {
    "!type": "fn(event)"
  },
  "ondrop": {
    "!type": "fn(event)"
  },
  "ondurationchange": {
    "!type": "fn(event)"
  },
  "onemptied": {
    "!type": "fn(event)"
  },
  "onended": {
    "!type": "fn(event)"
  },
  "oninput": {
    "!type": "fn(event)"
  },
  "oninvalid": {
    "!type": "fn(event)"
  },
  "onkeydown": {
    "!type": "fn(event)"
  },
  "onkeypress": {
    "!type": "fn(event)"
  },
  "onkeyup": {
    "!type": "fn(event)"
  },
  "onload": {
    "!type": "fn(event)"
  },
  "onloadeddata": {
    "!type": "fn(event)"
  },
  "onloadedmetadata": {
    "!type": "fn(event)"
  },
  "onloadstart": {
    "!type": "fn(event)"
  },
  "onmousedown": {
    "!type": "fn(event)"
  },
  "onmouseenter": {
    "!type": "fn(event)"
  },
  "onmouseleave": {
    "!type": "fn(event)"
  },
  "onmousemove": {
    "!type": "fn(event)"
  },
  "onmouseout": {
    "!type": "fn(event)"
  },
  "onmouseover": {
    "!type": "fn(event)"
  },
  "onmouseup": {
    "!type": "fn(event)"
  },
  "onpause": {
    "!type": "fn(event)"
  },
  "onplay": {
    "!type": "fn(event)"
  },
  "onplaying": {
    "!type": "fn(event)"
  },
  "onprogress": {
    "!type": "fn(event)"
  },
  "onratechange": {
    "!type": "fn(event)"
  },
  "onreset": {
    "!type": "fn(event)"
  },
  "onresize": {
    "!type": "fn(event)"
  },
  "onscroll": {
    "!type": "fn(event)"
  },
  "onseeked": {
    "!type": "fn(event)"
  },
  "onseeking": {
    "!type": "fn(event)"
  },
  "onselect": {
    "!type": "fn(event)"
  },
  "onshow": {
    "!type": "fn(event)"
  },
  "onstalled": {
    "!type": "fn(event)"
  },
  "onsubmit": {
    "!type": "fn(event)"
  },
  "onsuspend": {
    "!type": "fn(event)"
  },
  "ontimeupdate": {
    "!type": "fn(event)"
  },
  "onvolumechange": {
    "!type": "fn(event)"
  },
  "onwaiting": {
    "!type": "fn(event)"
  },
  "onpointercancel": {
    "!type": "fn(event)"
  },
  "onpointerdown": {
    "!type": "fn(event)"
  },
  "onpointerup": {
    "!type": "fn(event)"
  },
  "onpointermove": {
    "!type": "fn(event)"
  },
  "onpointerout": {
    "!type": "fn(event)"
  },
  "onpointerover": {
    "!type": "fn(event)"
  },
  "onpointerenter": {
    "!type": "fn(event)"
  },
  "onpointerleave": {
    "!type": "fn(event)"
  },
  "ongotpointercapture": {
    "!type": "fn(event)"
  },
  "onlostpointercapture": {
    "!type": "fn(event)"
  },
  "onmozfullscreenchange": {
    "!type": "fn(event)"
  },
  "onmozfullscreenerror": {
    "!type": "fn(event)"
  },
  "onmozpointerlockchange": {
    "!type": "fn(event)"
  },
  "onmozpointerlockerror": {
    "!type": "fn(event)"
  },
  "onafterprint": {
    "!type": "fn(event)"
  },
  "onbeforeprint": {
    "!type": "fn(event)"
  },
  "onbeforeunload": {
    "!type": "+OnBeforeUnloadEventHandler"
  },
  "onhashchange": {
    "!type": "fn(event)"
  },
  "onlanguagechange": {
    "!type": "fn(event)"
  },
  "onmessage": {
    "!type": "fn(event)"
  },
  "onoffline": {
    "!type": "fn(event)"
  },
  "ononline": {
    "!type": "fn(event)"
  },
  "onpagehide": {
    "!type": "fn(event)"
  },
  "onpageshow": {
    "!type": "fn(event)"
  },
  "onpopstate": {
    "!type": "fn(event)"
  },
  "onunload": {
    "!type": "fn(event)"
  },
  "setTimeout": {
    "!type": "fn(handler: +Function, timeout: number, arguments: ?) -> number"
  },
  "clearTimeout": {
    "!type": "fn(handle: number) -> void"
  },
  "setInterval": {
    "!type": "fn(handler: +Function, timeout: number, arguments: ?) -> number"
  },
  "clearInterval": {
    "!type": "fn(handle: number) -> void"
  },
  "btoa": {
    "!type": "fn(btoa: string) -> string"
  },
  "atob": {
    "!type": "fn(atob: string) -> string"
  },
  "sessionStorage": {
    "!type": "+Storage"
  },
  "localStorage": {
    "!type": "+Storage"
  },
  "indexedDB": {
    "!type": "+IDBFactory"
  },
  "speechSynthesis": {
    "!type": "+SpeechSynthesis"
  },
  "dialogArguments": {
    "!type": "?"
  },
  "returnValue": {
    "!type": "?"
  },
  "ontouchstart": {
    "!type": "fn(event)"
  },
  "ontouchend": {
    "!type": "fn(event)"
  },
  "ontouchmove": {
    "!type": "fn(event)"
  },
  "ontouchcancel": {
    "!type": "fn(event)"
  },
  "onerror": {
    "!type": "+OnErrorEventHandler"
  },
  "STATE_MAXIMIZED": {
    "!type": "number"
  },
  "STATE_MINIMIZED": {
    "!type": "number"
  },
  "STATE_NORMAL": {
    "!type": "number"
  },
  "STATE_FULLSCREEN": {
    "!type": "number"
  },
  "windowState": {
    "!type": "number"
  },
  "browserDOMWindow": {
    "!type": "nsIBrowserDOMWindow"
  },
  "getAttention": {
    "!type": "fn() -> void"
  },
  "getAttentionWithCycleCount": {
    "!type": "fn(aCycleCount: number) -> void"
  },
  "setCursor": {
    "!type": "fn(cursor: string) -> void"
  },
  "maximize": {
    "!type": "fn() -> void"
  },
  "minimize": {
    "!type": "fn() -> void"
  },
  "restore": {
    "!type": "fn() -> void"
  },
  "notifyDefaultButtonLoaded": {
    "!type": "fn(defaultButton: +Element) -> void"
  },
  "messageManager": {
    "!type": "nsIMessageBroadcaster"
  },
  "getGroupMessageManager": {
    "!type": "fn(aGroup: string) -> nsIMessageBroadcaster"
  },
  "beginWindowMove": {
    "!type": "fn(mouseDownEvent: +Event, panel: +Element) -> void"
  },
  "fetch": {
    "!type": "fn(input: +RequestInfo, init: +RequestInit) -> +Promise[value=+Promise]"
  }
}
