{
  "!name": "webidl",
  "!define": {
    "AbstractWorker": {
      "onerror": {
        "!type": "fn(+Event)"
      }
    },
    "Animatable": {
      "getAnimations": {
        "!type": "fn() -> [Animation]"
      }
    },
    "DOMApplicationsRegistry": {
      "mgmt": {
        "!type": "DOMApplicationsManager"
      },
      "install": {
        "!type": "fn(url: string, params?: InstallParameters) -> DOMRequest"
      },
      "installPackage": {
        "!type": "fn(url: string, params?: InstallParameters) -> DOMRequest"
      },
      "getSelf": {
        "!type": "fn() -> DOMRequest"
      },
      "getInstalled": {
        "!type": "fn() -> DOMRequest"
      },
      "checkInstalled": {
        "!type": "fn(manifestUrl: string) -> DOMRequest"
      },
      "getAdditionalLanguages": {
        "!type": "fn() -> +Promise"
      },
      "getLocalizationResource": {
        "!type": "fn(language: string, version: string, path: string, dataType: LocaleResourceType) -> +Promise[value=?]"
      }
    },
    "AudioNodePassThrough": {
      "passThrough": {
        "!type": "bool"
      }
    },
    "BrowserElement": {
      "setVisible": {
        "!type": "fn(visible: bool)"
      },
      "getVisible": {
        "!type": "fn() -> DOMRequest"
      },
      "setActive": {
        "!type": "fn(active: bool)"
      },
      "getActive": {
        "!type": "fn() -> bool"
      },
      "addNextPaintListener": {
        "!type": "fn(listener: BrowserElementNextPaintEventCallback)"
      },
      "removeNextPaintListener": {
        "!type": "fn(listener: BrowserElementNextPaintEventCallback)"
      },
      "sendMouseEvent": {
        "!type": "fn(type: string, x: number, y: number, button: number, clickCount: number, modifiers: number)"
      },
      "sendTouchEvent": {
        "!type": "fn(type: string, identifiers: [number], x: [number], y: [number], rx: [number], ry: [number], rotationAngles: [number], forces: [number], count: number, modifiers: number)"
      },
      "goBack": {
        "!type": "fn()"
      },
      "goForward": {
        "!type": "fn()"
      },
      "reload": {
        "!type": "fn(hardReload?: bool)"
      },
      "stop": {
        "!type": "fn()"
      },
      "download": {
        "!type": "fn(url: string, options?: BrowserElementDownloadOptions) -> DOMRequest"
      },
      "purgeHistory": {
        "!type": "fn() -> DOMRequest"
      },
      "getScreenshot": {
        "!type": "fn(width: number, height: number, mimeType?: string) -> DOMRequest"
      },
      "zoom": {
        "!type": "fn(zoom: number)"
      },
      "getCanGoBack": {
        "!type": "fn() -> DOMRequest"
      },
      "getCanGoForward": {
        "!type": "fn() -> DOMRequest"
      },
      "getContentDimensions": {
        "!type": "fn() -> DOMRequest"
      },
      "setInputMethodActive": {
        "!type": "fn(isActive: bool) -> DOMRequest"
      },
      "setNFCFocus": {
        "!type": "fn(isFocus: bool)"
      }
    },
    "BrowserElementCommon": {
      "setVisible": {
        "!type": "fn(visible: bool)"
      },
      "getVisible": {
        "!type": "fn() -> DOMRequest"
      },
      "setActive": {
        "!type": "fn(active: bool)"
      },
      "getActive": {
        "!type": "fn() -> bool"
      },
      "addNextPaintListener": {
        "!type": "fn(listener: BrowserElementNextPaintEventCallback)"
      },
      "removeNextPaintListener": {
        "!type": "fn(listener: BrowserElementNextPaintEventCallback)"
      }
    },
    "BrowserElementPrivileged": {
      "sendMouseEvent": {
        "!type": "fn(type: string, x: number, y: number, button: number, clickCount: number, modifiers: number)"
      },
      "sendTouchEvent": {
        "!type": "fn(type: string, identifiers: [number], x: [number], y: [number], rx: [number], ry: [number], rotationAngles: [number], forces: [number], count: number, modifiers: number)"
      },
      "goBack": {
        "!type": "fn()"
      },
      "goForward": {
        "!type": "fn()"
      },
      "reload": {
        "!type": "fn(hardReload?: bool)"
      },
      "stop": {
        "!type": "fn()"
      },
      "download": {
        "!type": "fn(url: string, options?: BrowserElementDownloadOptions) -> DOMRequest"
      },
      "purgeHistory": {
        "!type": "fn() -> DOMRequest"
      },
      "getScreenshot": {
        "!type": "fn(width: number, height: number, mimeType?: string) -> DOMRequest"
      },
      "zoom": {
        "!type": "fn(zoom: number)"
      },
      "getCanGoBack": {
        "!type": "fn() -> DOMRequest"
      },
      "getCanGoForward": {
        "!type": "fn() -> DOMRequest"
      },
      "getContentDimensions": {
        "!type": "fn() -> DOMRequest"
      },
      "setInputMethodActive": {
        "!type": "fn(isActive: bool) -> DOMRequest"
      },
      "setNFCFocus": {
        "!type": "fn(isFocus: bool)"
      }
    },
    "CallsList": {
      "item": {
        "!type": "fn(index: number) -> TelephonyCall"
      },
      "length": {
        "!type": "number"
      }
    },
    "CanvasDrawingStyles": {
      "lineWidth": {
        "!type": "number"
      },
      "lineCap": {
        "!type": "string"
      },
      "lineJoin": {
        "!type": "string"
      },
      "miterLimit": {
        "!type": "number"
      },
      "setLineDash": {
        "!type": "fn(segments: [number])"
      },
      "getLineDash": {
        "!type": "fn() -> [number]"
      },
      "lineDashOffset": {
        "!type": "number"
      },
      "font": {
        "!type": "string"
      },
      "textAlign": {
        "!type": "string"
      },
      "textBaseline": {
        "!type": "string"
      }
    },
    "CanvasPathMethods": {
      "closePath": {
        "!type": "fn()"
      },
      "moveTo": {
        "!type": "fn(x: number, y: number)"
      },
      "lineTo": {
        "!type": "fn(x: number, y: number)"
      },
      "quadraticCurveTo": {
        "!type": "fn(cpx: number, cpy: number, x: number, y: number)"
      },
      "bezierCurveTo": {
        "!type": "fn(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number)"
      },
      "arcTo": {
        "!type": "fn(x1: number, y1: number, x2: number, y2: number, radius: number)"
      },
      "rect": {
        "!type": "fn(x: number, y: number, w: number, h: number)"
      },
      "arc": {
        "!type": "fn(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: bool)"
      }
    },
    "ChildNode": {
      "remove": {
        "!type": "fn()"
      }
    },
    "NonDocumentTypeChildNode": {
      "previousElementSibling": {
        "!type": "Element"
      },
      "nextElementSibling": {
        "!type": "Element"
      }
    },
    "ContactManager": {
      "find": {
        "!type": "fn(options?: ContactFindOptions) -> DOMRequest"
      },
      "getAll": {
        "!type": "fn(options?: ContactFindSortOptions) -> DOMCursor"
      },
      "clear": {
        "!type": "fn() -> DOMRequest"
      },
      "save": {
        "!type": "fn(contact: mozContact) -> DOMRequest"
      },
      "remove": {
        "!type": "fn(contactOrId: ?) -> DOMRequest"
      },
      "getRevision": {
        "!type": "fn() -> DOMRequest"
      },
      "getCount": {
        "!type": "fn() -> DOMRequest"
      },
      "oncontactchange": {
        "!type": "fn(+Event)"
      }
    },
    "ContainerBoxObject": {
      "docShell": {
        "!type": "nsIDocShell"
      }
    },
    "Coordinates": {
      "latitude": {
        "!type": "number"
      },
      "longitude": {
        "!type": "number"
      },
      "altitude": {
        "!type": "number"
      },
      "accuracy": {
        "!type": "number"
      },
      "altitudeAccuracy": {
        "!type": "number"
      },
      "heading": {
        "!type": "number"
      },
      "speed": {
        "!type": "number"
      }
    },
    "RandomSource": {
      "getRandomValues": {
        "!type": "fn(array: ArrayBufferView) -> ArrayBufferView"
      }
    },
    "ExceptionMembers": {
      "message": {
        "!type": "string"
      },
      "result": {
        "!type": "number"
      },
      "name": {
        "!type": "string"
      },
      "filename": {
        "!type": "string"
      },
      "lineNumber": {
        "!type": "number"
      },
      "columnNumber": {
        "!type": "number"
      },
      "location": {
        "!type": "StackFrame"
      },
      "inner": {
        "!type": "nsISupports"
      },
      "data": {
        "!type": "nsISupports"
      },
      "stack": {
        "!type": "string"
      }
    },
    "Exception": {
      "message": {
        "!type": "string"
      },
      "result": {
        "!type": "number"
      },
      "name": {
        "!type": "string"
      },
      "filename": {
        "!type": "string"
      },
      "lineNumber": {
        "!type": "number"
      },
      "columnNumber": {
        "!type": "number"
      },
      "location": {
        "!type": "StackFrame"
      },
      "inner": {
        "!type": "nsISupports"
      },
      "data": {
        "!type": "nsISupports"
      },
      "stack": {
        "!type": "string"
      }
    },
    "DOMRequestShared": {
      "readyState": {
        "!type": "DOMRequestReadyState"
      },
      "result": {
        "!type": "?"
      },
      "error": {
        "!type": "DOMError"
      },
      "onsuccess": {
        "!type": "fn(+Event)"
      },
      "onerror": {
        "!type": "fn(+Event)"
      }
    },
    "DeviceAcceleration": {
      "x": {
        "!type": "number"
      },
      "y": {
        "!type": "number"
      },
      "z": {
        "!type": "number"
      }
    },
    "DeviceRotationRate": {
      "alpha": {
        "!type": "number"
      },
      "beta": {
        "!type": "number"
      },
      "gamma": {
        "!type": "number"
      }
    },
    "Directory": {
      "name": {
        "!type": "string"
      },
      "createFile": {
        "!type": "fn(path: string, options?: CreateFileOptions) -> +Promise[value=File]"
      },
      "createDirectory": {
        "!type": "fn(path: string) -> +Promise[value=Directory]"
      },
      "get": {
        "!type": "fn(path: string) -> +Promise[value=?]"
      },
      "remove": {
        "!type": "fn(path: ?) -> +Promise[value=bool]"
      },
      "removeDeep": {
        "!type": "fn(path: ?) -> +Promise[value=bool]"
      }
    },
    "DOMDownloadManager": {
      "getDownloads": {
        "!type": "fn() -> +Promise"
      },
      "remove": {
        "!type": "fn(download: DOMDownload) -> +Promise[value=DOMDownload]"
      },
      "clearAllDone": {
        "!type": "fn()"
      },
      "adoptDownload": {
        "!type": "fn(download?: AdoptDownloadDict) -> +Promise[value=DOMDownload]"
      },
      "ondownloadstart": {
        "!type": "fn(+Event)"
      }
    },
    "GlobalEventHandlers": {
      "onabort": {
        "!type": "fn(+Event)"
      },
      "onblur": {
        "!type": "fn(+Event)"
      },
      "onfocus": {
        "!type": "fn(+Event)"
      },
      "oncanplay": {
        "!type": "fn(+Event)"
      },
      "oncanplaythrough": {
        "!type": "fn(+Event)"
      },
      "onchange": {
        "!type": "fn(+Event)"
      },
      "onclick": {
        "!type": "fn(+Event)"
      },
      "oncontextmenu": {
        "!type": "fn(+Event)"
      },
      "ondblclick": {
        "!type": "fn(+Event)"
      },
      "ondrag": {
        "!type": "fn(+Event)"
      },
      "ondragend": {
        "!type": "fn(+Event)"
      },
      "ondragenter": {
        "!type": "fn(+Event)"
      },
      "ondragleave": {
        "!type": "fn(+Event)"
      },
      "ondragover": {
        "!type": "fn(+Event)"
      },
      "ondragstart": {
        "!type": "fn(+Event)"
      },
      "ondrop": {
        "!type": "fn(+Event)"
      },
      "ondurationchange": {
        "!type": "fn(+Event)"
      },
      "onemptied": {
        "!type": "fn(+Event)"
      },
      "onended": {
        "!type": "fn(+Event)"
      },
      "oninput": {
        "!type": "fn(+Event)"
      },
      "oninvalid": {
        "!type": "fn(+Event)"
      },
      "onkeydown": {
        "!type": "fn(+Event)"
      },
      "onkeypress": {
        "!type": "fn(+Event)"
      },
      "onkeyup": {
        "!type": "fn(+Event)"
      },
      "onload": {
        "!type": "fn(+Event)"
      },
      "onloadeddata": {
        "!type": "fn(+Event)"
      },
      "onloadedmetadata": {
        "!type": "fn(+Event)"
      },
      "onloadstart": {
        "!type": "fn(+Event)"
      },
      "onmousedown": {
        "!type": "fn(+Event)"
      },
      "onmouseenter": {
        "!type": "fn(+Event)"
      },
      "onmouseleave": {
        "!type": "fn(+Event)"
      },
      "onmousemove": {
        "!type": "fn(+Event)"
      },
      "onmouseout": {
        "!type": "fn(+Event)"
      },
      "onmouseover": {
        "!type": "fn(+Event)"
      },
      "onmouseup": {
        "!type": "fn(+Event)"
      },
      "onpause": {
        "!type": "fn(+Event)"
      },
      "onplay": {
        "!type": "fn(+Event)"
      },
      "onplaying": {
        "!type": "fn(+Event)"
      },
      "onprogress": {
        "!type": "fn(+Event)"
      },
      "onratechange": {
        "!type": "fn(+Event)"
      },
      "onreset": {
        "!type": "fn(+Event)"
      },
      "onresize": {
        "!type": "fn(+Event)"
      },
      "onscroll": {
        "!type": "fn(+Event)"
      },
      "onseeked": {
        "!type": "fn(+Event)"
      },
      "onseeking": {
        "!type": "fn(+Event)"
      },
      "onselect": {
        "!type": "fn(+Event)"
      },
      "onshow": {
        "!type": "fn(+Event)"
      },
      "onstalled": {
        "!type": "fn(+Event)"
      },
      "onsubmit": {
        "!type": "fn(+Event)"
      },
      "onsuspend": {
        "!type": "fn(+Event)"
      },
      "ontimeupdate": {
        "!type": "fn(+Event)"
      },
      "onvolumechange": {
        "!type": "fn(+Event)"
      },
      "onwaiting": {
        "!type": "fn(+Event)"
      },
      "onpointercancel": {
        "!type": "fn(+Event)"
      },
      "onpointerdown": {
        "!type": "fn(+Event)"
      },
      "onpointerup": {
        "!type": "fn(+Event)"
      },
      "onpointermove": {
        "!type": "fn(+Event)"
      },
      "onpointerout": {
        "!type": "fn(+Event)"
      },
      "onpointerover": {
        "!type": "fn(+Event)"
      },
      "onpointerenter": {
        "!type": "fn(+Event)"
      },
      "onpointerleave": {
        "!type": "fn(+Event)"
      },
      "ongotpointercapture": {
        "!type": "fn(+Event)"
      },
      "onlostpointercapture": {
        "!type": "fn(+Event)"
      },
      "onmozfullscreenchange": {
        "!type": "fn(+Event)"
      },
      "onmozfullscreenerror": {
        "!type": "fn(+Event)"
      },
      "onmozpointerlockchange": {
        "!type": "fn(+Event)"
      },
      "onmozpointerlockerror": {
        "!type": "fn(+Event)"
      }
    },
    "WindowEventHandlers": {
      "onafterprint": {
        "!type": "fn(+Event)"
      },
      "onbeforeprint": {
        "!type": "fn(+Event)"
      },
      "onbeforeunload": {
        "!type": "OnBeforeUnloadEventHandler"
      },
      "onhashchange": {
        "!type": "fn(+Event)"
      },
      "onlanguagechange": {
        "!type": "fn(+Event)"
      },
      "onmessage": {
        "!type": "fn(+Event)"
      },
      "onoffline": {
        "!type": "fn(+Event)"
      },
      "ononline": {
        "!type": "fn(+Event)"
      },
      "onpagehide": {
        "!type": "fn(+Event)"
      },
      "onpageshow": {
        "!type": "fn(+Event)"
      },
      "onpopstate": {
        "!type": "fn(+Event)"
      },
      "onunload": {
        "!type": "fn(+Event)"
      }
    },
    "OnErrorEventHandlerForNodes": {
      "onerror": {
        "!type": "fn(+Event)"
      }
    },
    "OnErrorEventHandlerForWindow": {
      "onerror": {
        "!type": "OnErrorEventHandler"
      }
    },
    "Body": {
      "bodyUsed": {
        "!type": "bool"
      },
      "arrayBuffer": {
        "!type": "fn() -> +Promise[value=ArrayBuffer]"
      },
      "blob": {
        "!type": "fn() -> +Promise[value=Blob]"
      },
      "formData": {
        "!type": "fn() -> +Promise[value=FormData]"
      },
      "json": {
        "!type": "fn() -> +Promise[value=JSON]"
      },
      "text": {
        "!type": "fn() -> +Promise[value=string]"
      }
    },
    "GlobalFetch": {
      "fetch": {
        "!type": "fn(input: RequestInfo, init?: RequestInit) -> +Promise[value=Response]"
      }
    },
    "FontFaceSetIterator": {
      "next": {
        "!type": "fn() -> FontFaceSetIteratorResult"
      }
    },
    "FontFaceSource": {
      "fonts": {
        "!type": "FontFaceSet"
      }
    },
    "Geolocation": {
      "getCurrentPosition": {
        "!type": "fn(successCallback: PositionCallback, errorCallback?: PositionErrorCallback, options?: PositionOptions)"
      },
      "watchPosition": {
        "!type": "fn(successCallback: PositionCallback, errorCallback?: PositionErrorCallback, options?: PositionOptions) -> number"
      },
      "clearWatch": {
        "!type": "fn(watchId: number)"
      }
    },
    "GeometryUtils": {
      "getBoxQuads": {
        "!type": "fn(options?: BoxQuadOptions) -> [DOMQuad]"
      },
      "convertQuadFromNode": {
        "!type": "fn(quad: DOMQuad, from: GeometryNode, options?: ConvertCoordinateOptions) -> DOMQuad"
      },
      "convertRectFromNode": {
        "!type": "fn(rect: DOMRectReadOnly, from: GeometryNode, options?: ConvertCoordinateOptions) -> DOMQuad"
      },
      "convertPointFromNode": {
        "!type": "fn(point: DOMPointInit, from: GeometryNode, options?: ConvertCoordinateOptions) -> DOMPoint"
      }
    },
    "GetUserMediaRequest": {
      "windowID": {
        "!type": "number"
      },
      "innerWindowID": {
        "!type": "number"
      },
      "callID": {
        "!type": "string"
      },
      "getConstraints": {
        "!type": "fn() -> MediaStreamConstraints"
      },
      "isSecure": {
        "!type": "bool"
      }
    },
    "TouchEventHandlers": {
      "ontouchstart": {
        "!type": "fn(+Event)"
      },
      "ontouchend": {
        "!type": "fn(+Event)"
      },
      "ontouchmove": {
        "!type": "fn(+Event)"
      },
      "ontouchcancel": {
        "!type": "fn(+Event)"
      }
    },
    "IDBEnvironment": {
      "indexedDB": {
        "!type": "IDBFactory"
      }
    },
    "IdentityManager": {
      "watch": {
        "!type": "fn(options?: IdentityWatchOptions)"
      },
      "request": {
        "!type": "fn(options?: IdentityRequestOptions)"
      },
      "logout": {
        "!type": "fn()"
      },
      "get": {
        "!type": "fn(callback: IdentityOnLoginCallback, options?: IdentityGetOptions)"
      },
      "getVerifiedEmail": {
        "!type": "fn(callback: IdentityOnLoginCallback)"
      }
    },
    "ImageCaptureError": {
      "FRAME_GRAB_ERROR": {
        "!type": "number"
      },
      "SETTINGS_ERROR": {
        "!type": "number"
      },
      "PHOTO_ERROR": {
        "!type": "number"
      },
      "ERROR_UNKNOWN": {
        "!type": "number"
      },
      "code": {
        "!type": "number"
      },
      "message": {
        "!type": "string"
      }
    },
    "LegacyQueryInterface": {
      "queryInterface": {
        "!type": "fn(iid: IID) -> nsISupports"
      }
    },
    "LinkStyle": {
      "sheet": {
        "!type": "StyleSheet"
      }
    },
    "ListBoxObject": {
      "getRowCount": {
        "!type": "fn() -> number"
      },
      "getNumberOfVisibleRows": {
        "!type": "fn() -> number"
      },
      "getIndexOfFirstVisibleRow": {
        "!type": "fn() -> number"
      },
      "ensureIndexIsVisible": {
        "!type": "fn(rowIndex: number)"
      },
      "scrollToIndex": {
        "!type": "fn(rowIndex: number)"
      },
      "scrollByLines": {
        "!type": "fn(numLines: number)"
      },
      "getItemAtIndex": {
        "!type": "fn(index: number) -> Element"
      },
      "getIndexOfItem": {
        "!type": "fn(item: Element) -> number"
      }
    },
    "MediaStreamError": {
      "name": {
        "!type": "string"
      },
      "message": {
        "!type": "string"
      },
      "constraintName": {
        "!type": "string"
      }
    },
    "MessagePortList": {
      "length": {
        "!type": "number"
      },
      "item": {
        "!type": "fn(index: number) -> MessagePort"
      }
    },
    "PaymentProvider": {
      "paymentServiceId": {
        "!type": "string"
      },
      "iccInfo": {
        "!type": "[PaymentIccInfo]"
      },
      "paymentSuccess": {
        "!type": "fn(result?: string)"
      },
      "paymentFailed": {
        "!type": "fn(error?: string)"
      },
      "sendSilentSms": {
        "!type": "fn(number: string, message: string) -> DOMRequest"
      },
      "observeSilentSms": {
        "!type": "fn(number: string, callback: SilentSmsCallback)"
      },
      "removeSilentSmsObserver": {
        "!type": "fn(number: string, callback: SilentSmsCallback)"
      }
    },
    "NavigatorID": {
      "appCodeName": {
        "!type": "string"
      },
      "appName": {
        "!type": "string"
      },
      "appVersion": {
        "!type": "string"
      },
      "platform": {
        "!type": "string"
      },
      "userAgent": {
        "!type": "string"
      },
      "product": {
        "!type": "string"
      },
      "taintEnabled": {
        "!type": "fn() -> bool"
      }
    },
    "NavigatorLanguage": {
      "language": {
        "!type": "string"
      },
      "languages": {
        "!type": "[string]"
      }
    },
    "NavigatorOnLine": {
      "onLine": {
        "!type": "bool"
      }
    },
    "NavigatorContentUtils": {
      "registerProtocolHandler": {
        "!type": "fn(scheme: string, url: string, title: string)"
      },
      "registerContentHandler": {
        "!type": "fn(mimeType: string, url: string, title: string)"
      }
    },
    "NavigatorStorageUtils": {},
    "NavigatorFeatures": {
      "getFeature": {
        "!type": "fn(name: string) -> +Promise[value=?]"
      },
      "hasFeature": {
        "!type": "fn(name: string) -> +Promise[value=?]"
      }
    },
    "NavigatorGeolocation": {
      "geolocation": {
        "!type": "Geolocation"
      }
    },
    "NavigatorBattery": {
      "battery": {
        "!type": "BatteryManager"
      }
    },
    "NavigatorDataStore": {
      "getDataStores": {
        "!type": "fn(name: string, owner?: string) -> +Promise"
      }
    },
    "ParentNode": {
      "children": {
        "!type": "HTMLCollection"
      },
      "firstElementChild": {
        "!type": "Element"
      },
      "lastElementChild": {
        "!type": "Element"
      },
      "childElementCount": {
        "!type": "number"
      }
    },
    "Position": {
      "coords": {
        "!type": "Coordinates"
      },
      "timestamp": {
        "!type": "DOMTimeStamp"
      }
    },
    "PositionError": {
      "PERMISSION_DENIED": {
        "!type": "number"
      },
      "POSITION_UNAVAILABLE": {
        "!type": "number"
      },
      "TIMEOUT": {
        "!type": "number"
      },
      "code": {
        "!type": "number"
      },
      "message": {
        "!type": "string"
      }
    },
    "RTCIdentityProviderRegistrar": {
      "register": {
        "!type": "fn(idp: RTCIdentityProvider)"
      },
      "idp": {
        "!type": "RTCIdentityProvider"
      },
      "generateAssertion": {
        "!type": "fn(contents: string, origin: string, usernameHint?: string) -> +Promise[value=RTCIdentityAssertionResult]"
      },
      "validateAssertion": {
        "!type": "fn(assertion: string, origin: string) -> +Promise[value=RTCIdentityValidationResult]"
      }
    },
    "SVGAnimatedPathData": {
      "pathSegList": {
        "!type": "SVGPathSegList"
      },
      "animatedPathSegList": {
        "!type": "SVGPathSegList"
      }
    },
    "SVGAnimatedPoints": {
      "points": {
        "!type": "SVGPointList"
      },
      "animatedPoints": {
        "!type": "SVGPointList"
      }
    },
    "SVGFilterPrimitiveStandardAttributes": {
      "x": {
        "!type": "SVGAnimatedLength"
      },
      "y": {
        "!type": "SVGAnimatedLength"
      },
      "width": {
        "!type": "SVGAnimatedLength"
      },
      "height": {
        "!type": "SVGAnimatedLength"
      },
      "result": {
        "!type": "SVGAnimatedString"
      }
    },
    "SVGFitToViewBox": {
      "viewBox": {
        "!type": "SVGAnimatedRect"
      },
      "preserveAspectRatio": {
        "!type": "SVGAnimatedPreserveAspectRatio"
      }
    },
    "SVGTests": {
      "requiredFeatures": {
        "!type": "SVGStringList"
      },
      "requiredExtensions": {
        "!type": "SVGStringList"
      },
      "systemLanguage": {
        "!type": "SVGStringList"
      },
      "hasExtension": {
        "!type": "fn(extension: string) -> bool"
      }
    },
    "SVGURIReference": {
      "href": {
        "!type": "SVGAnimatedString"
      }
    },
    "ScrollBoxObject": {
      "scrollTo": {
        "!type": "fn(x: number, y: number)"
      },
      "scrollBy": {
        "!type": "fn(dx: number, dy: number)"
      },
      "scrollByLine": {
        "!type": "fn(dlines: number)"
      },
      "scrollByIndex": {
        "!type": "fn(dindexes: number)"
      },
      "scrollToLine": {
        "!type": "fn(line: number)"
      },
      "scrollToElement": {
        "!type": "fn(child: Element)"
      },
      "scrollToIndex": {
        "!type": "fn(index: number)"
      },
      "positionX": {
        "!type": "number"
      },
      "positionY": {
        "!type": "number"
      },
      "scrolledWidth": {
        "!type": "number"
      },
      "scrolledHeight": {
        "!type": "number"
      },
      "getPosition": {
        "!type": "fn(x: object, y: object)"
      },
      "getScrolledSize": {
        "!type": "fn(width: object, height: object)"
      },
      "ensureElementIsVisible": {
        "!type": "fn(child: Element)"
      },
      "ensureIndexIsVisible": {
        "!type": "fn(index: number)"
      },
      "ensureLineIsVisible": {
        "!type": "fn(line: number)"
      }
    },
    "SEManager": {
      "getSEReaders": {
        "!type": "fn() -> +Promise"
      }
    },
    "TreeBoxObject": {
      "columns": {
        "!type": "TreeColumns"
      },
      "view": {
        "!type": "MozTreeView"
      },
      "focused": {
        "!type": "bool"
      },
      "treeBody": {
        "!type": "Element"
      },
      "rowHeight": {
        "!type": "number"
      },
      "rowWidth": {
        "!type": "number"
      },
      "horizontalPosition": {
        "!type": "number"
      },
      "selectionRegion": {
        "!type": "nsIScriptableRegion"
      },
      "getFirstVisibleRow": {
        "!type": "fn() -> number"
      },
      "getLastVisibleRow": {
        "!type": "fn() -> number"
      },
      "getPageLength": {
        "!type": "fn() -> number"
      },
      "ensureRowIsVisible": {
        "!type": "fn(index: number)"
      },
      "ensureCellIsVisible": {
        "!type": "fn(row: number, col: TreeColumn)"
      },
      "scrollToRow": {
        "!type": "fn(index: number)"
      },
      "scrollByLines": {
        "!type": "fn(numLines: number)"
      },
      "scrollByPages": {
        "!type": "fn(numPages: number)"
      },
      "scrollToCell": {
        "!type": "fn(row: number, col: TreeColumn)"
      },
      "scrollToColumn": {
        "!type": "fn(col: TreeColumn)"
      },
      "scrollToHorizontalPosition": {
        "!type": "fn(horizontalPosition: number)"
      },
      "invalidate": {
        "!type": "fn()"
      },
      "invalidateColumn": {
        "!type": "fn(col: TreeColumn)"
      },
      "invalidateRow": {
        "!type": "fn(index: number)"
      },
      "invalidateCell": {
        "!type": "fn(row: number, col: TreeColumn)"
      },
      "invalidateRange": {
        "!type": "fn(startIndex: number, endIndex: number)"
      },
      "invalidateColumnRange": {
        "!type": "fn(startIndex: number, endIndex: number, col: TreeColumn)"
      },
      "getRowAt": {
        "!type": "fn(x: number, y: number) -> number"
      },
      "getCellAt": {
        "!type": "fn(x: number, y: number) -> TreeCellInfo"
      },
      "getCoordsForCellItem": {
        "!type": "fn(row: number, col: TreeColumn, element: string) -> DOMRect"
      },
      "isCellCropped": {
        "!type": "fn(row: number, col: TreeColumn) -> bool"
      },
      "rowCountChanged": {
        "!type": "fn(index: number, count: number)"
      },
      "beginUpdateBatch": {
        "!type": "fn()"
      },
      "endUpdateBatch": {
        "!type": "fn()"
      },
      "clearStyleAndImageCaches": {
        "!type": "fn()"
      }
    },
    "URLUtils": {
      "href": {
        "!type": "string"
      },
      "origin": {
        "!type": "string"
      },
      "protocol": {
        "!type": "string"
      },
      "username": {
        "!type": "string"
      },
      "password": {
        "!type": "string"
      },
      "host": {
        "!type": "string"
      },
      "hostname": {
        "!type": "string"
      },
      "port": {
        "!type": "string"
      },
      "pathname": {
        "!type": "string"
      },
      "search": {
        "!type": "string"
      },
      "hash": {
        "!type": "string"
      }
    },
    "URLUtilsSearchParams": {
      "searchParams": {
        "!type": "URLSearchParams"
      }
    },
    "URLUtilsReadOnly": {
      "href": {
        "!type": "string"
      },
      "protocol": {
        "!type": "string"
      },
      "host": {
        "!type": "string"
      },
      "hostname": {
        "!type": "string"
      },
      "port": {
        "!type": "string"
      },
      "pathname": {
        "!type": "string"
      },
      "search": {
        "!type": "string"
      },
      "hash": {
        "!type": "string"
      },
      "origin": {
        "!type": "string"
      }
    },
    "WebGLExtensionCompressedTextureS3TC": {
      "COMPRESSED_RGB_S3TC_DXT1_EXT": {
        "!type": "GLenum"
      },
      "COMPRESSED_RGBA_S3TC_DXT1_EXT": {
        "!type": "GLenum"
      },
      "COMPRESSED_RGBA_S3TC_DXT3_EXT": {
        "!type": "GLenum"
      },
      "COMPRESSED_RGBA_S3TC_DXT5_EXT": {
        "!type": "GLenum"
      }
    },
    "WebGLExtensionCompressedTextureATC": {
      "COMPRESSED_RGB_ATC_WEBGL": {
        "!type": "GLenum"
      },
      "COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL": {
        "!type": "GLenum"
      },
      "COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL": {
        "!type": "GLenum"
      }
    },
    "WebGLExtensionCompressedTextureETC1": {
      "COMPRESSED_RGB_ETC1_WEBGL": {
        "!type": "GLenum"
      }
    },
    "WebGLExtensionCompressedTexturePVRTC": {
      "COMPRESSED_RGB_PVRTC_4BPPV1_IMG": {
        "!type": "GLenum"
      },
      "COMPRESSED_RGB_PVRTC_2BPPV1_IMG": {
        "!type": "GLenum"
      },
      "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG": {
        "!type": "GLenum"
      },
      "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG": {
        "!type": "GLenum"
      }
    },
    "WebGLExtensionDebugRendererInfo": {
      "UNMASKED_VENDOR_WEBGL": {
        "!type": "GLenum"
      },
      "UNMASKED_RENDERER_WEBGL": {
        "!type": "GLenum"
      }
    },
    "WebGLExtensionDebugShaders": {
      "getTranslatedShaderSource": {
        "!type": "fn(shader: WebGLShader) -> string"
      }
    },
    "WebGLExtensionDepthTexture": {
      "UNSIGNED_INT_24_8_WEBGL": {
        "!type": "GLenum"
      }
    },
    "WebGLExtensionElementIndexUint": {},
    "WebGLExtensionFragDepth": {},
    "WebGLExtensionLoseContext": {
      "loseContext": {
        "!type": "fn()"
      },
      "restoreContext": {
        "!type": "fn()"
      }
    },
    "WebGLExtensionTextureFilterAnisotropic": {
      "TEXTURE_MAX_ANISOTROPY_EXT": {
        "!type": "GLenum"
      },
      "MAX_TEXTURE_MAX_ANISOTROPY_EXT": {
        "!type": "GLenum"
      }
    },
    "WebGLExtensionSRGB": {
      "SRGB_EXT": {
        "!type": "GLenum"
      },
      "SRGB_ALPHA_EXT": {
        "!type": "GLenum"
      },
      "SRGB8_ALPHA8_EXT": {
        "!type": "GLenum"
      },
      "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT": {
        "!type": "GLenum"
      }
    },
    "WebGLExtensionStandardDerivatives": {
      "FRAGMENT_SHADER_DERIVATIVE_HINT_OES": {
        "!type": "GLenum"
      }
    },
    "WebGLExtensionTextureFloat": {},
    "WebGLExtensionDrawBuffers": {
      "COLOR_ATTACHMENT0_WEBGL": {
        "!type": "GLenum"
      },
      "COLOR_ATTACHMENT1_WEBGL": {
        "!type": "GLenum"
      },
      "COLOR_ATTACHMENT2_WEBGL": {
        "!type": "GLenum"
      },
      "COLOR_ATTACHMENT3_WEBGL": {
        "!type": "GLenum"
      },
      "COLOR_ATTACHMENT4_WEBGL": {
        "!type": "GLenum"
      },
      "COLOR_ATTACHMENT5_WEBGL": {
        "!type": "GLenum"
      },
      "COLOR_ATTACHMENT6_WEBGL": {
        "!type": "GLenum"
      },
      "COLOR_ATTACHMENT7_WEBGL": {
        "!type": "GLenum"
      },
      "COLOR_ATTACHMENT8_WEBGL": {
        "!type": "GLenum"
      },
      "COLOR_ATTACHMENT9_WEBGL": {
        "!type": "GLenum"
      },
      "COLOR_ATTACHMENT10_WEBGL": {
        "!type": "GLenum"
      },
      "COLOR_ATTACHMENT11_WEBGL": {
        "!type": "GLenum"
      },
      "COLOR_ATTACHMENT12_WEBGL": {
        "!type": "GLenum"
      },
      "COLOR_ATTACHMENT13_WEBGL": {
        "!type": "GLenum"
      },
      "COLOR_ATTACHMENT14_WEBGL": {
        "!type": "GLenum"
      },
      "COLOR_ATTACHMENT15_WEBGL": {
        "!type": "GLenum"
      },
      "DRAW_BUFFER0_WEBGL": {
        "!type": "GLenum"
      },
      "DRAW_BUFFER1_WEBGL": {
        "!type": "GLenum"
      },
      "DRAW_BUFFER2_WEBGL": {
        "!type": "GLenum"
      },
      "DRAW_BUFFER3_WEBGL": {
        "!type": "GLenum"
      },
      "DRAW_BUFFER4_WEBGL": {
        "!type": "GLenum"
      },
      "DRAW_BUFFER5_WEBGL": {
        "!type": "GLenum"
      },
      "DRAW_BUFFER6_WEBGL": {
        "!type": "GLenum"
      },
      "DRAW_BUFFER7_WEBGL": {
        "!type": "GLenum"
      },
      "DRAW_BUFFER8_WEBGL": {
        "!type": "GLenum"
      },
      "DRAW_BUFFER9_WEBGL": {
        "!type": "GLenum"
      },
      "DRAW_BUFFER10_WEBGL": {
        "!type": "GLenum"
      },
      "DRAW_BUFFER11_WEBGL": {
        "!type": "GLenum"
      },
      "DRAW_BUFFER12_WEBGL": {
        "!type": "GLenum"
      },
      "DRAW_BUFFER13_WEBGL": {
        "!type": "GLenum"
      },
      "DRAW_BUFFER14_WEBGL": {
        "!type": "GLenum"
      },
      "DRAW_BUFFER15_WEBGL": {
        "!type": "GLenum"
      },
      "MAX_COLOR_ATTACHMENTS_WEBGL": {
        "!type": "GLenum"
      },
      "MAX_DRAW_BUFFERS_WEBGL": {
        "!type": "GLenum"
      },
      "drawBuffersWEBGL": {
        "!type": "fn(buffers: [GLenum])"
      }
    },
    "WebGLExtensionTextureFloatLinear": {},
    "WebGLExtensionShaderTextureLod": {},
    "WebGLExtensionTextureHalfFloat": {
      "HALF_FLOAT_OES": {
        "!type": "GLenum"
      }
    },
    "WebGLExtensionTextureHalfFloatLinear": {},
    "WebGLExtensionColorBufferFloat": {
      "RGBA32F_EXT": {
        "!type": "GLenum"
      },
      "RGB32F_EXT": {
        "!type": "GLenum"
      },
      "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT": {
        "!type": "GLenum"
      },
      "UNSIGNED_NORMALIZED_EXT": {
        "!type": "GLenum"
      }
    },
    "WebGLExtensionColorBufferHalfFloat": {
      "RGBA16F_EXT": {
        "!type": "GLenum"
      },
      "RGB16F_EXT": {
        "!type": "GLenum"
      },
      "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT": {
        "!type": "GLenum"
      },
      "UNSIGNED_NORMALIZED_EXT": {
        "!type": "GLenum"
      }
    },
    "WebGLExtensionVertexArray": {
      "VERTEX_ARRAY_BINDING_OES": {
        "!type": "GLenum"
      },
      "createVertexArrayOES": {
        "!type": "fn() -> WebGLVertexArray"
      },
      "deleteVertexArrayOES": {
        "!type": "fn(arrayObject: WebGLVertexArray)"
      },
      "isVertexArrayOES": {
        "!type": "fn(arrayObject: WebGLVertexArray) -> GLboolean"
      },
      "bindVertexArrayOES": {
        "!type": "fn(arrayObject: WebGLVertexArray)"
      }
    },
    "WebGLExtensionInstancedArrays": {
      "VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE": {
        "!type": "GLenum"
      },
      "drawArraysInstancedANGLE": {
        "!type": "fn(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei)"
      },
      "drawElementsInstancedANGLE": {
        "!type": "fn(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr, primcount: GLsizei)"
      },
      "vertexAttribDivisorANGLE": {
        "!type": "fn(index: GLuint, divisor: GLuint)"
      }
    },
    "WebGLExtensionBlendMinMax": {
      "MIN_EXT": {
        "!type": "GLenum"
      },
      "MAX_EXT": {
        "!type": "GLenum"
      }
    },
    "WindowTimers": {
      "setTimeout": {
        "!type": "fn(handler: Function, timeout?: number, arguments: ?) -> number"
      },
      "clearTimeout": {
        "!type": "fn(handle?: number)"
      },
      "setInterval": {
        "!type": "fn(handler: Function, timeout?: number, arguments: ?) -> number"
      },
      "clearInterval": {
        "!type": "fn(handle?: number)"
      }
    },
    "WindowBase64": {
      "btoa": {
        "!type": "fn(btoa: string) -> string"
      },
      "atob": {
        "!type": "fn(atob: string) -> string"
      }
    },
    "WindowSessionStorage": {
      "sessionStorage": {
        "!type": "Storage"
      }
    },
    "WindowLocalStorage": {
      "localStorage": {
        "!type": "Storage"
      }
    },
    "SpeechSynthesisGetter": {
      "speechSynthesis": {
        "!type": "SpeechSynthesis"
      }
    },
    "WindowModal": {
      "dialogArguments": {
        "!type": "?"
      },
      "returnValue": {
        "!type": "?"
      }
    }
  },
  "AVInputPort": {},
  "AlarmsManager": {
    "getAll": {
      "!type": "fn() -> DOMRequest"
    },
    "add": {
      "!type": "fn(date: ?, respectTimezone: string, data?: ?) -> DOMRequest"
    },
    "remove": {
      "!type": "fn(id: number)"
    }
  },
  "AnalyserNode": {
    "getFloatFrequencyData": {
      "!type": "fn(array: Float32Array)"
    },
    "getByteFrequencyData": {
      "!type": "fn(array: Uint8Array)"
    },
    "getFloatTimeDomainData": {
      "!type": "fn(array: Float32Array)"
    },
    "getByteTimeDomainData": {
      "!type": "fn(array: Uint8Array)"
    },
    "fftSize": {
      "!type": "number"
    },
    "frequencyBinCount": {
      "!type": "number"
    },
    "minDecibels": {
      "!type": "number"
    },
    "maxDecibels": {
      "!type": "number"
    },
    "smoothingTimeConstant": {
      "!type": "number"
    },
    "passThrough": {
      "!type": "bool"
    }
  },
  "Animation": {
    "effect": {
      "!type": "AnimationEffectReadonly"
    },
    "timeline": {
      "!type": "AnimationTimeline"
    },
    "startTime": {
      "!type": "number"
    },
    "currentTime": {
      "!type": "number"
    },
    "playbackRate": {
      "!type": "number"
    },
    "playState": {
      "!type": "AnimationPlayState"
    },
    "ready": {
      "!type": "+Promise[value=Animation]"
    },
    "finished": {
      "!type": "+Promise[value=Animation]"
    },
    "finish": {
      "!type": "fn()"
    },
    "play": {
      "!type": "fn()"
    },
    "pause": {
      "!type": "fn()"
    },
    "isRunningOnCompositor": {
      "!type": "bool"
    }
  },
  "AnimationEffect": {
    "name": {
      "!type": "string"
    }
  },
  "AnimationEffectReadonly": {},
  "AnimationEvent": {
    "!type": "fn(type: string, eventInitDict?: AnimationEventInit)",
    "prototype": {
      "animationName": {
        "!type": "string"
      },
      "elapsedTime": {
        "!type": "number"
      },
      "pseudoElement": {
        "!type": "string"
      }
    }
  },
  "AnimationPlayer": {
    "source": {
      "!type": "Animation"
    },
    "timeline": {
      "!type": "AnimationTimeline"
    },
    "startTime": {
      "!type": "number"
    },
    "currentTime": {
      "!type": "number"
    },
    "playState": {
      "!type": "AnimationPlayState"
    },
    "ready": {
      "!type": "+Promise[value=AnimationPlayer]"
    },
    "play": {
      "!type": "fn()"
    },
    "pause": {
      "!type": "fn()"
    },
    "isRunningOnCompositor": {
      "!type": "bool"
    }
  },
  "AnimationTimeline": {
    "currentTime": {
      "!type": "number"
    }
  },
  "ArchiveReader": {
    "!type": "fn(blob: Blob, options?: ArchiveReaderOptions)",
    "prototype": {
      "getFilenames": {
        "!type": "fn() -> ArchiveRequest"
      },
      "getFile": {
        "!type": "fn(filename: string) -> ArchiveRequest"
      },
      "getFiles": {
        "!type": "fn() -> ArchiveRequest"
      }
    }
  },
  "ArchiveRequest": {
    "reader": {
      "!type": "ArchiveReader"
    }
  },
  "Attr": {
    "localName": {
      "!type": "string"
    },
    "value": {
      "!type": "string"
    },
    "name": {
      "!type": "string"
    },
    "namespaceURI": {
      "!type": "string"
    },
    "prefix": {
      "!type": "string"
    },
    "specified": {
      "!type": "bool"
    },
    "ownerElement": {
      "!type": "Element"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "AudioBuffer": {
    "sampleRate": {
      "!type": "number"
    },
    "length": {
      "!type": "number"
    },
    "duration": {
      "!type": "number"
    },
    "numberOfChannels": {
      "!type": "number"
    },
    "getChannelData": {
      "!type": "fn(channel: number) -> Float32Array"
    },
    "copyFromChannel": {
      "!type": "fn(destination: Float32Array, channelNumber: number, startInChannel?: number)"
    },
    "copyToChannel": {
      "!type": "fn(source: Float32Array, channelNumber: number, startInChannel?: number)"
    }
  },
  "AudioBufferSourceNode": {
    "buffer": {
      "!type": "AudioBuffer"
    },
    "playbackRate": {
      "!type": "AudioParam"
    },
    "detune": {
      "!type": "AudioParam"
    },
    "loop": {
      "!type": "bool"
    },
    "loopStart": {
      "!type": "number"
    },
    "loopEnd": {
      "!type": "number"
    },
    "start": {
      "!type": "fn(when?: number, grainOffset?: number, grainDuration?: number)"
    },
    "stop": {
      "!type": "fn(when?: number)"
    },
    "onended": {
      "!type": "fn(+Event)"
    },
    "passThrough": {
      "!type": "bool"
    }
  },
  "AudioChannelManager": {
    "headphones": {
      "!type": "bool"
    },
    "onheadphoneschange": {
      "!type": "fn(+Event)"
    },
    "volumeControlChannel": {
      "!type": "string"
    }
  },
  "AudioContext": {
    "!type": "fn(audioChannelType: AudioChannel)",
    "prototype": {
      "destination": {
        "!type": "AudioDestinationNode"
      },
      "sampleRate": {
        "!type": "number"
      },
      "currentTime": {
        "!type": "number"
      },
      "listener": {
        "!type": "AudioListener"
      },
      "state": {
        "!type": "AudioContextState"
      },
      "suspend": {
        "!type": "fn() -> +Promise[value=void]"
      },
      "resume": {
        "!type": "fn() -> +Promise[value=void]"
      },
      "close": {
        "!type": "fn() -> +Promise[value=void]"
      },
      "onstatechange": {
        "!type": "fn(+Event)"
      },
      "createBuffer": {
        "!type": "fn(numberOfChannels: number, length: number, sampleRate: number) -> AudioBuffer"
      },
      "decodeAudioData": {
        "!type": "fn(audioData: ArrayBuffer, successCallback?: DecodeSuccessCallback, errorCallback?: DecodeErrorCallback) -> +Promise[value=AudioBuffer]"
      },
      "createBufferSource": {
        "!type": "fn() -> AudioBufferSourceNode"
      },
      "createMediaStreamDestination": {
        "!type": "fn() -> MediaStreamAudioDestinationNode"
      },
      "createScriptProcessor": {
        "!type": "fn(bufferSize?: number, numberOfInputChannels?: number, numberOfOutputChannels?: number) -> ScriptProcessorNode"
      },
      "createStereoPanner": {
        "!type": "fn() -> StereoPannerNode"
      },
      "createAnalyser": {
        "!type": "fn() -> AnalyserNode"
      },
      "createMediaElementSource": {
        "!type": "fn(mediaElement: HTMLMediaElement) -> MediaElementAudioSourceNode"
      },
      "createMediaStreamSource": {
        "!type": "fn(mediaStream: MediaStream) -> MediaStreamAudioSourceNode"
      },
      "createGain": {
        "!type": "fn() -> GainNode"
      },
      "createDelay": {
        "!type": "fn(maxDelayTime?: number) -> DelayNode"
      },
      "createBiquadFilter": {
        "!type": "fn() -> BiquadFilterNode"
      },
      "createWaveShaper": {
        "!type": "fn() -> WaveShaperNode"
      },
      "createPanner": {
        "!type": "fn() -> PannerNode"
      },
      "createConvolver": {
        "!type": "fn() -> ConvolverNode"
      },
      "createChannelSplitter": {
        "!type": "fn(numberOfOutputs?: number) -> ChannelSplitterNode"
      },
      "createChannelMerger": {
        "!type": "fn(numberOfInputs?: number) -> ChannelMergerNode"
      },
      "createDynamicsCompressor": {
        "!type": "fn() -> DynamicsCompressorNode"
      },
      "createOscillator": {
        "!type": "fn() -> OscillatorNode"
      },
      "createPeriodicWave": {
        "!type": "fn(real: Float32Array, imag: Float32Array) -> PeriodicWave"
      },
      "onmozinterruptbegin": {
        "!type": "fn(+Event)"
      },
      "onmozinterruptend": {
        "!type": "fn(+Event)"
      },
      "testAudioChannelInAudioNodeStream": {
        "!type": "fn() -> AudioChannel"
      }
    }
  },
  "AudioDestinationNode": {
    "maxChannelCount": {
      "!type": "number"
    }
  },
  "AudioListener": {
    "dopplerFactor": {
      "!type": "number"
    },
    "speedOfSound": {
      "!type": "number"
    },
    "setPosition": {
      "!type": "fn(x: number, y: number, z: number)"
    },
    "setOrientation": {
      "!type": "fn(x: number, y: number, z: number, xUp: number, yUp: number, zUp: number)"
    },
    "setVelocity": {
      "!type": "fn(x: number, y: number, z: number)"
    }
  },
  "AudioNode": {
    "connect": {
      "!type": "fn(destination: AudioNode, output?: number, input?: number)"
    },
    "disconnect": {
      "!type": "fn(output?: number)"
    },
    "context": {
      "!type": "AudioContext"
    },
    "numberOfInputs": {
      "!type": "number"
    },
    "numberOfOutputs": {
      "!type": "number"
    },
    "channelCount": {
      "!type": "number"
    },
    "channelCountMode": {
      "!type": "ChannelCountMode"
    },
    "channelInterpretation": {
      "!type": "ChannelInterpretation"
    },
    "id": {
      "!type": "number"
    }
  },
  "AudioParam": {
    "value": {
      "!type": "number"
    },
    "defaultValue": {
      "!type": "number"
    },
    "setValueAtTime": {
      "!type": "fn(value: number, startTime: number)"
    },
    "linearRampToValueAtTime": {
      "!type": "fn(value: number, endTime: number)"
    },
    "exponentialRampToValueAtTime": {
      "!type": "fn(value: number, endTime: number)"
    },
    "setTargetAtTime": {
      "!type": "fn(target: number, startTime: number, timeConstant: number)"
    },
    "setValueCurveAtTime": {
      "!type": "fn(values: Float32Array, startTime: number, duration: number)"
    },
    "cancelScheduledValues": {
      "!type": "fn(startTime: number)"
    },
    "parentNodeId": {
      "!type": "number"
    },
    "name": {
      "!type": "string"
    }
  },
  "AudioProcessingEvent": {
    "playbackTime": {
      "!type": "number"
    },
    "inputBuffer": {
      "!type": "AudioBuffer"
    },
    "outputBuffer": {
      "!type": "AudioBuffer"
    }
  },
  "AudioStreamTrack": {},
  "AudioTrack": {
    "id": {
      "!type": "string"
    },
    "kind": {
      "!type": "string"
    },
    "label": {
      "!type": "string"
    },
    "language": {
      "!type": "string"
    },
    "enabled": {
      "!type": "bool"
    }
  },
  "AudioTrackList": {
    "length": {
      "!type": "number"
    },
    "getTrackById": {
      "!type": "fn(id: string) -> AudioTrack"
    },
    "onchange": {
      "!type": "fn(+Event)"
    },
    "onaddtrack": {
      "!type": "fn(+Event)"
    },
    "onremovetrack": {
      "!type": "fn(+Event)"
    }
  },
  "AutocompleteErrorEvent": {
    "!type": "fn(type: string, eventInitDict?: AutocompleteErrorEventInit)",
    "prototype": {
      "reason": {
        "!type": "AutoCompleteErrorReason"
      }
    }
  },
  "BarProp": {
    "visible": {
      "!type": "bool"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "BatteryManager": {
    "charging": {
      "!type": "bool"
    },
    "chargingTime": {
      "!type": "number"
    },
    "dischargingTime": {
      "!type": "number"
    },
    "level": {
      "!type": "number"
    },
    "onchargingchange": {
      "!type": "fn(+Event)"
    },
    "onchargingtimechange": {
      "!type": "fn(+Event)"
    },
    "ondischargingtimechange": {
      "!type": "fn(+Event)"
    },
    "onlevelchange": {
      "!type": "fn(+Event)"
    }
  },
  "BeforeAfterKeyboardEvent": {
    "!type": "fn(typeArg: string, eventInitDict?: BeforeAfterKeyboardEventInit)",
    "prototype": {
      "embeddedCancelled": {
        "!type": "bool"
      }
    }
  },
  "BeforeUnloadEvent": {
    "returnValue": {
      "!type": "string"
    }
  },
  "BiquadFilterNode": {
    "type": {
      "!type": "BiquadFilterType"
    },
    "frequency": {
      "!type": "AudioParam"
    },
    "detune": {
      "!type": "AudioParam"
    },
    "Q": {
      "!type": "AudioParam"
    },
    "gain": {
      "!type": "AudioParam"
    },
    "getFrequencyResponse": {
      "!type": "fn(frequencyHz: Float32Array, magResponse: Float32Array, phaseResponse: Float32Array)"
    },
    "passThrough": {
      "!type": "bool"
    }
  },
  "Blob": {
    "!type": "fn(blobParts: [?], options?: BlobPropertyBag)",
    "prototype": {
      "size": {
        "!type": "number"
      },
      "type": {
        "!type": "string"
      },
      "slice": {
        "!type": "fn(start?: number, end?: number, contentType?: string) -> Blob"
      }
    }
  },
  "BlobEvent": {
    "!type": "fn(type: string, eventInitDict?: BlobEventInit)",
    "prototype": {
      "data": {
        "!type": "Blob"
      }
    }
  },
  "BluetoothAdapter": {
    "state": {
      "!type": "BluetoothAdapterState"
    },
    "address": {
      "!type": "string"
    },
    "name": {
      "!type": "string"
    },
    "discoverable": {
      "!type": "bool"
    },
    "discovering": {
      "!type": "bool"
    },
    "pairingReqs": {
      "!type": "BluetoothPairingListener"
    },
    "onattributechanged": {
      "!type": "fn(+Event)"
    },
    "ondevicepaired": {
      "!type": "fn(+Event)"
    },
    "ondeviceunpaired": {
      "!type": "fn(+Event)"
    },
    "onpairingaborted": {
      "!type": "fn(+Event)"
    },
    "ona2dpstatuschanged": {
      "!type": "fn(+Event)"
    },
    "onhfpstatuschanged": {
      "!type": "fn(+Event)"
    },
    "onscostatuschanged": {
      "!type": "fn(+Event)"
    },
    "onrequestmediaplaystatus": {
      "!type": "fn(+Event)"
    },
    "enable": {
      "!type": "fn() -> +Promise[value=void]"
    },
    "disable": {
      "!type": "fn() -> +Promise[value=void]"
    },
    "setName": {
      "!type": "fn(name: string) -> +Promise[value=void]"
    },
    "setDiscoverable": {
      "!type": "fn(discoverable: bool) -> +Promise[value=void]"
    },
    "startDiscovery": {
      "!type": "fn() -> +Promise[value=BluetoothDiscoveryHandle]"
    },
    "stopDiscovery": {
      "!type": "fn() -> +Promise[value=void]"
    },
    "pair": {
      "!type": "fn(deviceAddress: string) -> +Promise[value=void]"
    },
    "unpair": {
      "!type": "fn(deviceAddress: string) -> +Promise[value=void]"
    },
    "getPairedDevices": {
      "!type": "fn() -> [BluetoothDevice]"
    },
    "getConnectedDevices": {
      "!type": "fn(serviceUuid: number) -> DOMRequest"
    },
    "connect": {
      "!type": "fn(device: BluetoothDevice, serviceUuid?: number) -> DOMRequest"
    },
    "disconnect": {
      "!type": "fn(device: BluetoothDevice, serviceUuid?: number) -> DOMRequest"
    },
    "sendFile": {
      "!type": "fn(deviceAddress: string, blob: Blob) -> DOMRequest"
    },
    "stopSendingFile": {
      "!type": "fn(deviceAddress: string) -> DOMRequest"
    },
    "confirmReceivingFile": {
      "!type": "fn(deviceAddress: string, confirmation: bool) -> DOMRequest"
    },
    "connectSco": {
      "!type": "fn() -> DOMRequest"
    },
    "disconnectSco": {
      "!type": "fn() -> DOMRequest"
    },
    "isScoConnected": {
      "!type": "fn() -> DOMRequest"
    },
    "answerWaitingCall": {
      "!type": "fn() -> DOMRequest"
    },
    "ignoreWaitingCall": {
      "!type": "fn() -> DOMRequest"
    },
    "toggleCalls": {
      "!type": "fn() -> DOMRequest"
    },
    "sendMediaMetaData": {
      "!type": "fn(mediaMetaData?: MediaMetaData) -> DOMRequest"
    },
    "sendMediaPlayStatus": {
      "!type": "fn(mediaPlayStatus?: MediaPlayStatus) -> DOMRequest"
    }
  },
  "BluetoothAdapterEvent": {
    "!type": "fn(type: string, eventInitDict?: BluetoothAdapterEventInit)",
    "prototype": {
      "adapter": {
        "!type": "BluetoothAdapter"
      },
      "address": {
        "!type": "string"
      }
    }
  },
  "BluetoothAttributeEvent": {
    "!type": "fn(type: string, eventInitDict?: BluetoothAttributeEventInit)",
    "prototype": {
      "attrs": {
        "!type": "[string]"
      }
    }
  },
  "BluetoothClassOfDevice": {
    "LIMITED_DISCOVERABILITY": {
      "!type": "number"
    },
    "POSITIONING": {
      "!type": "number"
    },
    "NETWORKING": {
      "!type": "number"
    },
    "RENDERING": {
      "!type": "number"
    },
    "CAPTURING": {
      "!type": "number"
    },
    "OBJECT_TRANSFER": {
      "!type": "number"
    },
    "AUDIO": {
      "!type": "number"
    },
    "TELEPHONY": {
      "!type": "number"
    },
    "INFORMATION": {
      "!type": "number"
    },
    "MISC": {
      "!type": "number"
    },
    "COMPUTER": {
      "!type": "number"
    },
    "PHONE": {
      "!type": "number"
    },
    "NETWORK": {
      "!type": "number"
    },
    "AUDIO_VIDEO": {
      "!type": "number"
    },
    "PERIPHERAL": {
      "!type": "number"
    },
    "IMAGING": {
      "!type": "number"
    },
    "WEARABLE": {
      "!type": "number"
    },
    "TOY": {
      "!type": "number"
    },
    "HEALTH": {
      "!type": "number"
    },
    "UNCATEGORIZED": {
      "!type": "number"
    },
    "majorServiceClass": {
      "!type": "number"
    },
    "majorDeviceClass": {
      "!type": "number"
    },
    "minorDeviceClass": {
      "!type": "number"
    }
  },
  "BluetoothDevice": {
    "address": {
      "!type": "string"
    },
    "cod": {
      "!type": "BluetoothClassOfDevice"
    },
    "name": {
      "!type": "string"
    },
    "paired": {
      "!type": "bool"
    },
    "type": {
      "!type": "BluetoothDeviceType"
    },
    "gatt": {
      "!type": "BluetoothGatt"
    },
    "uuids": {
      "!type": "[string]"
    },
    "onattributechanged": {
      "!type": "fn(+Event)"
    },
    "fetchUuids": {
      "!type": "fn() -> +Promise"
    }
  },
  "BluetoothDeviceEvent": {
    "!type": "fn(type: string, eventInitDict?: BluetoothDeviceEventInit)",
    "prototype": {
      "device": {
        "!type": "BluetoothDevice"
      },
      "address": {
        "!type": "string"
      }
    }
  },
  "BluetoothDiscoveryHandle": {
    "ondevicefound": {
      "!type": "fn(+Event)"
    }
  },
  "BluetoothDiscoveryStateChangedEvent": {
    "!type": "fn(type: string, eventInitDict?: BluetoothDiscoveryStateChangedEventInit)",
    "prototype": {
      "discovering": {
        "!type": "bool"
      }
    }
  },
  "BluetoothGatt": {
    "services": {
      "!type": "[BluetoothGattService]"
    },
    "connectionState": {
      "!type": "BluetoothConnectionState"
    },
    "oncharacteristicchanged": {
      "!type": "fn(+Event)"
    },
    "onconnectionstatechanged": {
      "!type": "fn(+Event)"
    },
    "connect": {
      "!type": "fn() -> +Promise[value=void]"
    },
    "disconnect": {
      "!type": "fn() -> +Promise[value=void]"
    },
    "discoverServices": {
      "!type": "fn() -> +Promise[value=void]"
    },
    "readRemoteRssi": {
      "!type": "fn() -> +Promise[value=number]"
    }
  },
  "BluetoothGattCharacteristic": {
    "service": {
      "!type": "BluetoothGattService"
    },
    "descriptors": {
      "!type": "[BluetoothGattDescriptor]"
    },
    "uuid": {
      "!type": "string"
    },
    "instanceId": {
      "!type": "number"
    },
    "value": {
      "!type": "ArrayBuffer"
    },
    "properties": {
      "!type": "GattCharacteristicProperties"
    },
    "readValue": {
      "!type": "fn() -> +Promise[value=ArrayBuffer]"
    },
    "writeValue": {
      "!type": "fn(value: ArrayBuffer) -> +Promise[value=void]"
    },
    "startNotifications": {
      "!type": "fn() -> +Promise[value=void]"
    },
    "stopNotifications": {
      "!type": "fn() -> +Promise[value=void]"
    }
  },
  "BluetoothGattCharacteristicEvent": {
    "!type": "fn(type: string, eventInitDict?: BluetoothGattCharacteristicEventInit)",
    "prototype": {
      "characteristic": {
        "!type": "BluetoothGattCharacteristic"
      }
    }
  },
  "BluetoothGattDescriptor": {
    "characteristic": {
      "!type": "BluetoothGattCharacteristic"
    },
    "uuid": {
      "!type": "string"
    },
    "value": {
      "!type": "ArrayBuffer"
    },
    "readValue": {
      "!type": "fn() -> +Promise[value=ArrayBuffer]"
    },
    "writeValue": {
      "!type": "fn(value: ArrayBuffer) -> +Promise[value=void]"
    }
  },
  "BluetoothGattService": {
    "characteristics": {
      "!type": "[BluetoothGattCharacteristic]"
    },
    "includedServices": {
      "!type": "[BluetoothGattService]"
    },
    "isPrimary": {
      "!type": "bool"
    },
    "uuid": {
      "!type": "string"
    },
    "instanceId": {
      "!type": "number"
    }
  },
  "BluetoothManager": {
    "defaultAdapter": {
      "!type": "BluetoothAdapter"
    },
    "onattributechanged": {
      "!type": "fn(+Event)"
    },
    "onadapteradded": {
      "!type": "fn(+Event)"
    },
    "onadapterremoved": {
      "!type": "fn(+Event)"
    },
    "getAdapters": {
      "!type": "fn() -> [BluetoothAdapter]"
    }
  },
  "BluetoothPairingEvent": {
    "!type": "fn(type: string, eventInitDict?: BluetoothPairingEventInit)",
    "prototype": {
      "deviceName": {
        "!type": "string"
      },
      "handle": {
        "!type": "BluetoothPairingHandle"
      }
    }
  },
  "BluetoothPairingHandle": {
    "passkey": {
      "!type": "string"
    },
    "setPinCode": {
      "!type": "fn(aPinCode: string) -> +Promise[value=void]"
    },
    "accept": {
      "!type": "fn() -> +Promise[value=void]"
    },
    "reject": {
      "!type": "fn() -> +Promise[value=void]"
    }
  },
  "BluetoothPairingListener": {
    "ondisplaypasskeyreq": {
      "!type": "fn(+Event)"
    },
    "onenterpincodereq": {
      "!type": "fn(+Event)"
    },
    "onpairingconfirmationreq": {
      "!type": "fn(+Event)"
    },
    "onpairingconsentreq": {
      "!type": "fn(+Event)"
    }
  },
  "BluetoothStatusChangedEvent": {
    "!type": "fn(type: string, eventInitDict?: BluetoothStatusChangedEventInit)",
    "prototype": {
      "address": {
        "!type": "string"
      },
      "status": {
        "!type": "bool"
      }
    }
  },
  "BoxObject": {
    "element": {
      "!type": "Element"
    },
    "x": {
      "!type": "number"
    },
    "y": {
      "!type": "number"
    },
    "screenX": {
      "!type": "number"
    },
    "screenY": {
      "!type": "number"
    },
    "width": {
      "!type": "number"
    },
    "height": {
      "!type": "number"
    },
    "getPropertyAsSupports": {
      "!type": "fn(propertyName: string) -> nsISupports"
    },
    "setPropertyAsSupports": {
      "!type": "fn(propertyName: string, value: nsISupports)"
    },
    "getProperty": {
      "!type": "fn(propertyName: string) -> string"
    },
    "setProperty": {
      "!type": "fn(propertyName: string, propertyValue: string)"
    },
    "removeProperty": {
      "!type": "fn(propertyName: string)"
    },
    "parentBox": {
      "!type": "Element"
    },
    "firstChild": {
      "!type": "Element"
    },
    "lastChild": {
      "!type": "Element"
    },
    "nextSibling": {
      "!type": "Element"
    },
    "previousSibling": {
      "!type": "Element"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "BroadcastChannel": {
    "!type": "fn(channel: string)",
    "prototype": {
      "name": {
        "!type": "string"
      },
      "postMessage": {
        "!type": "fn(message: ?)"
      },
      "close": {
        "!type": "fn()"
      },
      "onmessage": {
        "!type": "fn(+Event)"
      }
    }
  },
  "BrowserFeedWriter": {
    "!type": "fn()",
    "prototype": {
      "writeContent": {
        "!type": "fn()"
      },
      "close": {
        "!type": "fn()"
      }
    }
  },
  "CDATASection": {},
  "CFStateChangeEvent": {
    "!type": "fn(type: string, eventInitDict?: CFStateChangeEventInit)",
    "prototype": {
      "action": {
        "!type": "number"
      },
      "reason": {
        "!type": "number"
      },
      "number": {
        "!type": "string"
      },
      "timeSeconds": {
        "!type": "number"
      },
      "serviceClass": {
        "!type": "number"
      }
    }
  },
  "CSS": {
    "supports": {
      "!type": "fn(property: string, value: string) -> bool"
    },
    "escape": {
      "!type": "fn(ident: string) -> string"
    }
  },
  "CSS2Properties": {
    "all": {
      "!type": "string"
    },
    "animation": {
      "!type": "string"
    },
    "animationDelay": {
      "!type": "string"
    },
    "animationDirection": {
      "!type": "string"
    },
    "animationDuration": {
      "!type": "string"
    },
    "animationFillMode": {
      "!type": "string"
    },
    "animationIterationCount": {
      "!type": "string"
    },
    "animationName": {
      "!type": "string"
    },
    "animationPlayState": {
      "!type": "string"
    },
    "animationTimingFunction": {
      "!type": "string"
    },
    "background": {
      "!type": "string"
    },
    "backgroundAttachment": {
      "!type": "string"
    },
    "backgroundClip": {
      "!type": "string"
    },
    "backgroundColor": {
      "!type": "string"
    },
    "backgroundImage": {
      "!type": "string"
    },
    "backgroundBlendMode": {
      "!type": "string"
    },
    "backgroundOrigin": {
      "!type": "string"
    },
    "backgroundPosition": {
      "!type": "string"
    },
    "backgroundRepeat": {
      "!type": "string"
    },
    "backgroundSize": {
      "!type": "string"
    },
    "blockSize": {
      "!type": "string"
    },
    "border": {
      "!type": "string"
    },
    "borderBlockEnd": {
      "!type": "string"
    },
    "borderBlockStart": {
      "!type": "string"
    },
    "borderBlockEndColor": {
      "!type": "string"
    },
    "borderBlockEndStyle": {
      "!type": "string"
    },
    "borderBlockEndWidth": {
      "!type": "string"
    },
    "borderBlockStartColor": {
      "!type": "string"
    },
    "borderBlockStartStyle": {
      "!type": "string"
    },
    "borderBlockStartWidth": {
      "!type": "string"
    },
    "borderBottom": {
      "!type": "string"
    },
    "borderBottomColor": {
      "!type": "string"
    },
    "borderBottomStyle": {
      "!type": "string"
    },
    "borderBottomWidth": {
      "!type": "string"
    },
    "borderCollapse": {
      "!type": "string"
    },
    "borderColor": {
      "!type": "string"
    },
    "borderImage": {
      "!type": "string"
    },
    "borderImageSource": {
      "!type": "string"
    },
    "borderImageSlice": {
      "!type": "string"
    },
    "borderImageWidth": {
      "!type": "string"
    },
    "borderImageOutset": {
      "!type": "string"
    },
    "borderImageRepeat": {
      "!type": "string"
    },
    "borderLeft": {
      "!type": "string"
    },
    "borderLeftColor": {
      "!type": "string"
    },
    "borderLeftStyle": {
      "!type": "string"
    },
    "borderLeftWidth": {
      "!type": "string"
    },
    "borderRight": {
      "!type": "string"
    },
    "borderRightColor": {
      "!type": "string"
    },
    "borderRightStyle": {
      "!type": "string"
    },
    "borderRightWidth": {
      "!type": "string"
    },
    "borderSpacing": {
      "!type": "string"
    },
    "borderStyle": {
      "!type": "string"
    },
    "borderTop": {
      "!type": "string"
    },
    "borderTopColor": {
      "!type": "string"
    },
    "borderTopStyle": {
      "!type": "string"
    },
    "borderTopWidth": {
      "!type": "string"
    },
    "borderWidth": {
      "!type": "string"
    },
    "borderRadius": {
      "!type": "string"
    },
    "borderTopLeftRadius": {
      "!type": "string"
    },
    "borderTopRightRadius": {
      "!type": "string"
    },
    "borderBottomRightRadius": {
      "!type": "string"
    },
    "borderBottomLeftRadius": {
      "!type": "string"
    },
    "bottom": {
      "!type": "string"
    },
    "boxDecorationBreak": {
      "!type": "string"
    },
    "boxShadow": {
      "!type": "string"
    },
    "boxSizing": {
      "!type": "string"
    },
    "captionSide": {
      "!type": "string"
    },
    "clear": {
      "!type": "string"
    },
    "clip": {
      "!type": "string"
    },
    "color": {
      "!type": "string"
    },
    "content": {
      "!type": "string"
    },
    "counterIncrement": {
      "!type": "string"
    },
    "counterReset": {
      "!type": "string"
    },
    "cursor": {
      "!type": "string"
    },
    "direction": {
      "!type": "string"
    },
    "display": {
      "!type": "string"
    },
    "emptyCells": {
      "!type": "string"
    },
    "alignContent": {
      "!type": "string"
    },
    "alignItems": {
      "!type": "string"
    },
    "alignSelf": {
      "!type": "string"
    },
    "flex": {
      "!type": "string"
    },
    "flexBasis": {
      "!type": "string"
    },
    "flexDirection": {
      "!type": "string"
    },
    "flexFlow": {
      "!type": "string"
    },
    "flexGrow": {
      "!type": "string"
    },
    "flexShrink": {
      "!type": "string"
    },
    "flexWrap": {
      "!type": "string"
    },
    "order": {
      "!type": "string"
    },
    "justifyContent": {
      "!type": "string"
    },
    "cssFloat": {
      "!type": "string"
    },
    "float": {
      "!type": "string"
    },
    "font": {
      "!type": "string"
    },
    "fontFamily": {
      "!type": "string"
    },
    "fontFeatureSettings": {
      "!type": "string"
    },
    "fontKerning": {
      "!type": "string"
    },
    "fontLanguageOverride": {
      "!type": "string"
    },
    "fontSize": {
      "!type": "string"
    },
    "fontSizeAdjust": {
      "!type": "string"
    },
    "fontStretch": {
      "!type": "string"
    },
    "fontStyle": {
      "!type": "string"
    },
    "fontSynthesis": {
      "!type": "string"
    },
    "fontVariant": {
      "!type": "string"
    },
    "fontVariantAlternates": {
      "!type": "string"
    },
    "fontVariantCaps": {
      "!type": "string"
    },
    "fontVariantEastAsian": {
      "!type": "string"
    },
    "fontVariantLigatures": {
      "!type": "string"
    },
    "fontVariantNumeric": {
      "!type": "string"
    },
    "fontVariantPosition": {
      "!type": "string"
    },
    "fontWeight": {
      "!type": "string"
    },
    "gridAutoFlow": {
      "!type": "string"
    },
    "gridAutoColumns": {
      "!type": "string"
    },
    "gridAutoRows": {
      "!type": "string"
    },
    "gridTemplateAreas": {
      "!type": "string"
    },
    "gridTemplateColumns": {
      "!type": "string"
    },
    "gridTemplateRows": {
      "!type": "string"
    },
    "gridTemplate": {
      "!type": "string"
    },
    "grid": {
      "!type": "string"
    },
    "gridColumnStart": {
      "!type": "string"
    },
    "gridColumnEnd": {
      "!type": "string"
    },
    "gridRowStart": {
      "!type": "string"
    },
    "gridRowEnd": {
      "!type": "string"
    },
    "gridColumn": {
      "!type": "string"
    },
    "gridRow": {
      "!type": "string"
    },
    "gridArea": {
      "!type": "string"
    },
    "height": {
      "!type": "string"
    },
    "imageOrientation": {
      "!type": "string"
    },
    "imeMode": {
      "!type": "string"
    },
    "inlineSize": {
      "!type": "string"
    },
    "left": {
      "!type": "string"
    },
    "letterSpacing": {
      "!type": "string"
    },
    "lineHeight": {
      "!type": "string"
    },
    "listStyle": {
      "!type": "string"
    },
    "listStyleImage": {
      "!type": "string"
    },
    "listStylePosition": {
      "!type": "string"
    },
    "listStyleType": {
      "!type": "string"
    },
    "margin": {
      "!type": "string"
    },
    "marginBlockEnd": {
      "!type": "string"
    },
    "marginBlockStart": {
      "!type": "string"
    },
    "marginBottom": {
      "!type": "string"
    },
    "marginLeft": {
      "!type": "string"
    },
    "marginRight": {
      "!type": "string"
    },
    "marginTop": {
      "!type": "string"
    },
    "markerOffset": {
      "!type": "string"
    },
    "marks": {
      "!type": "string"
    },
    "maxBlockSize": {
      "!type": "string"
    },
    "maxHeight": {
      "!type": "string"
    },
    "maxInlineSize": {
      "!type": "string"
    },
    "maxWidth": {
      "!type": "string"
    },
    "minHeight": {
      "!type": "string"
    },
    "minBlockSize": {
      "!type": "string"
    },
    "minInlineSize": {
      "!type": "string"
    },
    "minWidth": {
      "!type": "string"
    },
    "mixBlendMode": {
      "!type": "string"
    },
    "isolation": {
      "!type": "string"
    },
    "objectFit": {
      "!type": "string"
    },
    "objectPosition": {
      "!type": "string"
    },
    "offsetBlockEnd": {
      "!type": "string"
    },
    "offsetBlockStart": {
      "!type": "string"
    },
    "offsetInlineEnd": {
      "!type": "string"
    },
    "offsetInlineStart": {
      "!type": "string"
    },
    "opacity": {
      "!type": "string"
    },
    "orphans": {
      "!type": "string"
    },
    "outline": {
      "!type": "string"
    },
    "outlineColor": {
      "!type": "string"
    },
    "outlineStyle": {
      "!type": "string"
    },
    "outlineWidth": {
      "!type": "string"
    },
    "outlineOffset": {
      "!type": "string"
    },
    "overflow": {
      "!type": "string"
    },
    "overflowClipBox": {
      "!type": "string"
    },
    "overflowX": {
      "!type": "string"
    },
    "overflowY": {
      "!type": "string"
    },
    "padding": {
      "!type": "string"
    },
    "paddingBlockEnd": {
      "!type": "string"
    },
    "paddingBlockStart": {
      "!type": "string"
    },
    "paddingBottom": {
      "!type": "string"
    },
    "paddingLeft": {
      "!type": "string"
    },
    "paddingRight": {
      "!type": "string"
    },
    "paddingTop": {
      "!type": "string"
    },
    "page": {
      "!type": "string"
    },
    "pageBreakAfter": {
      "!type": "string"
    },
    "pageBreakBefore": {
      "!type": "string"
    },
    "pageBreakInside": {
      "!type": "string"
    },
    "paintOrder": {
      "!type": "string"
    },
    "pointerEvents": {
      "!type": "string"
    },
    "position": {
      "!type": "string"
    },
    "quotes": {
      "!type": "string"
    },
    "resize": {
      "!type": "string"
    },
    "right": {
      "!type": "string"
    },
    "rubyAlign": {
      "!type": "string"
    },
    "rubyPosition": {
      "!type": "string"
    },
    "scrollBehavior": {
      "!type": "string"
    },
    "scrollSnapCoordinate": {
      "!type": "string"
    },
    "scrollSnapDestination": {
      "!type": "string"
    },
    "scrollSnapPointsX": {
      "!type": "string"
    },
    "scrollSnapPointsY": {
      "!type": "string"
    },
    "scrollSnapType": {
      "!type": "string"
    },
    "scrollSnapTypeX": {
      "!type": "string"
    },
    "scrollSnapTypeY": {
      "!type": "string"
    },
    "size": {
      "!type": "string"
    },
    "tableLayout": {
      "!type": "string"
    },
    "textAlign": {
      "!type": "string"
    },
    "textDecoration": {
      "!type": "string"
    },
    "textCombineUpright": {
      "!type": "string"
    },
    "textDecorationColor": {
      "!type": "string"
    },
    "textDecorationLine": {
      "!type": "string"
    },
    "textDecorationStyle": {
      "!type": "string"
    },
    "textIndent": {
      "!type": "string"
    },
    "textOrientation": {
      "!type": "string"
    },
    "textOverflow": {
      "!type": "string"
    },
    "textShadow": {
      "!type": "string"
    },
    "textTransform": {
      "!type": "string"
    },
    "transform": {
      "!type": "string"
    },
    "transformOrigin": {
      "!type": "string"
    },
    "perspectiveOrigin": {
      "!type": "string"
    },
    "perspective": {
      "!type": "string"
    },
    "transformStyle": {
      "!type": "string"
    },
    "backfaceVisibility": {
      "!type": "string"
    },
    "top": {
      "!type": "string"
    },
    "touchAction": {
      "!type": "string"
    },
    "transition": {
      "!type": "string"
    },
    "transitionDelay": {
      "!type": "string"
    },
    "transitionDuration": {
      "!type": "string"
    },
    "transitionProperty": {
      "!type": "string"
    },
    "transitionTimingFunction": {
      "!type": "string"
    },
    "unicodeBidi": {
      "!type": "string"
    },
    "verticalAlign": {
      "!type": "string"
    },
    "visibility": {
      "!type": "string"
    },
    "whiteSpace": {
      "!type": "string"
    },
    "widows": {
      "!type": "string"
    },
    "width": {
      "!type": "string"
    },
    "wordBreak": {
      "!type": "string"
    },
    "wordSpacing": {
      "!type": "string"
    },
    "wordWrap": {
      "!type": "string"
    },
    "writingMode": {
      "!type": "string"
    },
    "zIndex": {
      "!type": "string"
    },
    "clipPath": {
      "!type": "string"
    },
    "clipRule": {
      "!type": "string"
    },
    "colorInterpolation": {
      "!type": "string"
    },
    "colorInterpolationFilters": {
      "!type": "string"
    },
    "dominantBaseline": {
      "!type": "string"
    },
    "fill": {
      "!type": "string"
    },
    "fillOpacity": {
      "!type": "string"
    },
    "fillRule": {
      "!type": "string"
    },
    "filter": {
      "!type": "string"
    },
    "floodColor": {
      "!type": "string"
    },
    "floodOpacity": {
      "!type": "string"
    },
    "imageRendering": {
      "!type": "string"
    },
    "lightingColor": {
      "!type": "string"
    },
    "marker": {
      "!type": "string"
    },
    "markerEnd": {
      "!type": "string"
    },
    "markerMid": {
      "!type": "string"
    },
    "markerStart": {
      "!type": "string"
    },
    "mask": {
      "!type": "string"
    },
    "maskType": {
      "!type": "string"
    },
    "shapeRendering": {
      "!type": "string"
    },
    "stopColor": {
      "!type": "string"
    },
    "stopOpacity": {
      "!type": "string"
    },
    "stroke": {
      "!type": "string"
    },
    "strokeDasharray": {
      "!type": "string"
    },
    "strokeDashoffset": {
      "!type": "string"
    },
    "strokeLinecap": {
      "!type": "string"
    },
    "strokeLinejoin": {
      "!type": "string"
    },
    "strokeMiterlimit": {
      "!type": "string"
    },
    "strokeOpacity": {
      "!type": "string"
    },
    "strokeWidth": {
      "!type": "string"
    },
    "textAnchor": {
      "!type": "string"
    },
    "textRendering": {
      "!type": "string"
    },
    "vectorEffect": {
      "!type": "string"
    },
    "willChange": {
      "!type": "string"
    },
    "paddingInlineEnd": {
      "!type": "string"
    },
    "paddingInlineStart": {
      "!type": "string"
    },
    "marginInlineEnd": {
      "!type": "string"
    },
    "marginInlineStart": {
      "!type": "string"
    },
    "borderInlineEnd": {
      "!type": "string"
    },
    "borderInlineEndColor": {
      "!type": "string"
    },
    "borderInlineEndStyle": {
      "!type": "string"
    },
    "borderInlineEndWidth": {
      "!type": "string"
    },
    "borderInlineStart": {
      "!type": "string"
    },
    "borderInlineStartColor": {
      "!type": "string"
    },
    "borderInlineStartStyle": {
      "!type": "string"
    },
    "borderInlineStartWidth": {
      "!type": "string"
    }
  },
  "CSSFontFaceLoadEvent": {
    "!type": "fn(type: string, eventInitDict?: CSSFontFaceLoadEventInit)",
    "prototype": {
      "fontfaces": {
        "!type": "[FontFace]"
      }
    }
  },
  "Counter": {},
  "CSSPrimitiveValue": {
    "CSS_UNKNOWN": {
      "!type": "number"
    },
    "CSS_NUMBER": {
      "!type": "number"
    },
    "CSS_PERCENTAGE": {
      "!type": "number"
    },
    "CSS_EMS": {
      "!type": "number"
    },
    "CSS_EXS": {
      "!type": "number"
    },
    "CSS_PX": {
      "!type": "number"
    },
    "CSS_CM": {
      "!type": "number"
    },
    "CSS_MM": {
      "!type": "number"
    },
    "CSS_IN": {
      "!type": "number"
    },
    "CSS_PT": {
      "!type": "number"
    },
    "CSS_PC": {
      "!type": "number"
    },
    "CSS_DEG": {
      "!type": "number"
    },
    "CSS_RAD": {
      "!type": "number"
    },
    "CSS_GRAD": {
      "!type": "number"
    },
    "CSS_MS": {
      "!type": "number"
    },
    "CSS_S": {
      "!type": "number"
    },
    "CSS_HZ": {
      "!type": "number"
    },
    "CSS_KHZ": {
      "!type": "number"
    },
    "CSS_DIMENSION": {
      "!type": "number"
    },
    "CSS_STRING": {
      "!type": "number"
    },
    "CSS_URI": {
      "!type": "number"
    },
    "CSS_IDENT": {
      "!type": "number"
    },
    "CSS_ATTR": {
      "!type": "number"
    },
    "CSS_COUNTER": {
      "!type": "number"
    },
    "CSS_RECT": {
      "!type": "number"
    },
    "CSS_RGBCOLOR": {
      "!type": "number"
    },
    "primitiveType": {
      "!type": "number"
    },
    "setFloatValue": {
      "!type": "fn(unitType: number, floatValue: number)"
    },
    "getFloatValue": {
      "!type": "fn(unitType: number) -> number"
    },
    "setStringValue": {
      "!type": "fn(stringType: number, stringValue: string)"
    },
    "getStringValue": {
      "!type": "fn() -> string"
    },
    "getCounterValue": {
      "!type": "fn() -> Counter"
    },
    "getRectValue": {
      "!type": "fn() -> Rect"
    },
    "getRGBColorValue": {
      "!type": "fn() -> RGBColor"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "CSSRuleList": {
    "length": {
      "!type": "number"
    },
    "item": {
      "!type": "fn(index: number) -> CSSRule"
    }
  },
  "CSSRule": {},
  "CSSStyleDeclaration": {
    "cssText": {
      "!type": "string"
    },
    "length": {
      "!type": "number"
    },
    "item": {
      "!type": "fn(index: number) -> string"
    },
    "getPropertyValue": {
      "!type": "fn(property: string) -> string"
    },
    "getPropertyCSSValue": {
      "!type": "fn(property: string) -> CSSValue"
    },
    "getPropertyPriority": {
      "!type": "fn(property: string) -> string"
    },
    "setProperty": {
      "!type": "fn(property: string, value: string, priority?: string)"
    },
    "removeProperty": {
      "!type": "fn(property: string) -> string"
    },
    "parentRule": {
      "!type": "CSSRule"
    },
    "getAuthoredPropertyValue": {
      "!type": "fn(property: string) -> string"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "CSSStyleSheet": {
    "ownerRule": {
      "!type": "CSSRule"
    },
    "cssRules": {
      "!type": "CSSRuleList"
    },
    "insertRule": {
      "!type": "fn(rule: string, index: number) -> number"
    },
    "deleteRule": {
      "!type": "fn(index: number)"
    }
  },
  "CSSValue": {
    "CSS_INHERIT": {
      "!type": "number"
    },
    "CSS_PRIMITIVE_VALUE": {
      "!type": "number"
    },
    "CSS_VALUE_LIST": {
      "!type": "number"
    },
    "CSS_CUSTOM": {
      "!type": "number"
    },
    "cssText": {
      "!type": "string"
    },
    "cssValueType": {
      "!type": "number"
    }
  },
  "CSSValueList": {
    "length": {
      "!type": "number"
    },
    "item": {
      "!type": "fn(index: number) -> CSSValue"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "Cache": {
    "match": {
      "!type": "fn(request: RequestInfo, options?: CacheQueryOptions) -> +Promise[value=Response]"
    },
    "matchAll": {
      "!type": "fn(request?: RequestInfo, options?: CacheQueryOptions) -> +Promise"
    },
    "add": {
      "!type": "fn(request: RequestInfo) -> +Promise[value=void]"
    },
    "addAll": {
      "!type": "fn(requests: [RequestInfo]) -> +Promise[value=void]"
    },
    "put": {
      "!type": "fn(request: RequestInfo, response: Response) -> +Promise[value=void]"
    },
    "delete": {
      "!type": "fn(request: RequestInfo, options?: CacheQueryOptions) -> +Promise[value=bool]"
    },
    "keys": {
      "!type": "fn(request?: RequestInfo, options?: CacheQueryOptions) -> +Promise"
    }
  },
  "CacheStorage": {
    "match": {
      "!type": "fn(request: RequestInfo, options?: CacheQueryOptions) -> +Promise[value=Response]"
    },
    "has": {
      "!type": "fn(cacheName: string) -> +Promise[value=bool]"
    },
    "open": {
      "!type": "fn(cacheName: string) -> +Promise[value=Cache]"
    },
    "delete": {
      "!type": "fn(cacheName: string) -> +Promise[value=bool]"
    },
    "keys": {
      "!type": "fn() -> +Promise"
    }
  },
  "CallEvent": {
    "!type": "fn(type: string, eventInitDict?: CallEventInit)",
    "prototype": {
      "call": {
        "!type": "TelephonyCall"
      }
    }
  },
  "CallGroupErrorEvent": {
    "!type": "fn(type: string, eventInitDict?: CallGroupErrorEventInit)",
    "prototype": {
      "name": {
        "!type": "string"
      },
      "message": {
        "!type": "string"
      }
    }
  },
  "CameraRecorderAudioProfile": {
    "codec": {
      "!type": "string"
    },
    "bitsPerSecond": {
      "!type": "number"
    },
    "samplesPerSecond": {
      "!type": "number"
    },
    "channels": {
      "!type": "number"
    }
  },
  "CameraRecorderVideoProfile": {
    "codec": {
      "!type": "string"
    },
    "bitsPerSecond": {
      "!type": "number"
    },
    "framesPerSecond": {
      "!type": "number"
    },
    "size": {
      "!type": "CameraSize"
    },
    "width": {
      "!type": "number"
    },
    "height": {
      "!type": "number"
    }
  },
  "CameraRecorderProfile": {
    "name": {
      "!type": "string"
    },
    "containerFormat": {
      "!type": "string"
    },
    "mimeType": {
      "!type": "string"
    },
    "audio": {
      "!type": "CameraRecorderAudioProfile"
    },
    "video": {
      "!type": "CameraRecorderVideoProfile"
    }
  },
  "CameraRecorderProfiles": {},
  "CameraCapabilities": {
    "previewSizes": {
      "!type": "[CameraSize]"
    },
    "pictureSizes": {
      "!type": "[CameraSize]"
    },
    "thumbnailSizes": {
      "!type": "[CameraSize]"
    },
    "videoSizes": {
      "!type": "[CameraSize]"
    },
    "fileFormats": {
      "!type": "[string]"
    },
    "whiteBalanceModes": {
      "!type": "[string]"
    },
    "sceneModes": {
      "!type": "[string]"
    },
    "effects": {
      "!type": "[string]"
    },
    "flashModes": {
      "!type": "[string]"
    },
    "focusModes": {
      "!type": "[string]"
    },
    "zoomRatios": {
      "!type": "[number]"
    },
    "maxFocusAreas": {
      "!type": "number"
    },
    "maxMeteringAreas": {
      "!type": "number"
    },
    "maxDetectedFaces": {
      "!type": "number"
    },
    "minExposureCompensation": {
      "!type": "number"
    },
    "maxExposureCompensation": {
      "!type": "number"
    },
    "exposureCompensationStep": {
      "!type": "number"
    },
    "recorderProfiles": {
      "!type": "CameraRecorderProfiles"
    },
    "isoModes": {
      "!type": "[string]"
    },
    "meteringModes": {
      "!type": "[string]"
    }
  },
  "CameraClosedEvent": {
    "!type": "fn(type: string, eventInitDict?: CameraClosedEventInit)",
    "prototype": {
      "reason": {
        "!type": "string"
      }
    }
  },
  "CameraConfigurationEvent": {
    "!type": "fn(type: string, eventInitDict?: CameraConfigurationEventInit)",
    "prototype": {
      "mode": {
        "!type": "CameraMode"
      },
      "recorderProfile": {
        "!type": "string"
      },
      "previewSize": {
        "!type": "DOMRectReadOnly"
      },
      "pictureSize": {
        "!type": "DOMRectReadOnly"
      }
    }
  },
  "CameraControl": {
    "capabilities": {
      "!type": "CameraCapabilities"
    },
    "effect": {
      "!type": "string"
    },
    "whiteBalanceMode": {
      "!type": "string"
    },
    "sceneMode": {
      "!type": "string"
    },
    "flashMode": {
      "!type": "string"
    },
    "focusMode": {
      "!type": "string"
    },
    "zoom": {
      "!type": "number"
    },
    "getMeteringAreas": {
      "!type": "fn() -> [CameraRegion]"
    },
    "setMeteringAreas": {
      "!type": "fn(meteringAreas?: [CameraRegion])"
    },
    "getFocusAreas": {
      "!type": "fn() -> [CameraRegion]"
    },
    "setFocusAreas": {
      "!type": "fn(focusAreas?: [CameraRegion])"
    },
    "focalLength": {
      "!type": "number"
    },
    "focusDistanceNear": {
      "!type": "number"
    },
    "focusDistanceOptimum": {
      "!type": "number"
    },
    "focusDistanceFar": {
      "!type": "number"
    },
    "exposureCompensation": {
      "!type": "number"
    },
    "isoMode": {
      "!type": "string"
    },
    "onshutter": {
      "!type": "fn(+Event)"
    },
    "onclose": {
      "!type": "fn(+Event)"
    },
    "onrecorderstatechange": {
      "!type": "fn(+Event)"
    },
    "onpreviewstatechange": {
      "!type": "fn(+Event)"
    },
    "getPictureSize": {
      "!type": "fn() -> CameraSize"
    },
    "setPictureSize": {
      "!type": "fn(size?: CameraSize)"
    },
    "pictureQuality": {
      "!type": "number"
    },
    "getThumbnailSize": {
      "!type": "fn() -> CameraSize"
    },
    "setThumbnailSize": {
      "!type": "fn(size?: CameraSize)"
    },
    "sensorAngle": {
      "!type": "number"
    },
    "meteringMode": {
      "!type": "string"
    },
    "autoFocus": {
      "!type": "fn() -> +Promise[value=bool]"
    },
    "onfocus": {
      "!type": "fn(+Event)"
    },
    "takePicture": {
      "!type": "fn(options?: CameraPictureOptions) -> +Promise[value=Blob]"
    },
    "onpicture": {
      "!type": "fn(+Event)"
    },
    "startRecording": {
      "!type": "fn(options: CameraStartRecordingOptions, storageArea: DeviceStorage, filename: string) -> +Promise[value=void]"
    },
    "stopRecording": {
      "!type": "fn()"
    },
    "resumePreview": {
      "!type": "fn()"
    },
    "release": {
      "!type": "fn() -> +Promise[value=void]"
    },
    "setConfiguration": {
      "!type": "fn(configuration?: CameraConfiguration) -> +Promise[value=CameraConfiguration]"
    },
    "onconfigurationchange": {
      "!type": "fn(+Event)"
    },
    "resumeContinuousFocus": {
      "!type": "fn()"
    },
    "startFaceDetection": {
      "!type": "fn()"
    },
    "stopFaceDetection": {
      "!type": "fn()"
    },
    "onfacesdetected": {
      "!type": "fn(+Event)"
    }
  },
  "CameraDetectedFace": {
    "!type": "fn(initDict?: CameraDetectedFaceInit)",
    "prototype": {
      "id": {
        "!type": "number"
      },
      "score": {
        "!type": "number"
      },
      "bounds": {
        "!type": "DOMRect"
      },
      "hasLeftEye": {
        "!type": "bool"
      },
      "leftEye": {
        "!type": "DOMPoint"
      },
      "hasRightEye": {
        "!type": "bool"
      },
      "rightEye": {
        "!type": "DOMPoint"
      },
      "hasMouth": {
        "!type": "bool"
      },
      "mouth": {
        "!type": "DOMPoint"
      }
    }
  },
  "CameraFacesDetectedEvent": {
    "!type": "fn(type: string, eventInitDict?: CameraFacesDetectedEventInit)",
    "prototype": {
      "faces": {
        "!type": "[CameraDetectedFace]"
      }
    }
  },
  "CameraManager": {
    "getCamera": {
      "!type": "fn(camera: string, initialConfiguration?: CameraConfiguration) -> +Promise[value=CameraGetPromiseData]"
    },
    "getListOfCameras": {
      "!type": "fn() -> [string]"
    }
  },
  "CameraStateChangeEvent": {
    "!type": "fn(type: string, eventInitDict?: CameraStateChangeEventInit)",
    "prototype": {
      "newState": {
        "!type": "string"
      }
    }
  },
  "CanvasRenderingContext2D": {
    "canvas": {
      "!type": "HTMLCanvasElement"
    },
    "save": {
      "!type": "fn()"
    },
    "restore": {
      "!type": "fn()"
    },
    "scale": {
      "!type": "fn(x: number, y: number)"
    },
    "rotate": {
      "!type": "fn(angle: number)"
    },
    "translate": {
      "!type": "fn(x: number, y: number)"
    },
    "transform": {
      "!type": "fn(a: number, b: number, c: number, d: number, e: number, f: number)"
    },
    "setTransform": {
      "!type": "fn(a: number, b: number, c: number, d: number, e: number, f: number)"
    },
    "resetTransform": {
      "!type": "fn()"
    },
    "globalAlpha": {
      "!type": "number"
    },
    "globalCompositeOperation": {
      "!type": "string"
    },
    "strokeStyle": {
      "!type": "?"
    },
    "fillStyle": {
      "!type": "?"
    },
    "createLinearGradient": {
      "!type": "fn(x0: number, y0: number, x1: number, y1: number) -> CanvasGradient"
    },
    "createRadialGradient": {
      "!type": "fn(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number) -> CanvasGradient"
    },
    "createPattern": {
      "!type": "fn(image: ?, repetition: string) -> CanvasPattern"
    },
    "shadowOffsetX": {
      "!type": "number"
    },
    "shadowOffsetY": {
      "!type": "number"
    },
    "shadowBlur": {
      "!type": "number"
    },
    "shadowColor": {
      "!type": "string"
    },
    "filter": {
      "!type": "string"
    },
    "clearRect": {
      "!type": "fn(x: number, y: number, w: number, h: number)"
    },
    "fillRect": {
      "!type": "fn(x: number, y: number, w: number, h: number)"
    },
    "strokeRect": {
      "!type": "fn(x: number, y: number, w: number, h: number)"
    },
    "beginPath": {
      "!type": "fn()"
    },
    "fill": {
      "!type": "fn(winding?: CanvasWindingRule)"
    },
    "stroke": {
      "!type": "fn()"
    },
    "drawFocusIfNeeded": {
      "!type": "fn(element: Element)"
    },
    "drawCustomFocusRing": {
      "!type": "fn(element: Element) -> bool"
    },
    "clip": {
      "!type": "fn(winding?: CanvasWindingRule)"
    },
    "isPointInPath": {
      "!type": "fn(x: number, y: number, winding?: CanvasWindingRule) -> bool"
    },
    "isPointInStroke": {
      "!type": "fn(x: number, y: number) -> bool"
    },
    "fillText": {
      "!type": "fn(text: string, x: number, y: number, maxWidth?: number)"
    },
    "strokeText": {
      "!type": "fn(text: string, x: number, y: number, maxWidth?: number)"
    },
    "measureText": {
      "!type": "fn(text: string) -> TextMetrics"
    },
    "drawImage": {
      "!type": "fn(image: ?, dx: number, dy: number)"
    },
    "addHitRegion": {
      "!type": "fn(options?: HitRegionOptions)"
    },
    "removeHitRegion": {
      "!type": "fn(id: string)"
    },
    "clearHitRegions": {
      "!type": "fn()"
    },
    "createImageData": {
      "!type": "fn(sw: number, sh: number) -> ImageData"
    },
    "getImageData": {
      "!type": "fn(sx: number, sy: number, sw: number, sh: number) -> ImageData"
    },
    "putImageData": {
      "!type": "fn(imagedata: ImageData, dx: number, dy: number)"
    },
    "DRAWWINDOW_DRAW_CARET": {
      "!type": "number"
    },
    "DRAWWINDOW_DO_NOT_FLUSH": {
      "!type": "number"
    },
    "DRAWWINDOW_DRAW_VIEW": {
      "!type": "number"
    },
    "DRAWWINDOW_USE_WIDGET_LAYERS": {
      "!type": "number"
    },
    "DRAWWINDOW_ASYNC_DECODE_IMAGES": {
      "!type": "number"
    },
    "drawWindow": {
      "!type": "fn(window: Window, x: number, y: number, w: number, h: number, bgColor: string, flags?: number)"
    },
    "asyncDrawXULElement": {
      "!type": "fn(elem: XULElement, x: number, y: number, w: number, h: number, bgColor: string, flags?: number)"
    },
    "demote": {
      "!type": "fn()"
    },
    "lineWidth": {
      "!type": "number"
    },
    "lineCap": {
      "!type": "string"
    },
    "lineJoin": {
      "!type": "string"
    },
    "miterLimit": {
      "!type": "number"
    },
    "setLineDash": {
      "!type": "fn(segments: [number])"
    },
    "getLineDash": {
      "!type": "fn() -> [number]"
    },
    "lineDashOffset": {
      "!type": "number"
    },
    "font": {
      "!type": "string"
    },
    "textAlign": {
      "!type": "string"
    },
    "textBaseline": {
      "!type": "string"
    },
    "closePath": {
      "!type": "fn()"
    },
    "moveTo": {
      "!type": "fn(x: number, y: number)"
    },
    "lineTo": {
      "!type": "fn(x: number, y: number)"
    },
    "quadraticCurveTo": {
      "!type": "fn(cpx: number, cpy: number, x: number, y: number)"
    },
    "bezierCurveTo": {
      "!type": "fn(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number)"
    },
    "arcTo": {
      "!type": "fn(x1: number, y1: number, x2: number, y2: number, radius: number)"
    },
    "rect": {
      "!type": "fn(x: number, y: number, w: number, h: number)"
    },
    "arc": {
      "!type": "fn(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: bool)"
    }
  },
  "CanvasGradient": {
    "addColorStop": {
      "!type": "fn(offset: number, color: string)"
    }
  },
  "CanvasPattern": {
    "setTransform": {
      "!type": "fn(matrix: SVGMatrix)"
    }
  },
  "TextMetrics": {
    "width": {
      "!type": "number"
    }
  },
  "Path2D": {
    "!type": "fn(pathString: string)",
    "prototype": {
      "addPath": {
        "!type": "fn(path: Path2D, transformation?: SVGMatrix)"
      },
      "closePath": {
        "!type": "fn()"
      },
      "moveTo": {
        "!type": "fn(x: number, y: number)"
      },
      "lineTo": {
        "!type": "fn(x: number, y: number)"
      },
      "quadraticCurveTo": {
        "!type": "fn(cpx: number, cpy: number, x: number, y: number)"
      },
      "bezierCurveTo": {
        "!type": "fn(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number)"
      },
      "arcTo": {
        "!type": "fn(x1: number, y1: number, x2: number, y2: number, radius: number)"
      },
      "rect": {
        "!type": "fn(x: number, y: number, w: number, h: number)"
      },
      "arc": {
        "!type": "fn(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: bool)"
      }
    }
  },
  "CaretPosition": {
    "offsetNode": {
      "!type": "Node"
    },
    "offset": {
      "!type": "number"
    },
    "getClientRect": {
      "!type": "fn() -> DOMRect"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "ChannelMergerNode": {},
  "ChannelSplitterNode": {},
  "CharacterData": {
    "data": {
      "!type": "string"
    },
    "length": {
      "!type": "number"
    },
    "substringData": {
      "!type": "fn(offset: number, count: number) -> string"
    },
    "appendData": {
      "!type": "fn(data: string)"
    },
    "insertData": {
      "!type": "fn(offset: number, data: string)"
    },
    "deleteData": {
      "!type": "fn(offset: number, count: number)"
    },
    "replaceData": {
      "!type": "fn(offset: number, count: number, data: string)"
    },
    "remove": {
      "!type": "fn()"
    },
    "previousElementSibling": {
      "!type": "Element"
    },
    "nextElementSibling": {
      "!type": "Element"
    }
  },
  "ChromeNotifications": {},
  "Client": {
    "id": {
      "!type": "string"
    },
    "url": {
      "!type": "string"
    },
    "postMessage": {
      "!type": "fn(message: ?, transfer?: [Transferable])"
    }
  },
  "WindowClient": {
    "visibilityState": {
      "!type": "VisibilityState"
    },
    "focused": {
      "!type": "bool"
    },
    "frameType": {
      "!type": "FrameType"
    },
    "focus": {
      "!type": "fn() -> +Promise[value=WindowClient]"
    }
  },
  "Clients": {
    "matchAll": {
      "!type": "fn(options?: ClientQueryOptions) -> +Promise"
    },
    "openWindow": {
      "!type": "fn(url: string) -> +Promise[value=WindowClient]"
    },
    "claim": {
      "!type": "fn() -> +Promise[value=void]"
    }
  },
  "ClipboardEvent": {
    "!type": "fn(type: string, eventInitDict?: ClipboardEventInit)",
    "prototype": {
      "clipboardData": {
        "!type": "DataTransfer"
      }
    }
  },
  "CloseEvent": {
    "!type": "fn(type: string, eventInitDict?: CloseEventInit)",
    "prototype": {
      "wasClean": {
        "!type": "bool"
      },
      "code": {
        "!type": "number"
      },
      "reason": {
        "!type": "string"
      },
      "initCloseEvent": {
        "!type": "fn(aType: string, aCanBubble: bool, aCancelable: bool, aWasClean: bool, aReasonCode: number, aReason: string)"
      }
    }
  },
  "CommandEvent": {
    "command": {
      "!type": "string"
    },
    "initCommandEvent": {
      "!type": "fn(type: string, canBubble: bool, cancelable: bool, command: string)"
    }
  },
  "Comment": {
    "!type": "fn(data?: string)",
    "prototype": {
      "queryInterface": {
        "!type": "fn(iid: IID) -> nsISupports"
      }
    }
  },
  "CompositionEvent": {
    "data": {
      "!type": "string"
    },
    "locale": {
      "!type": "string"
    },
    "initCompositionEvent": {
      "!type": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: Window, dataArg: string, localeArg: string)"
    }
  },
  "ConvolverNode": {
    "buffer": {
      "!type": "AudioBuffer"
    },
    "normalize": {
      "!type": "bool"
    },
    "passThrough": {
      "!type": "bool"
    }
  },
  "Crypto": {
    "subtle": {
      "!type": "SubtleCrypto"
    },
    "getRandomValues": {
      "!type": "fn(array: ArrayBufferView) -> ArrayBufferView"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "CustomEvent": {
    "!type": "fn(type: string, eventInitDict?: CustomEventInit)",
    "prototype": {
      "detail": {
        "!type": "?"
      },
      "initCustomEvent": {
        "!type": "fn(type: string, canBubble: bool, cancelable: bool, detail: ?)"
      }
    }
  },
  "DOMCursor": {
    "done": {
      "!type": "bool"
    },
    "continue": {
      "!type": "fn()"
    },
    "readyState": {
      "!type": "DOMRequestReadyState"
    },
    "result": {
      "!type": "?"
    },
    "error": {
      "!type": "DOMError"
    },
    "onsuccess": {
      "!type": "fn(+Event)"
    },
    "onerror": {
      "!type": "fn(+Event)"
    }
  },
  "DOMError": {
    "!type": "fn(name: string, message?: string)",
    "prototype": {
      "name": {
        "!type": "string"
      },
      "message": {
        "!type": "string"
      }
    }
  },
  "StackFrame": {},
  "DOMException": {
    "!type": "fn(message?: string, name?: string)",
    "prototype": {
      "INDEX_SIZE_ERR": {
        "!type": "number"
      },
      "DOMSTRING_SIZE_ERR": {
        "!type": "number"
      },
      "HIERARCHY_REQUEST_ERR": {
        "!type": "number"
      },
      "WRONG_DOCUMENT_ERR": {
        "!type": "number"
      },
      "INVALID_CHARACTER_ERR": {
        "!type": "number"
      },
      "NO_DATA_ALLOWED_ERR": {
        "!type": "number"
      },
      "NO_MODIFICATION_ALLOWED_ERR": {
        "!type": "number"
      },
      "NOT_FOUND_ERR": {
        "!type": "number"
      },
      "NOT_SUPPORTED_ERR": {
        "!type": "number"
      },
      "INUSE_ATTRIBUTE_ERR": {
        "!type": "number"
      },
      "INVALID_STATE_ERR": {
        "!type": "number"
      },
      "SYNTAX_ERR": {
        "!type": "number"
      },
      "INVALID_MODIFICATION_ERR": {
        "!type": "number"
      },
      "NAMESPACE_ERR": {
        "!type": "number"
      },
      "INVALID_ACCESS_ERR": {
        "!type": "number"
      },
      "VALIDATION_ERR": {
        "!type": "number"
      },
      "TYPE_MISMATCH_ERR": {
        "!type": "number"
      },
      "SECURITY_ERR": {
        "!type": "number"
      },
      "NETWORK_ERR": {
        "!type": "number"
      },
      "ABORT_ERR": {
        "!type": "number"
      },
      "URL_MISMATCH_ERR": {
        "!type": "number"
      },
      "QUOTA_EXCEEDED_ERR": {
        "!type": "number"
      },
      "TIMEOUT_ERR": {
        "!type": "number"
      },
      "INVALID_NODE_TYPE_ERR": {
        "!type": "number"
      },
      "DATA_CLONE_ERR": {
        "!type": "number"
      },
      "code": {
        "!type": "number"
      },
      "message": {
        "!type": "string"
      },
      "result": {
        "!type": "number"
      },
      "name": {
        "!type": "string"
      },
      "filename": {
        "!type": "string"
      },
      "lineNumber": {
        "!type": "number"
      },
      "columnNumber": {
        "!type": "number"
      },
      "location": {
        "!type": "StackFrame"
      },
      "inner": {
        "!type": "nsISupports"
      },
      "data": {
        "!type": "nsISupports"
      },
      "stack": {
        "!type": "string"
      }
    }
  },
  "DOMImplementation": {
    "hasFeature": {
      "!type": "fn(feature: string, version: string) -> bool"
    },
    "createDocumentType": {
      "!type": "fn(qualifiedName: string, publicId: string, systemId: string) -> DocumentType"
    },
    "createDocument": {
      "!type": "fn(namespace: string, qualifiedName: string, doctype?: DocumentType) -> Document"
    },
    "createHTMLDocument": {
      "!type": "fn(title?: string) -> Document"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "DOMMMIError": {
    "serviceCode": {
      "!type": "string"
    },
    "additionalInformation": {
      "!type": "number"
    }
  },
  "DOMMatrixReadOnly": {
    "a": {
      "!type": "number"
    },
    "b": {
      "!type": "number"
    },
    "c": {
      "!type": "number"
    },
    "d": {
      "!type": "number"
    },
    "e": {
      "!type": "number"
    },
    "f": {
      "!type": "number"
    },
    "m11": {
      "!type": "number"
    },
    "m12": {
      "!type": "number"
    },
    "m13": {
      "!type": "number"
    },
    "m14": {
      "!type": "number"
    },
    "m21": {
      "!type": "number"
    },
    "m22": {
      "!type": "number"
    },
    "m23": {
      "!type": "number"
    },
    "m24": {
      "!type": "number"
    },
    "m31": {
      "!type": "number"
    },
    "m32": {
      "!type": "number"
    },
    "m33": {
      "!type": "number"
    },
    "m34": {
      "!type": "number"
    },
    "m41": {
      "!type": "number"
    },
    "m42": {
      "!type": "number"
    },
    "m43": {
      "!type": "number"
    },
    "m44": {
      "!type": "number"
    },
    "translate": {
      "!type": "fn(tx: number, ty: number, tz?: number) -> DOMMatrix"
    },
    "scale": {
      "!type": "fn(scale: number, originX?: number, originY?: number) -> DOMMatrix"
    },
    "scale3d": {
      "!type": "fn(scale: number, originX?: number, originY?: number, originZ?: number) -> DOMMatrix"
    },
    "scaleNonUniform": {
      "!type": "fn(scaleX: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number) -> DOMMatrix"
    },
    "rotate": {
      "!type": "fn(angle: number, originX?: number, originY?: number) -> DOMMatrix"
    },
    "rotateFromVector": {
      "!type": "fn(x: number, y: number) -> DOMMatrix"
    },
    "rotateAxisAngle": {
      "!type": "fn(x: number, y: number, z: number, angle: number) -> DOMMatrix"
    },
    "skewX": {
      "!type": "fn(sx: number) -> DOMMatrix"
    },
    "skewY": {
      "!type": "fn(sy: number) -> DOMMatrix"
    },
    "multiply": {
      "!type": "fn(other: DOMMatrix) -> DOMMatrix"
    },
    "flipX": {
      "!type": "fn() -> DOMMatrix"
    },
    "flipY": {
      "!type": "fn() -> DOMMatrix"
    },
    "inverse": {
      "!type": "fn() -> DOMMatrix"
    },
    "is2D": {
      "!type": "bool"
    },
    "identity": {
      "!type": "bool"
    },
    "transformPoint": {
      "!type": "fn(point?: DOMPointInit) -> DOMPoint"
    },
    "toFloat32Array": {
      "!type": "fn() -> Float32Array"
    },
    "toFloat64Array": {
      "!type": "fn() -> Float64Array"
    }
  },
  "DOMMatrix": {
    "!type": "fn(numberSequence: [number])",
    "prototype": {
      "a": {
        "!type": "number"
      },
      "b": {
        "!type": "number"
      },
      "c": {
        "!type": "number"
      },
      "d": {
        "!type": "number"
      },
      "e": {
        "!type": "number"
      },
      "f": {
        "!type": "number"
      },
      "m11": {
        "!type": "number"
      },
      "m12": {
        "!type": "number"
      },
      "m13": {
        "!type": "number"
      },
      "m14": {
        "!type": "number"
      },
      "m21": {
        "!type": "number"
      },
      "m22": {
        "!type": "number"
      },
      "m23": {
        "!type": "number"
      },
      "m24": {
        "!type": "number"
      },
      "m31": {
        "!type": "number"
      },
      "m32": {
        "!type": "number"
      },
      "m33": {
        "!type": "number"
      },
      "m34": {
        "!type": "number"
      },
      "m41": {
        "!type": "number"
      },
      "m42": {
        "!type": "number"
      },
      "m43": {
        "!type": "number"
      },
      "m44": {
        "!type": "number"
      },
      "multiplySelf": {
        "!type": "fn(other: DOMMatrix) -> DOMMatrix"
      },
      "preMultiplySelf": {
        "!type": "fn(other: DOMMatrix) -> DOMMatrix"
      },
      "translateSelf": {
        "!type": "fn(tx: number, ty: number, tz?: number) -> DOMMatrix"
      },
      "scaleSelf": {
        "!type": "fn(scale: number, originX?: number, originY?: number) -> DOMMatrix"
      },
      "scale3dSelf": {
        "!type": "fn(scale: number, originX?: number, originY?: number, originZ?: number) -> DOMMatrix"
      },
      "scaleNonUniformSelf": {
        "!type": "fn(scaleX: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number) -> DOMMatrix"
      },
      "rotateSelf": {
        "!type": "fn(angle: number, originX?: number, originY?: number) -> DOMMatrix"
      },
      "rotateFromVectorSelf": {
        "!type": "fn(x: number, y: number) -> DOMMatrix"
      },
      "rotateAxisAngleSelf": {
        "!type": "fn(x: number, y: number, z: number, angle: number) -> DOMMatrix"
      },
      "skewXSelf": {
        "!type": "fn(sx: number) -> DOMMatrix"
      },
      "skewYSelf": {
        "!type": "fn(sy: number) -> DOMMatrix"
      },
      "invertSelf": {
        "!type": "fn() -> DOMMatrix"
      },
      "setMatrixValue": {
        "!type": "fn(transformList: string) -> DOMMatrix"
      }
    }
  },
  "DOMMobileMessageError": {
    "data": {
      "!type": "?"
    }
  },
  "Principal": {},
  "URI": {},
  "InputStream": {},
  "DOMParser": {
    "!type": "fn(prin: Principal, documentURI?: URI, baseURI?: URI)",
    "prototype": {
      "parseFromString": {
        "!type": "fn(str: string, type: SupportedType) -> Document"
      },
      "parseFromBuffer": {
        "!type": "fn(buf: [number], bufLen: number, type: SupportedType) -> Document"
      },
      "parseFromStream": {
        "!type": "fn(stream: InputStream, charset: string, contentLength: number, type: SupportedType) -> Document"
      },
      "init": {
        "!type": "fn(principal?: Principal, documentURI?: URI, baseURI?: URI)"
      },
      "queryInterface": {
        "!type": "fn(iid: IID) -> nsISupports"
      }
    }
  },
  "DOMPointReadOnly": {
    "x": {
      "!type": "number"
    },
    "y": {
      "!type": "number"
    },
    "z": {
      "!type": "number"
    },
    "w": {
      "!type": "number"
    }
  },
  "DOMPoint": {
    "!type": "fn(x: number, y: number, z?: number, w?: number)",
    "prototype": {
      "x": {
        "!type": "number"
      },
      "y": {
        "!type": "number"
      },
      "z": {
        "!type": "number"
      },
      "w": {
        "!type": "number"
      }
    }
  },
  "DOMQuad": {
    "!type": "fn(rect: DOMRectReadOnly)",
    "prototype": {
      "p1": {
        "!type": "DOMPoint"
      },
      "p2": {
        "!type": "DOMPoint"
      },
      "p3": {
        "!type": "DOMPoint"
      },
      "p4": {
        "!type": "DOMPoint"
      },
      "bounds": {
        "!type": "DOMRectReadOnly"
      }
    }
  },
  "DOMRect": {
    "!type": "fn(x: number, y: number, width: number, height: number)",
    "prototype": {
      "x": {
        "!type": "number"
      },
      "y": {
        "!type": "number"
      },
      "width": {
        "!type": "number"
      },
      "height": {
        "!type": "number"
      }
    }
  },
  "DOMRectReadOnly": {
    "x": {
      "!type": "number"
    },
    "y": {
      "!type": "number"
    },
    "width": {
      "!type": "number"
    },
    "height": {
      "!type": "number"
    },
    "top": {
      "!type": "number"
    },
    "right": {
      "!type": "number"
    },
    "bottom": {
      "!type": "number"
    },
    "left": {
      "!type": "number"
    }
  },
  "DOMRectList": {
    "length": {
      "!type": "number"
    },
    "item": {
      "!type": "fn(index: number) -> DOMRect"
    }
  },
  "DOMRequest": {
    "then": {
      "!type": "fn(fulfillCallback?: AnyCallback, rejectCallback?: AnyCallback) -> +Promise[value=?]"
    },
    "readyState": {
      "!type": "DOMRequestReadyState"
    },
    "result": {
      "!type": "?"
    },
    "error": {
      "!type": "DOMError"
    },
    "onsuccess": {
      "!type": "fn(+Event)"
    },
    "onerror": {
      "!type": "fn(+Event)"
    }
  },
  "DOMSettableTokenList": {
    "value": {
      "!type": "string"
    }
  },
  "DOMStringList": {
    "length": {
      "!type": "number"
    },
    "item": {
      "!type": "fn(index: number) -> string"
    },
    "contains": {
      "!type": "fn(string: string) -> bool"
    }
  },
  "DOMStringMap": {
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "DOMTokenList": {
    "length": {
      "!type": "number"
    },
    "item": {
      "!type": "fn(index: number) -> string"
    },
    "contains": {
      "!type": "fn(token: string) -> bool"
    },
    "add": {
      "!type": "fn(tokens: string)"
    },
    "remove": {
      "!type": "fn(tokens: string)"
    },
    "toggle": {
      "!type": "fn(token: string, force?: bool) -> bool"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "DOMTransactionEvent": {
    "!type": "fn(type: string, eventInitDict?: DOMTransactionEventInit)",
    "prototype": {
      "transactions": {
        "!type": "?"
      }
    }
  },
  "DataChannel": {
    "label": {
      "!type": "string"
    },
    "reliable": {
      "!type": "bool"
    },
    "readyState": {
      "!type": "RTCDataChannelState"
    },
    "bufferedAmount": {
      "!type": "number"
    },
    "onopen": {
      "!type": "fn(+Event)"
    },
    "onerror": {
      "!type": "fn(+Event)"
    },
    "onclose": {
      "!type": "fn(+Event)"
    },
    "close": {
      "!type": "fn()"
    },
    "onmessage": {
      "!type": "fn(+Event)"
    },
    "binaryType": {
      "!type": "RTCDataChannelType"
    },
    "send": {
      "!type": "fn(data: string)"
    },
    "protocol": {
      "!type": "string"
    },
    "ordered": {
      "!type": "bool"
    },
    "id": {
      "!type": "number"
    },
    "stream": {
      "!type": "number"
    }
  },
  "DataErrorEvent": {
    "!type": "fn(type: string, eventInitDict?: DataErrorEventInit)",
    "prototype": {
      "message": {
        "!type": "string"
      }
    }
  },
  "DataStore": {
    "name": {
      "!type": "string"
    },
    "owner": {
      "!type": "string"
    },
    "readOnly": {
      "!type": "bool"
    },
    "get": {
      "!type": "fn(id: DataStoreKey) -> +Promise[value=?]"
    },
    "put": {
      "!type": "fn(obj: ?, id: DataStoreKey, revisionId?: string) -> +Promise[value=void]"
    },
    "add": {
      "!type": "fn(obj: ?, id?: DataStoreKey, revisionId?: string) -> +Promise[value=DataStoreKey]"
    },
    "remove": {
      "!type": "fn(id: DataStoreKey, revisionId?: string) -> +Promise[value=bool]"
    },
    "clear": {
      "!type": "fn(revisionId?: string) -> +Promise[value=void]"
    },
    "revisionId": {
      "!type": "string"
    },
    "onchange": {
      "!type": "fn(+Event)"
    },
    "getLength": {
      "!type": "fn() -> +Promise[value=number]"
    },
    "sync": {
      "!type": "fn(revisionId?: string) -> DataStoreCursor"
    },
    "setDataStoreImpl": {
      "!type": "fn(store: DataStoreImpl)"
    }
  },
  "DataStoreCursor": {
    "store": {
      "!type": "DataStore"
    },
    "next": {
      "!type": "fn() -> +Promise[value=DataStoreTask]"
    },
    "close": {
      "!type": "fn()"
    },
    "setDataStoreCursorImpl": {
      "!type": "fn(cursor: DataStoreCursorImpl)"
    }
  },
  "DataStoreChangeEvent": {
    "!type": "fn(type: string, eventInitDict?: DataStoreChangeEventInit)",
    "prototype": {
      "revisionId": {
        "!type": "string"
      },
      "id": {
        "!type": "DataStoreKey"
      },
      "operation": {
        "!type": "string"
      },
      "owner": {
        "!type": "string"
      }
    }
  },
  "DataStoreImpl": {
    "setEventTarget": {
      "!type": "fn(eventTarget: EventTarget)"
    },
    "name": {
      "!type": "string"
    },
    "owner": {
      "!type": "string"
    },
    "readOnly": {
      "!type": "bool"
    },
    "get": {
      "!type": "fn(id: DataStoreKey) -> +Promise[value=?]"
    },
    "put": {
      "!type": "fn(obj: ?, id: DataStoreKey, revisionId?: string) -> +Promise[value=void]"
    },
    "add": {
      "!type": "fn(obj: ?, id?: DataStoreKey, revisionId?: string) -> +Promise[value=DataStoreKey]"
    },
    "remove": {
      "!type": "fn(id: DataStoreKey, revisionId?: string) -> +Promise[value=bool]"
    },
    "clear": {
      "!type": "fn(revisionId?: string) -> +Promise[value=void]"
    },
    "revisionId": {
      "!type": "string"
    },
    "getLength": {
      "!type": "fn() -> +Promise[value=number]"
    },
    "sync": {
      "!type": "fn(revisionId?: string) -> DataStoreCursor"
    }
  },
  "DataStoreCursorImpl": {
    "store": {
      "!type": "DataStore"
    },
    "next": {
      "!type": "fn() -> +Promise[value=DataStoreTask]"
    },
    "close": {
      "!type": "fn()"
    }
  },
  "DataTransfer": {
    "dropEffect": {
      "!type": "string"
    },
    "effectAllowed": {
      "!type": "string"
    },
    "setDragImage": {
      "!type": "fn(image: Element, x: number, y: number)"
    },
    "types": {
      "!type": "DOMStringList"
    },
    "getData": {
      "!type": "fn(format: string) -> string"
    },
    "setData": {
      "!type": "fn(format: string, data: string)"
    },
    "clearData": {
      "!type": "fn(format?: string)"
    },
    "files": {
      "!type": "FileList"
    },
    "addElement": {
      "!type": "fn(element: Element)"
    }
  },
  "DedicatedWorkerGlobalScope": {
    "postMessage": {
      "!type": "fn(message: ?, transfer?: [?])"
    },
    "onmessage": {
      "!type": "fn(+Event)"
    }
  },
  "DelayNode": {
    "delayTime": {
      "!type": "AudioParam"
    },
    "passThrough": {
      "!type": "bool"
    }
  },
  "DesktopNotificationCenter": {
    "createNotification": {
      "!type": "fn(title: string, description: string, iconURL?: string) -> DesktopNotification"
    }
  },
  "DesktopNotification": {
    "show": {
      "!type": "fn()"
    },
    "onclick": {
      "!type": "fn(+Event)"
    },
    "onclose": {
      "!type": "fn(+Event)"
    }
  },
  "DeviceLightEvent": {
    "!type": "fn(type: string, eventInitDict?: DeviceLightEventInit)",
    "prototype": {
      "value": {
        "!type": "number"
      }
    }
  },
  "DeviceMotionEvent": {
    "!type": "fn(type: string, eventInitDict?: DeviceMotionEventInit)",
    "prototype": {
      "acceleration": {
        "!type": "DeviceAcceleration"
      },
      "accelerationIncludingGravity": {
        "!type": "DeviceAcceleration"
      },
      "rotationRate": {
        "!type": "DeviceRotationRate"
      },
      "interval": {
        "!type": "number"
      },
      "initDeviceMotionEvent": {
        "!type": "fn(type: string, canBubble: bool, cancelable: bool, acceleration: DeviceAccelerationInit, accelerationIncludingGravity: DeviceAccelerationInit, rotationRate: DeviceRotationRateInit, interval: number)"
      }
    }
  },
  "DeviceOrientationEvent": {
    "!type": "fn(type: string, eventInitDict?: DeviceOrientationEventInit)",
    "prototype": {
      "alpha": {
        "!type": "number"
      },
      "beta": {
        "!type": "number"
      },
      "gamma": {
        "!type": "number"
      },
      "absolute": {
        "!type": "bool"
      },
      "initDeviceOrientationEvent": {
        "!type": "fn(type: string, canBubble: bool, cancelable: bool, alpha: number, beta: number, gamma: number, absolute: bool)"
      }
    }
  },
  "DeviceProximityEvent": {
    "!type": "fn(type: string, eventInitDict?: DeviceProximityEventInit)",
    "prototype": {
      "value": {
        "!type": "number"
      },
      "min": {
        "!type": "number"
      },
      "max": {
        "!type": "number"
      }
    }
  },
  "DeviceStorage": {
    "onchange": {
      "!type": "fn(+Event)"
    },
    "add": {
      "!type": "fn(aBlob: Blob) -> DOMRequest"
    },
    "addNamed": {
      "!type": "fn(aBlob: Blob, aName: string) -> DOMRequest"
    },
    "appendNamed": {
      "!type": "fn(aBlob: Blob, aName: string) -> DOMRequest"
    },
    "get": {
      "!type": "fn(aName: string) -> DOMRequest"
    },
    "getEditable": {
      "!type": "fn(aName: string) -> DOMRequest"
    },
    "delete": {
      "!type": "fn(aName: string) -> DOMRequest"
    },
    "enumerate": {
      "!type": "fn(options?: DeviceStorageEnumerationParameters) -> DOMCursor"
    },
    "enumerateEditable": {
      "!type": "fn(options?: DeviceStorageEnumerationParameters) -> DOMCursor"
    },
    "freeSpace": {
      "!type": "fn() -> DOMRequest"
    },
    "usedSpace": {
      "!type": "fn() -> DOMRequest"
    },
    "available": {
      "!type": "fn() -> DOMRequest"
    },
    "storageStatus": {
      "!type": "fn() -> DOMRequest"
    },
    "format": {
      "!type": "fn() -> DOMRequest"
    },
    "mount": {
      "!type": "fn() -> DOMRequest"
    },
    "unmount": {
      "!type": "fn() -> DOMRequest"
    },
    "storageName": {
      "!type": "string"
    },
    "canBeMounted": {
      "!type": "bool"
    },
    "canBeShared": {
      "!type": "bool"
    },
    "canBeFormatted": {
      "!type": "bool"
    },
    "default": {
      "!type": "bool"
    },
    "isRemovable": {
      "!type": "bool"
    },
    "getRoot": {
      "!type": "fn() -> +Promise[value=?]"
    }
  },
  "DeviceStorageChangeEvent": {
    "!type": "fn(type: string, eventInitDict?: DeviceStorageChangeEventInit)",
    "prototype": {
      "path": {
        "!type": "string"
      },
      "reason": {
        "!type": "string"
      }
    }
  },
  "DisplayPortInputPort": {},
  "WindowProxy": {},
  "Document": {
    "!type": "fn()",
    "prototype": {
      "implementation": {
        "!type": "DOMImplementation"
      },
      "URL": {
        "!type": "string"
      },
      "documentURI": {
        "!type": "string"
      },
      "compatMode": {
        "!type": "string"
      },
      "characterSet": {
        "!type": "string"
      },
      "contentType": {
        "!type": "string"
      },
      "doctype": {
        "!type": "DocumentType"
      },
      "documentElement": {
        "!type": "Element"
      },
      "getElementsByTagName": {
        "!type": "fn(localName: string) -> HTMLCollection"
      },
      "getElementsByTagNameNS": {
        "!type": "fn(namespace: string, localName: string) -> HTMLCollection"
      },
      "getElementsByClassName": {
        "!type": "fn(classNames: string) -> HTMLCollection"
      },
      "getElementById": {
        "!type": "fn(elementId: string) -> Element"
      },
      "createElement": {
        "!type": "fn(localName: string) -> Element"
      },
      "createElementNS": {
        "!type": "fn(namespace: string, qualifiedName: string) -> Element"
      },
      "createDocumentFragment": {
        "!type": "fn() -> DocumentFragment"
      },
      "createTextNode": {
        "!type": "fn(data: string) -> Text"
      },
      "createComment": {
        "!type": "fn(data: string) -> Comment"
      },
      "createProcessingInstruction": {
        "!type": "fn(target: string, data: string) -> ProcessingInstruction"
      },
      "importNode": {
        "!type": "fn(node: Node, deep?: bool) -> Node"
      },
      "adoptNode": {
        "!type": "fn(node: Node) -> Node"
      },
      "createEvent": {
        "!type": "fn(interface: string) -> Event"
      },
      "createRange": {
        "!type": "fn() -> Range"
      },
      "createNodeIterator": {
        "!type": "fn(root: Node, whatToShow?: number, filter?: NodeFilter) -> NodeIterator"
      },
      "createTreeWalker": {
        "!type": "fn(root: Node, whatToShow?: number, filter?: NodeFilter) -> TreeWalker"
      },
      "createCDATASection": {
        "!type": "fn(data: string) -> CDATASection"
      },
      "createAttribute": {
        "!type": "fn(name: string) -> Attr"
      },
      "createAttributeNS": {
        "!type": "fn(namespace: string, name: string) -> Attr"
      },
      "inputEncoding": {
        "!type": "string"
      },
      "location": {
        "!type": "Location"
      },
      "referrer": {
        "!type": "string"
      },
      "lastModified": {
        "!type": "string"
      },
      "readyState": {
        "!type": "string"
      },
      "title": {
        "!type": "string"
      },
      "dir": {
        "!type": "string"
      },
      "defaultView": {
        "!type": "WindowProxy"
      },
      "activeElement": {
        "!type": "Element"
      },
      "hasFocus": {
        "!type": "fn() -> bool"
      },
      "onreadystatechange": {
        "!type": "fn(+Event)"
      },
      "onwheel": {
        "!type": "fn(+Event)"
      },
      "oncopy": {
        "!type": "fn(+Event)"
      },
      "oncut": {
        "!type": "fn(+Event)"
      },
      "onpaste": {
        "!type": "fn(+Event)"
      },
      "onbeforescriptexecute": {
        "!type": "fn(+Event)"
      },
      "onafterscriptexecute": {
        "!type": "fn(+Event)"
      },
      "currentScript": {
        "!type": "Element"
      },
      "releaseCapture": {
        "!type": "fn()"
      },
      "documentURIObject": {
        "!type": "URI"
      },
      "referrerPolicy": {
        "!type": "number"
      },
      "registerElement": {
        "!type": "fn(name: string, options?: ElementRegistrationOptions) -> object"
      },
      "hidden": {
        "!type": "bool"
      },
      "visibilityState": {
        "!type": "VisibilityState"
      },
      "styleSheets": {
        "!type": "StyleSheetList"
      },
      "selectedStyleSheetSet": {
        "!type": "string"
      },
      "lastStyleSheetSet": {
        "!type": "string"
      },
      "preferredStyleSheetSet": {
        "!type": "string"
      },
      "styleSheetSets": {
        "!type": "DOMStringList"
      },
      "enableStyleSheetsForSet": {
        "!type": "fn(name: string)"
      },
      "elementFromPoint": {
        "!type": "fn(x: number, y: number) -> Element"
      },
      "caretPositionFromPoint": {
        "!type": "fn(x: number, y: number) -> CaretPosition"
      },
      "undoManager": {
        "!type": "UndoManager"
      },
      "querySelector": {
        "!type": "fn(selectors: string) -> Element"
      },
      "querySelectorAll": {
        "!type": "fn(selectors: string) -> NodeList"
      },
      "timeline": {
        "!type": "DocumentTimeline"
      },
      "getAnonymousNodes": {
        "!type": "fn(elt: Element) -> NodeList"
      },
      "getAnonymousElementByAttribute": {
        "!type": "fn(elt: Element, attrName: string, attrValue: string) -> Element"
      },
      "getBindingParent": {
        "!type": "fn(node: Node) -> Element"
      },
      "loadBindingDocument": {
        "!type": "fn(documentURL: string)"
      },
      "createTouch": {
        "!type": "fn(view?: Window, target?: EventTarget, identifier?: number, pageX?: number, pageY?: number, screenX?: number, screenY?: number, clientX?: number, clientY?: number, radiusX?: number, radiusY?: number, rotationAngle?: number, force?: number) -> Touch"
      },
      "createTouchList": {
        "!type": "fn(touch: Touch, touches: Touch) -> TouchList"
      },
      "styleSheetChangeEventsEnabled": {
        "!type": "bool"
      },
      "obsoleteSheet": {
        "!type": "fn(sheetURI: URI)"
      },
      "docShell": {
        "!type": "nsIDocShell"
      },
      "contentLanguage": {
        "!type": "string"
      },
      "documentLoadGroup": {
        "!type": "nsILoadGroup"
      },
      "isSrcdocDocument": {
        "!type": "bool"
      },
      "insertAnonymousContent": {
        "!type": "fn(aElement: Element) -> AnonymousContent"
      },
      "removeAnonymousContent": {
        "!type": "fn(aContent: AnonymousContent)"
      },
      "createExpression": {
        "!type": "fn(expression: string, resolver: XPathNSResolver) -> XPathExpression"
      },
      "createNSResolver": {
        "!type": "fn(nodeResolver: Node) -> Node"
      },
      "evaluate": {
        "!type": "fn(expression: string, contextNode: Node, resolver: XPathNSResolver, type: number, result: object) -> XPathResult"
      },
      "queryInterface": {
        "!type": "fn(iid: IID) -> nsISupports"
      },
      "onabort": {
        "!type": "fn(+Event)"
      },
      "onblur": {
        "!type": "fn(+Event)"
      },
      "onfocus": {
        "!type": "fn(+Event)"
      },
      "oncanplay": {
        "!type": "fn(+Event)"
      },
      "oncanplaythrough": {
        "!type": "fn(+Event)"
      },
      "onchange": {
        "!type": "fn(+Event)"
      },
      "onclick": {
        "!type": "fn(+Event)"
      },
      "oncontextmenu": {
        "!type": "fn(+Event)"
      },
      "ondblclick": {
        "!type": "fn(+Event)"
      },
      "ondrag": {
        "!type": "fn(+Event)"
      },
      "ondragend": {
        "!type": "fn(+Event)"
      },
      "ondragenter": {
        "!type": "fn(+Event)"
      },
      "ondragleave": {
        "!type": "fn(+Event)"
      },
      "ondragover": {
        "!type": "fn(+Event)"
      },
      "ondragstart": {
        "!type": "fn(+Event)"
      },
      "ondrop": {
        "!type": "fn(+Event)"
      },
      "ondurationchange": {
        "!type": "fn(+Event)"
      },
      "onemptied": {
        "!type": "fn(+Event)"
      },
      "onended": {
        "!type": "fn(+Event)"
      },
      "oninput": {
        "!type": "fn(+Event)"
      },
      "oninvalid": {
        "!type": "fn(+Event)"
      },
      "onkeydown": {
        "!type": "fn(+Event)"
      },
      "onkeypress": {
        "!type": "fn(+Event)"
      },
      "onkeyup": {
        "!type": "fn(+Event)"
      },
      "onload": {
        "!type": "fn(+Event)"
      },
      "onloadeddata": {
        "!type": "fn(+Event)"
      },
      "onloadedmetadata": {
        "!type": "fn(+Event)"
      },
      "onloadstart": {
        "!type": "fn(+Event)"
      },
      "onmousedown": {
        "!type": "fn(+Event)"
      },
      "onmouseenter": {
        "!type": "fn(+Event)"
      },
      "onmouseleave": {
        "!type": "fn(+Event)"
      },
      "onmousemove": {
        "!type": "fn(+Event)"
      },
      "onmouseout": {
        "!type": "fn(+Event)"
      },
      "onmouseover": {
        "!type": "fn(+Event)"
      },
      "onmouseup": {
        "!type": "fn(+Event)"
      },
      "onpause": {
        "!type": "fn(+Event)"
      },
      "onplay": {
        "!type": "fn(+Event)"
      },
      "onplaying": {
        "!type": "fn(+Event)"
      },
      "onprogress": {
        "!type": "fn(+Event)"
      },
      "onratechange": {
        "!type": "fn(+Event)"
      },
      "onreset": {
        "!type": "fn(+Event)"
      },
      "onresize": {
        "!type": "fn(+Event)"
      },
      "onscroll": {
        "!type": "fn(+Event)"
      },
      "onseeked": {
        "!type": "fn(+Event)"
      },
      "onseeking": {
        "!type": "fn(+Event)"
      },
      "onselect": {
        "!type": "fn(+Event)"
      },
      "onshow": {
        "!type": "fn(+Event)"
      },
      "onstalled": {
        "!type": "fn(+Event)"
      },
      "onsubmit": {
        "!type": "fn(+Event)"
      },
      "onsuspend": {
        "!type": "fn(+Event)"
      },
      "ontimeupdate": {
        "!type": "fn(+Event)"
      },
      "onvolumechange": {
        "!type": "fn(+Event)"
      },
      "onwaiting": {
        "!type": "fn(+Event)"
      },
      "onpointercancel": {
        "!type": "fn(+Event)"
      },
      "onpointerdown": {
        "!type": "fn(+Event)"
      },
      "onpointerup": {
        "!type": "fn(+Event)"
      },
      "onpointermove": {
        "!type": "fn(+Event)"
      },
      "onpointerout": {
        "!type": "fn(+Event)"
      },
      "onpointerover": {
        "!type": "fn(+Event)"
      },
      "onpointerenter": {
        "!type": "fn(+Event)"
      },
      "onpointerleave": {
        "!type": "fn(+Event)"
      },
      "ongotpointercapture": {
        "!type": "fn(+Event)"
      },
      "onlostpointercapture": {
        "!type": "fn(+Event)"
      },
      "onmozfullscreenchange": {
        "!type": "fn(+Event)"
      },
      "onmozfullscreenerror": {
        "!type": "fn(+Event)"
      },
      "onmozpointerlockchange": {
        "!type": "fn(+Event)"
      },
      "onmozpointerlockerror": {
        "!type": "fn(+Event)"
      },
      "ontouchstart": {
        "!type": "fn(+Event)"
      },
      "ontouchend": {
        "!type": "fn(+Event)"
      },
      "ontouchmove": {
        "!type": "fn(+Event)"
      },
      "ontouchcancel": {
        "!type": "fn(+Event)"
      },
      "children": {
        "!type": "HTMLCollection"
      },
      "firstElementChild": {
        "!type": "Element"
      },
      "lastElementChild": {
        "!type": "Element"
      },
      "childElementCount": {
        "!type": "number"
      },
      "onerror": {
        "!type": "fn(+Event)"
      },
      "getBoxQuads": {
        "!type": "fn(options?: BoxQuadOptions) -> [DOMQuad]"
      },
      "convertQuadFromNode": {
        "!type": "fn(quad: DOMQuad, from: GeometryNode, options?: ConvertCoordinateOptions) -> DOMQuad"
      },
      "convertRectFromNode": {
        "!type": "fn(rect: DOMRectReadOnly, from: GeometryNode, options?: ConvertCoordinateOptions) -> DOMQuad"
      },
      "convertPointFromNode": {
        "!type": "fn(point: DOMPointInit, from: GeometryNode, options?: ConvertCoordinateOptions) -> DOMPoint"
      },
      "fonts": {
        "!type": "FontFaceSet"
      }
    }
  },
  "DocumentFragment": {
    "!type": "fn()",
    "prototype": {
      "getElementById": {
        "!type": "fn(elementId: string) -> Element"
      },
      "querySelector": {
        "!type": "fn(selectors: string) -> Element"
      },
      "querySelectorAll": {
        "!type": "fn(selectors: string) -> NodeList"
      },
      "children": {
        "!type": "HTMLCollection"
      },
      "firstElementChild": {
        "!type": "Element"
      },
      "lastElementChild": {
        "!type": "Element"
      },
      "childElementCount": {
        "!type": "number"
      },
      "queryInterface": {
        "!type": "fn(iid: IID) -> nsISupports"
      }
    }
  },
  "DocumentTimeline": {},
  "DocumentType": {
    "name": {
      "!type": "string"
    },
    "publicId": {
      "!type": "string"
    },
    "systemId": {
      "!type": "string"
    },
    "internalSubset": {
      "!type": "string"
    },
    "remove": {
      "!type": "fn()"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "DownloadEvent": {
    "!type": "fn(type: string, eventInitDict?: DownloadEventInit)",
    "prototype": {
      "download": {
        "!type": "DOMDownload"
      }
    }
  },
  "DOMDownload": {
    "totalBytes": {
      "!type": "number"
    },
    "currentBytes": {
      "!type": "number"
    },
    "url": {
      "!type": "string"
    },
    "path": {
      "!type": "string"
    },
    "storageName": {
      "!type": "string"
    },
    "storagePath": {
      "!type": "string"
    },
    "state": {
      "!type": "DownloadState"
    },
    "contentType": {
      "!type": "string"
    },
    "startTime": {
      "!type": "Date"
    },
    "id": {
      "!type": "string"
    },
    "sourceAppManifestURL": {
      "!type": "string"
    },
    "error": {
      "!type": "DOMError"
    },
    "pause": {
      "!type": "fn() -> +Promise[value=DOMDownload]"
    },
    "resume": {
      "!type": "fn() -> +Promise[value=DOMDownload]"
    },
    "onstatechange": {
      "!type": "fn(+Event)"
    }
  },
  "DragEvent": {
    "!type": "fn(type: string, eventInitDict?: DragEventInit)",
    "prototype": {
      "dataTransfer": {
        "!type": "DataTransfer"
      },
      "initDragEvent": {
        "!type": "fn(type: string, canBubble: bool, cancelable: bool, aView: Window, aDetail: number, aScreenX: number, aScreenY: number, aClientX: number, aClientY: number, aCtrlKey: bool, aAltKey: bool, aShiftKey: bool, aMetaKey: bool, aButton: number, aRelatedTarget: EventTarget, aDataTransfer: DataTransfer)"
      }
    }
  },
  "DummyInterface": {
    "lifecycleCallbacks": {
      "!type": "fn(arg?: LifecycleCallbacks)"
    }
  },
  "DummyInterfaceWorkers": {},
  "DynamicsCompressorNode": {
    "threshold": {
      "!type": "AudioParam"
    },
    "knee": {
      "!type": "AudioParam"
    },
    "ratio": {
      "!type": "AudioParam"
    },
    "reduction": {
      "!type": "number"
    },
    "attack": {
      "!type": "AudioParam"
    },
    "release": {
      "!type": "AudioParam"
    },
    "passThrough": {
      "!type": "bool"
    }
  },
  "Element": {
    "tagName": {
      "!type": "string"
    },
    "id": {
      "!type": "string"
    },
    "className": {
      "!type": "string"
    },
    "classList": {
      "!type": "DOMTokenList"
    },
    "attributes": {
      "!type": "NamedNodeMap"
    },
    "getAttribute": {
      "!type": "fn(name: string) -> string"
    },
    "getAttributeNS": {
      "!type": "fn(namespace: string, localName: string) -> string"
    },
    "setAttribute": {
      "!type": "fn(name: string, value: string)"
    },
    "setAttributeNS": {
      "!type": "fn(namespace: string, name: string, value: string)"
    },
    "removeAttribute": {
      "!type": "fn(name: string)"
    },
    "removeAttributeNS": {
      "!type": "fn(namespace: string, localName: string)"
    },
    "hasAttribute": {
      "!type": "fn(name: string) -> bool"
    },
    "hasAttributeNS": {
      "!type": "fn(namespace: string, localName: string) -> bool"
    },
    "hasAttributes": {
      "!type": "fn() -> bool"
    },
    "closest": {
      "!type": "fn(selector: string) -> Element"
    },
    "matches": {
      "!type": "fn(selector: string) -> bool"
    },
    "getElementsByTagName": {
      "!type": "fn(localName: string) -> HTMLCollection"
    },
    "getElementsByTagNameNS": {
      "!type": "fn(namespace: string, localName: string) -> HTMLCollection"
    },
    "getElementsByClassName": {
      "!type": "fn(classNames: string) -> HTMLCollection"
    },
    "fontSizeInflation": {
      "!type": "number"
    },
    "onwheel": {
      "!type": "fn(+Event)"
    },
    "setPointerCapture": {
      "!type": "fn(pointerId: number)"
    },
    "releasePointerCapture": {
      "!type": "fn(pointerId: number)"
    },
    "setCapture": {
      "!type": "fn(retargetToElement?: bool)"
    },
    "releaseCapture": {
      "!type": "fn()"
    },
    "getAttributeNode": {
      "!type": "fn(name: string) -> Attr"
    },
    "setAttributeNode": {
      "!type": "fn(newAttr: Attr) -> Attr"
    },
    "removeAttributeNode": {
      "!type": "fn(oldAttr: Attr) -> Attr"
    },
    "getAttributeNodeNS": {
      "!type": "fn(namespaceURI: string, localName: string) -> Attr"
    },
    "setAttributeNodeNS": {
      "!type": "fn(newAttr: Attr) -> Attr"
    },
    "scrollByNoFlush": {
      "!type": "fn(dx: number, dy: number) -> bool"
    },
    "getClientRects": {
      "!type": "fn() -> DOMRectList"
    },
    "getBoundingClientRect": {
      "!type": "fn() -> DOMRect"
    },
    "scrollIntoView": {
      "!type": "fn(top: bool)"
    },
    "scrollTop": {
      "!type": "number"
    },
    "scrollLeft": {
      "!type": "number"
    },
    "scrollWidth": {
      "!type": "number"
    },
    "scrollHeight": {
      "!type": "number"
    },
    "scroll": {
      "!type": "fn(x: number, y: number)"
    },
    "scrollTo": {
      "!type": "fn(x: number, y: number)"
    },
    "scrollBy": {
      "!type": "fn(x: number, y: number)"
    },
    "clientTop": {
      "!type": "number"
    },
    "clientLeft": {
      "!type": "number"
    },
    "clientWidth": {
      "!type": "number"
    },
    "clientHeight": {
      "!type": "number"
    },
    "scrollTopMax": {
      "!type": "number"
    },
    "scrollLeftMax": {
      "!type": "number"
    },
    "undoManager": {
      "!type": "UndoManager"
    },
    "undoScope": {
      "!type": "bool"
    },
    "innerHTML": {
      "!type": "string"
    },
    "outerHTML": {
      "!type": "string"
    },
    "insertAdjacentHTML": {
      "!type": "fn(position: string, text: string)"
    },
    "querySelector": {
      "!type": "fn(selectors: string) -> Element"
    },
    "querySelectorAll": {
      "!type": "fn(selectors: string) -> NodeList"
    },
    "createShadowRoot": {
      "!type": "fn() -> ShadowRoot"
    },
    "getDestinationInsertionPoints": {
      "!type": "fn() -> NodeList"
    },
    "shadowRoot": {
      "!type": "ShadowRoot"
    },
    "remove": {
      "!type": "fn()"
    },
    "previousElementSibling": {
      "!type": "Element"
    },
    "nextElementSibling": {
      "!type": "Element"
    },
    "children": {
      "!type": "HTMLCollection"
    },
    "firstElementChild": {
      "!type": "Element"
    },
    "lastElementChild": {
      "!type": "Element"
    },
    "childElementCount": {
      "!type": "number"
    },
    "getAnimations": {
      "!type": "fn() -> [Animation]"
    },
    "getBoxQuads": {
      "!type": "fn(options?: BoxQuadOptions) -> [DOMQuad]"
    },
    "convertQuadFromNode": {
      "!type": "fn(quad: DOMQuad, from: GeometryNode, options?: ConvertCoordinateOptions) -> DOMQuad"
    },
    "convertRectFromNode": {
      "!type": "fn(rect: DOMRectReadOnly, from: GeometryNode, options?: ConvertCoordinateOptions) -> DOMQuad"
    },
    "convertPointFromNode": {
      "!type": "fn(point: DOMPointInit, from: GeometryNode, options?: ConvertCoordinateOptions) -> DOMPoint"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "EngineeringMode": {
    "getValue": {
      "!type": "fn(name: string) -> +Promise[value=string]"
    },
    "setValue": {
      "!type": "fn(name: string, value: string) -> +Promise[value=void]"
    },
    "onmessage": {
      "!type": "fn(+Event)"
    }
  },
  "ErrorEvent": {
    "!type": "fn(type: string, eventInitDict?: ErrorEventInit)",
    "prototype": {
      "message": {
        "!type": "string"
      },
      "filename": {
        "!type": "string"
      },
      "lineno": {
        "!type": "number"
      },
      "colno": {
        "!type": "number"
      },
      "error": {
        "!type": "?"
      }
    }
  },
  "Event": {
    "!type": "fn(type: string, eventInitDict?: EventInit)",
    "prototype": {
      "type": {
        "!type": "string"
      },
      "target": {
        "!type": "EventTarget"
      },
      "currentTarget": {
        "!type": "EventTarget"
      },
      "NONE": {
        "!type": "number"
      },
      "CAPTURING_PHASE": {
        "!type": "number"
      },
      "AT_TARGET": {
        "!type": "number"
      },
      "BUBBLING_PHASE": {
        "!type": "number"
      },
      "eventPhase": {
        "!type": "number"
      },
      "stopPropagation": {
        "!type": "fn()"
      },
      "stopImmediatePropagation": {
        "!type": "fn()"
      },
      "bubbles": {
        "!type": "bool"
      },
      "cancelable": {
        "!type": "bool"
      },
      "preventDefault": {
        "!type": "fn()"
      },
      "defaultPrevented": {
        "!type": "bool"
      },
      "isTrusted": {
        "!type": "bool"
      },
      "timeStamp": {
        "!type": "DOMHighResTimeStamp"
      },
      "initEvent": {
        "!type": "fn(type: string, bubbles: bool, cancelable: bool)"
      },
      "ALT_MASK": {
        "!type": "number"
      },
      "CONTROL_MASK": {
        "!type": "number"
      },
      "SHIFT_MASK": {
        "!type": "number"
      },
      "META_MASK": {
        "!type": "number"
      },
      "originalTarget": {
        "!type": "EventTarget"
      },
      "explicitOriginalTarget": {
        "!type": "EventTarget"
      },
      "composedTarget": {
        "!type": "EventTarget"
      },
      "multipleActionsPrevented": {
        "!type": "bool"
      },
      "isSynthesized": {
        "!type": "bool"
      },
      "getPreventDefault": {
        "!type": "fn() -> bool"
      },
      "queryInterface": {
        "!type": "fn(iid: IID) -> nsISupports"
      }
    }
  },
  "EventSource": {
    "!type": "fn(url: string, eventSourceInitDict?: EventSourceInit)",
    "prototype": {
      "url": {
        "!type": "string"
      },
      "withCredentials": {
        "!type": "bool"
      },
      "CONNECTING": {
        "!type": "number"
      },
      "OPEN": {
        "!type": "number"
      },
      "CLOSED": {
        "!type": "number"
      },
      "readyState": {
        "!type": "number"
      },
      "onopen": {
        "!type": "fn(+Event)"
      },
      "onmessage": {
        "!type": "fn(+Event)"
      },
      "onerror": {
        "!type": "fn(+Event)"
      },
      "close": {
        "!type": "fn()"
      },
      "queryInterface": {
        "!type": "fn(iid: IID) -> nsISupports"
      }
    }
  },
  "EventTarget": {
    "addEventListener": {
      "!type": "fn(type: string, listener: EventListener, capture?: bool, wantsUntrusted?: bool)"
    },
    "removeEventListener": {
      "!type": "fn(type: string, listener: EventListener, capture?: bool)"
    },
    "dispatchEvent": {
      "!type": "fn(event: Event) -> bool"
    },
    "setEventHandler": {
      "!type": "fn(type: string, handler: fn(+Event))"
    },
    "getEventHandler": {
      "!type": "fn(type: string) -> fn(+Event)"
    },
    "ownerGlobal": {
      "!type": "WindowProxy"
    }
  },
  "ExtendableEvent": {
    "!type": "fn(type: string, eventInitDict?: ExtendableEventInit)",
    "prototype": {
      "waitUntil": {
        "!type": "fn(p: +Promise)"
      }
    }
  },
  "External": {
    "AddSearchProvider": {
      "!type": "fn(aDescriptionURL: string)"
    },
    "IsSearchProviderInstalled": {
      "!type": "fn(aSearchURL: string) -> number"
    },
    "addSearchEngine": {
      "!type": "fn(engineURL: string, iconURL: string, suggestedTitle: string, suggestedCategory: string)"
    }
  },
  "FMRadio": {
    "enabled": {
      "!type": "bool"
    },
    "rdsEnabled": {
      "!type": "bool"
    },
    "antennaAvailable": {
      "!type": "bool"
    },
    "frequency": {
      "!type": "number"
    },
    "frequencyUpperBound": {
      "!type": "number"
    },
    "frequencyLowerBound": {
      "!type": "number"
    },
    "channelWidth": {
      "!type": "number"
    },
    "rdsGroupMask": {
      "!type": "number"
    },
    "pi": {
      "!type": "number"
    },
    "pty": {
      "!type": "number"
    },
    "ps": {
      "!type": "string"
    },
    "rt": {
      "!type": "string"
    },
    "rdsgroup": {
      "!type": "Uint16Array"
    },
    "onenabled": {
      "!type": "fn(+Event)"
    },
    "ondisabled": {
      "!type": "fn(+Event)"
    },
    "onrdsenabled": {
      "!type": "fn(+Event)"
    },
    "onrdsdisabled": {
      "!type": "fn(+Event)"
    },
    "onantennaavailablechange": {
      "!type": "fn(+Event)"
    },
    "onfrequencychange": {
      "!type": "fn(+Event)"
    },
    "onpichange": {
      "!type": "fn(+Event)"
    },
    "onptychange": {
      "!type": "fn(+Event)"
    },
    "onpschange": {
      "!type": "fn(+Event)"
    },
    "onrtchange": {
      "!type": "fn(+Event)"
    },
    "onnewrdsgroup": {
      "!type": "fn(+Event)"
    },
    "disable": {
      "!type": "fn() -> DOMRequest"
    },
    "enable": {
      "!type": "fn(frequency: number) -> DOMRequest"
    },
    "setFrequency": {
      "!type": "fn(frequency: number) -> DOMRequest"
    },
    "seekUp": {
      "!type": "fn() -> DOMRequest"
    },
    "seekDown": {
      "!type": "fn() -> DOMRequest"
    },
    "cancelSeek": {
      "!type": "fn() -> DOMRequest"
    },
    "enableRDS": {
      "!type": "fn() -> DOMRequest"
    },
    "disableRDS": {
      "!type": "fn() -> DOMRequest"
    }
  },
  "FetchEvent": {
    "!type": "fn(type: string, eventInitDict?: FetchEventInit)",
    "prototype": {
      "request": {
        "!type": "Request"
      },
      "client": {
        "!type": "Client"
      },
      "isReload": {
        "!type": "bool"
      },
      "respondWith": {
        "!type": "fn(r: ?)"
      }
    }
  },
  "File": {
    "!type": "fn(fileBits: string, options?: ChromeFilePropertyBag)",
    "prototype": {
      "name": {
        "!type": "string"
      },
      "lastModified": {
        "!type": "number"
      },
      "lastModifiedDate": {
        "!type": "Date"
      }
    }
  },
  "FileList": {
    "item": {
      "!type": "fn(index: number) -> File"
    },
    "length": {
      "!type": "number"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "FileReader": {
    "!type": "fn()",
    "prototype": {
      "readAsArrayBuffer": {
        "!type": "fn(blob: Blob)"
      },
      "readAsText": {
        "!type": "fn(blob: Blob, label?: string)"
      },
      "readAsDataURL": {
        "!type": "fn(blob: Blob)"
      },
      "abort": {
        "!type": "fn()"
      },
      "EMPTY": {
        "!type": "number"
      },
      "LOADING": {
        "!type": "number"
      },
      "DONE": {
        "!type": "number"
      },
      "readyState": {
        "!type": "number"
      },
      "result": {
        "!type": "?"
      },
      "error": {
        "!type": "DOMError"
      },
      "onloadstart": {
        "!type": "fn(+Event)"
      },
      "onprogress": {
        "!type": "fn(+Event)"
      },
      "onload": {
        "!type": "fn(+Event)"
      },
      "onabort": {
        "!type": "fn(+Event)"
      },
      "onerror": {
        "!type": "fn(+Event)"
      },
      "onloadend": {
        "!type": "fn(+Event)"
      },
      "readAsBinaryString": {
        "!type": "fn(filedata: Blob)"
      }
    }
  },
  "FileReaderSync": {
    "!type": "fn()",
    "prototype": {
      "readAsArrayBuffer": {
        "!type": "fn(blob: Blob) -> ArrayBuffer"
      },
      "readAsBinaryString": {
        "!type": "fn(blob: Blob) -> string"
      },
      "readAsText": {
        "!type": "fn(blob: Blob, encoding?: string) -> string"
      },
      "readAsDataURL": {
        "!type": "fn(blob: Blob) -> string"
      }
    }
  },
  "FocusEvent": {
    "!type": "fn(typeArg: string, focusEventInitDict?: FocusEventInit)",
    "prototype": {
      "relatedTarget": {
        "!type": "EventTarget"
      }
    }
  },
  "FontFace": {
    "!type": "fn(family: string, source: ?, descriptors?: FontFaceDescriptors)",
    "prototype": {
      "family": {
        "!type": "string"
      },
      "style": {
        "!type": "string"
      },
      "weight": {
        "!type": "string"
      },
      "stretch": {
        "!type": "string"
      },
      "unicodeRange": {
        "!type": "string"
      },
      "variant": {
        "!type": "string"
      },
      "featureSettings": {
        "!type": "string"
      },
      "status": {
        "!type": "FontFaceLoadStatus"
      },
      "load": {
        "!type": "fn() -> +Promise[value=FontFace]"
      },
      "loaded": {
        "!type": "+Promise[value=FontFace]"
      }
    }
  },
  "FontFaceSet": {
    "size": {
      "!type": "number"
    },
    "add": {
      "!type": "fn(font: FontFace)"
    },
    "has": {
      "!type": "fn(font: FontFace) -> bool"
    },
    "delete": {
      "!type": "fn(font: FontFace) -> bool"
    },
    "clear": {
      "!type": "fn()"
    },
    "entries": {
      "!type": "fn() -> FontFaceSetIterator"
    },
    "values": {
      "!type": "fn() -> FontFaceSetIterator"
    },
    "forEach": {
      "!type": "fn(cb: FontFaceSetForEachCallback, thisArg?: ?)"
    },
    "onloading": {
      "!type": "fn(+Event)"
    },
    "onloadingdone": {
      "!type": "fn(+Event)"
    },
    "onloadingerror": {
      "!type": "fn(+Event)"
    },
    "ready": {
      "!type": "+Promise[value=void]"
    },
    "status": {
      "!type": "FontFaceSetLoadStatus"
    }
  },
  "FormData": {
    "!type": "fn(form?: HTMLFormElement)",
    "prototype": {
      "append": {
        "!type": "fn(name: string, value: Blob, filename?: string)"
      },
      "delete": {
        "!type": "fn(name: string)"
      },
      "get": {
        "!type": "fn(name: string) -> FormDataEntryValue"
      },
      "getAll": {
        "!type": "fn(name: string) -> [FormDataEntryValue]"
      },
      "has": {
        "!type": "fn(name: string) -> bool"
      },
      "set": {
        "!type": "fn(name: string, value: Blob, filename?: string)"
      },
      "queryInterface": {
        "!type": "fn(iid: IID) -> nsISupports"
      }
    }
  },
  "GainNode": {
    "gain": {
      "!type": "AudioParam"
    },
    "passThrough": {
      "!type": "bool"
    }
  },
  "GamepadButton": {
    "pressed": {
      "!type": "bool"
    },
    "value": {
      "!type": "number"
    }
  },
  "Gamepad": {
    "id": {
      "!type": "string"
    },
    "index": {
      "!type": "number"
    },
    "mapping": {
      "!type": "GamepadMappingType"
    },
    "connected": {
      "!type": "bool"
    },
    "buttons": {
      "!type": "[GamepadButton]"
    },
    "axes": {
      "!type": "[number]"
    },
    "timestamp": {
      "!type": "DOMHighResTimeStamp"
    }
  },
  "GamepadAxisMoveEvent": {
    "!type": "fn(type: string, eventInitDict?: GamepadAxisMoveEventInit)",
    "prototype": {
      "axis": {
        "!type": "number"
      },
      "value": {
        "!type": "number"
      }
    }
  },
  "GamepadButtonEvent": {
    "!type": "fn(type: string, eventInitDict?: GamepadButtonEventInit)",
    "prototype": {
      "button": {
        "!type": "number"
      }
    }
  },
  "GamepadEvent": {
    "!type": "fn(type: string, eventInitDict?: GamepadEventInit)",
    "prototype": {
      "gamepad": {
        "!type": "Gamepad"
      }
    }
  },
  "HDMIInputPort": {},
  "HTMLAllCollection": {
    "length": {
      "!type": "number"
    },
    "item": {
      "!type": "fn(index: number) -> Node"
    },
    "namedItem": {
      "!type": "fn(name: string) -> ?"
    }
  },
  "HTMLAnchorElement": {
    "target": {
      "!type": "string"
    },
    "download": {
      "!type": "string"
    },
    "ping": {
      "!type": "string"
    },
    "rel": {
      "!type": "string"
    },
    "relList": {
      "!type": "DOMTokenList"
    },
    "hreflang": {
      "!type": "string"
    },
    "type": {
      "!type": "string"
    },
    "text": {
      "!type": "string"
    },
    "coords": {
      "!type": "string"
    },
    "charset": {
      "!type": "string"
    },
    "name": {
      "!type": "string"
    },
    "rev": {
      "!type": "string"
    },
    "shape": {
      "!type": "string"
    },
    "href": {
      "!type": "string"
    },
    "origin": {
      "!type": "string"
    },
    "protocol": {
      "!type": "string"
    },
    "username": {
      "!type": "string"
    },
    "password": {
      "!type": "string"
    },
    "host": {
      "!type": "string"
    },
    "hostname": {
      "!type": "string"
    },
    "port": {
      "!type": "string"
    },
    "pathname": {
      "!type": "string"
    },
    "search": {
      "!type": "string"
    },
    "hash": {
      "!type": "string"
    },
    "searchParams": {
      "!type": "URLSearchParams"
    }
  },
  "HTMLAppletElement": {
    "align": {
      "!type": "string"
    },
    "alt": {
      "!type": "string"
    },
    "archive": {
      "!type": "string"
    },
    "code": {
      "!type": "string"
    },
    "codeBase": {
      "!type": "string"
    },
    "height": {
      "!type": "string"
    },
    "hspace": {
      "!type": "number"
    },
    "name": {
      "!type": "string"
    },
    "object": {
      "!type": "string"
    },
    "vspace": {
      "!type": "number"
    },
    "width": {
      "!type": "string"
    }
  },
  "HTMLAreaElement": {
    "alt": {
      "!type": "string"
    },
    "coords": {
      "!type": "string"
    },
    "shape": {
      "!type": "string"
    },
    "target": {
      "!type": "string"
    },
    "download": {
      "!type": "string"
    },
    "ping": {
      "!type": "string"
    },
    "rel": {
      "!type": "string"
    },
    "relList": {
      "!type": "DOMTokenList"
    },
    "noHref": {
      "!type": "bool"
    },
    "href": {
      "!type": "string"
    },
    "origin": {
      "!type": "string"
    },
    "protocol": {
      "!type": "string"
    },
    "username": {
      "!type": "string"
    },
    "password": {
      "!type": "string"
    },
    "host": {
      "!type": "string"
    },
    "hostname": {
      "!type": "string"
    },
    "port": {
      "!type": "string"
    },
    "pathname": {
      "!type": "string"
    },
    "search": {
      "!type": "string"
    },
    "hash": {
      "!type": "string"
    },
    "searchParams": {
      "!type": "URLSearchParams"
    }
  },
  "HTMLAudioElement": {
    "!type": "fn(src?: string)",
    "prototype": {}
  },
  "Audio": {
    "!type": "fn(src?: string)",
    "prototype": {}
  },
  "HTMLBRElement": {
    "clear": {
      "!type": "string"
    }
  },
  "HTMLBaseElement": {
    "href": {
      "!type": "string"
    },
    "target": {
      "!type": "string"
    }
  },
  "HTMLBodyElement": {
    "text": {
      "!type": "string"
    },
    "link": {
      "!type": "string"
    },
    "vLink": {
      "!type": "string"
    },
    "aLink": {
      "!type": "string"
    },
    "bgColor": {
      "!type": "string"
    },
    "background": {
      "!type": "string"
    },
    "onafterprint": {
      "!type": "fn(+Event)"
    },
    "onbeforeprint": {
      "!type": "fn(+Event)"
    },
    "onbeforeunload": {
      "!type": "OnBeforeUnloadEventHandler"
    },
    "onhashchange": {
      "!type": "fn(+Event)"
    },
    "onlanguagechange": {
      "!type": "fn(+Event)"
    },
    "onmessage": {
      "!type": "fn(+Event)"
    },
    "onoffline": {
      "!type": "fn(+Event)"
    },
    "ononline": {
      "!type": "fn(+Event)"
    },
    "onpagehide": {
      "!type": "fn(+Event)"
    },
    "onpageshow": {
      "!type": "fn(+Event)"
    },
    "onpopstate": {
      "!type": "fn(+Event)"
    },
    "onunload": {
      "!type": "fn(+Event)"
    }
  },
  "HTMLButtonElement": {
    "autofocus": {
      "!type": "bool"
    },
    "disabled": {
      "!type": "bool"
    },
    "form": {
      "!type": "HTMLFormElement"
    },
    "formAction": {
      "!type": "string"
    },
    "formEnctype": {
      "!type": "string"
    },
    "formMethod": {
      "!type": "string"
    },
    "formNoValidate": {
      "!type": "bool"
    },
    "formTarget": {
      "!type": "string"
    },
    "name": {
      "!type": "string"
    },
    "type": {
      "!type": "string"
    },
    "value": {
      "!type": "string"
    },
    "willValidate": {
      "!type": "bool"
    },
    "validity": {
      "!type": "ValidityState"
    },
    "validationMessage": {
      "!type": "string"
    },
    "checkValidity": {
      "!type": "fn() -> bool"
    },
    "setCustomValidity": {
      "!type": "fn(error: string)"
    }
  },
  "Variant": {},
  "HTMLCanvasElement": {
    "width": {
      "!type": "number"
    },
    "height": {
      "!type": "number"
    },
    "getContext": {
      "!type": "fn(contextId: string, contextOptions?: ?) -> nsISupports"
    },
    "toDataURL": {
      "!type": "fn(type?: string, encoderOptions?: ?) -> string"
    },
    "toBlob": {
      "!type": "fn(callback: FileCallback, type?: string, encoderOptions?: ?)"
    }
  },
  "HTMLCollection": {
    "length": {
      "!type": "number"
    },
    "item": {
      "!type": "fn(index: number) -> Element"
    },
    "namedItem": {
      "!type": "fn(name: string) -> Element"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "HTMLContentElement": {
    "select": {
      "!type": "string"
    },
    "getDistributedNodes": {
      "!type": "fn() -> NodeList"
    }
  },
  "HTMLDListElement": {
    "compact": {
      "!type": "bool"
    }
  },
  "HTMLDataElement": {
    "value": {
      "!type": "string"
    }
  },
  "HTMLDataListElement": {
    "options": {
      "!type": "HTMLCollection"
    }
  },
  "HTMLDirectoryElement": {
    "compact": {
      "!type": "bool"
    }
  },
  "HTMLDivElement": {
    "align": {
      "!type": "string"
    }
  },
  "HTMLDocument": {
    "domain": {
      "!type": "string"
    },
    "cookie": {
      "!type": "string"
    },
    "body": {
      "!type": "HTMLElement"
    },
    "head": {
      "!type": "HTMLHeadElement"
    },
    "images": {
      "!type": "HTMLCollection"
    },
    "embeds": {
      "!type": "HTMLCollection"
    },
    "plugins": {
      "!type": "HTMLCollection"
    },
    "links": {
      "!type": "HTMLCollection"
    },
    "forms": {
      "!type": "HTMLCollection"
    },
    "scripts": {
      "!type": "HTMLCollection"
    },
    "getElementsByName": {
      "!type": "fn(elementName: string) -> NodeList"
    },
    "getItems": {
      "!type": "fn(typeNames?: string) -> NodeList"
    },
    "open": {
      "!type": "fn(type?: string, replace?: string) -> Document"
    },
    "close": {
      "!type": "fn()"
    },
    "write": {
      "!type": "fn(text: string)"
    },
    "writeln": {
      "!type": "fn(text: string)"
    },
    "designMode": {
      "!type": "string"
    },
    "execCommand": {
      "!type": "fn(commandId: string, showUI?: bool, value?: string) -> bool"
    },
    "queryCommandEnabled": {
      "!type": "fn(commandId: string) -> bool"
    },
    "queryCommandIndeterm": {
      "!type": "fn(commandId: string) -> bool"
    },
    "queryCommandState": {
      "!type": "fn(commandId: string) -> bool"
    },
    "queryCommandSupported": {
      "!type": "fn(commandId: string) -> bool"
    },
    "queryCommandValue": {
      "!type": "fn(commandId: string) -> string"
    },
    "fgColor": {
      "!type": "string"
    },
    "linkColor": {
      "!type": "string"
    },
    "vlinkColor": {
      "!type": "string"
    },
    "alinkColor": {
      "!type": "string"
    },
    "bgColor": {
      "!type": "string"
    },
    "anchors": {
      "!type": "HTMLCollection"
    },
    "applets": {
      "!type": "HTMLCollection"
    },
    "clear": {
      "!type": "fn()"
    },
    "all": {
      "!type": "HTMLAllCollection"
    },
    "getSelection": {
      "!type": "fn() -> Selection"
    },
    "captureEvents": {
      "!type": "fn()"
    },
    "releaseEvents": {
      "!type": "fn()"
    },
    "blockedTrackingNodeCount": {
      "!type": "number"
    },
    "blockedTrackingNodes": {
      "!type": "NodeList"
    }
  },
  "HTMLElement": {
    "title": {
      "!type": "string"
    },
    "lang": {
      "!type": "string"
    },
    "dir": {
      "!type": "string"
    },
    "dataset": {
      "!type": "DOMStringMap"
    },
    "itemScope": {
      "!type": "bool"
    },
    "itemType": {
      "!type": "DOMSettableTokenList"
    },
    "itemId": {
      "!type": "string"
    },
    "itemRef": {
      "!type": "DOMSettableTokenList"
    },
    "itemProp": {
      "!type": "DOMSettableTokenList"
    },
    "properties": {
      "!type": "HTMLPropertiesCollection"
    },
    "itemValue": {
      "!type": "?"
    },
    "hidden": {
      "!type": "bool"
    },
    "click": {
      "!type": "fn()"
    },
    "tabIndex": {
      "!type": "number"
    },
    "focus": {
      "!type": "fn()"
    },
    "blur": {
      "!type": "fn()"
    },
    "accessKey": {
      "!type": "string"
    },
    "accessKeyLabel": {
      "!type": "string"
    },
    "draggable": {
      "!type": "bool"
    },
    "contentEditable": {
      "!type": "string"
    },
    "isContentEditable": {
      "!type": "bool"
    },
    "contextMenu": {
      "!type": "HTMLMenuElement"
    },
    "spellcheck": {
      "!type": "bool"
    },
    "style": {
      "!type": "CSSStyleDeclaration"
    },
    "oncopy": {
      "!type": "fn(+Event)"
    },
    "oncut": {
      "!type": "fn(+Event)"
    },
    "onpaste": {
      "!type": "fn(+Event)"
    },
    "offsetParent": {
      "!type": "Element"
    },
    "offsetTop": {
      "!type": "number"
    },
    "offsetLeft": {
      "!type": "number"
    },
    "offsetWidth": {
      "!type": "number"
    },
    "offsetHeight": {
      "!type": "number"
    },
    "scrollgrab": {
      "!type": "bool"
    },
    "onabort": {
      "!type": "fn(+Event)"
    },
    "onblur": {
      "!type": "fn(+Event)"
    },
    "onfocus": {
      "!type": "fn(+Event)"
    },
    "oncanplay": {
      "!type": "fn(+Event)"
    },
    "oncanplaythrough": {
      "!type": "fn(+Event)"
    },
    "onchange": {
      "!type": "fn(+Event)"
    },
    "onclick": {
      "!type": "fn(+Event)"
    },
    "oncontextmenu": {
      "!type": "fn(+Event)"
    },
    "ondblclick": {
      "!type": "fn(+Event)"
    },
    "ondrag": {
      "!type": "fn(+Event)"
    },
    "ondragend": {
      "!type": "fn(+Event)"
    },
    "ondragenter": {
      "!type": "fn(+Event)"
    },
    "ondragleave": {
      "!type": "fn(+Event)"
    },
    "ondragover": {
      "!type": "fn(+Event)"
    },
    "ondragstart": {
      "!type": "fn(+Event)"
    },
    "ondrop": {
      "!type": "fn(+Event)"
    },
    "ondurationchange": {
      "!type": "fn(+Event)"
    },
    "onemptied": {
      "!type": "fn(+Event)"
    },
    "onended": {
      "!type": "fn(+Event)"
    },
    "oninput": {
      "!type": "fn(+Event)"
    },
    "oninvalid": {
      "!type": "fn(+Event)"
    },
    "onkeydown": {
      "!type": "fn(+Event)"
    },
    "onkeypress": {
      "!type": "fn(+Event)"
    },
    "onkeyup": {
      "!type": "fn(+Event)"
    },
    "onload": {
      "!type": "fn(+Event)"
    },
    "onloadeddata": {
      "!type": "fn(+Event)"
    },
    "onloadedmetadata": {
      "!type": "fn(+Event)"
    },
    "onloadstart": {
      "!type": "fn(+Event)"
    },
    "onmousedown": {
      "!type": "fn(+Event)"
    },
    "onmouseenter": {
      "!type": "fn(+Event)"
    },
    "onmouseleave": {
      "!type": "fn(+Event)"
    },
    "onmousemove": {
      "!type": "fn(+Event)"
    },
    "onmouseout": {
      "!type": "fn(+Event)"
    },
    "onmouseover": {
      "!type": "fn(+Event)"
    },
    "onmouseup": {
      "!type": "fn(+Event)"
    },
    "onpause": {
      "!type": "fn(+Event)"
    },
    "onplay": {
      "!type": "fn(+Event)"
    },
    "onplaying": {
      "!type": "fn(+Event)"
    },
    "onprogress": {
      "!type": "fn(+Event)"
    },
    "onratechange": {
      "!type": "fn(+Event)"
    },
    "onreset": {
      "!type": "fn(+Event)"
    },
    "onresize": {
      "!type": "fn(+Event)"
    },
    "onscroll": {
      "!type": "fn(+Event)"
    },
    "onseeked": {
      "!type": "fn(+Event)"
    },
    "onseeking": {
      "!type": "fn(+Event)"
    },
    "onselect": {
      "!type": "fn(+Event)"
    },
    "onshow": {
      "!type": "fn(+Event)"
    },
    "onstalled": {
      "!type": "fn(+Event)"
    },
    "onsubmit": {
      "!type": "fn(+Event)"
    },
    "onsuspend": {
      "!type": "fn(+Event)"
    },
    "ontimeupdate": {
      "!type": "fn(+Event)"
    },
    "onvolumechange": {
      "!type": "fn(+Event)"
    },
    "onwaiting": {
      "!type": "fn(+Event)"
    },
    "onpointercancel": {
      "!type": "fn(+Event)"
    },
    "onpointerdown": {
      "!type": "fn(+Event)"
    },
    "onpointerup": {
      "!type": "fn(+Event)"
    },
    "onpointermove": {
      "!type": "fn(+Event)"
    },
    "onpointerout": {
      "!type": "fn(+Event)"
    },
    "onpointerover": {
      "!type": "fn(+Event)"
    },
    "onpointerenter": {
      "!type": "fn(+Event)"
    },
    "onpointerleave": {
      "!type": "fn(+Event)"
    },
    "ongotpointercapture": {
      "!type": "fn(+Event)"
    },
    "onlostpointercapture": {
      "!type": "fn(+Event)"
    },
    "onmozfullscreenchange": {
      "!type": "fn(+Event)"
    },
    "onmozfullscreenerror": {
      "!type": "fn(+Event)"
    },
    "onmozpointerlockchange": {
      "!type": "fn(+Event)"
    },
    "onmozpointerlockerror": {
      "!type": "fn(+Event)"
    },
    "ontouchstart": {
      "!type": "fn(+Event)"
    },
    "ontouchend": {
      "!type": "fn(+Event)"
    },
    "ontouchmove": {
      "!type": "fn(+Event)"
    },
    "ontouchcancel": {
      "!type": "fn(+Event)"
    },
    "onerror": {
      "!type": "fn(+Event)"
    }
  },
  "HTMLUnknownElement": {},
  "HTMLEmbedElement": {
    "src": {
      "!type": "string"
    },
    "type": {
      "!type": "string"
    },
    "width": {
      "!type": "string"
    },
    "height": {
      "!type": "string"
    },
    "align": {
      "!type": "string"
    },
    "name": {
      "!type": "string"
    },
    "getSVGDocument": {
      "!type": "fn() -> Document"
    }
  },
  "HTMLFieldSetElement": {
    "disabled": {
      "!type": "bool"
    },
    "form": {
      "!type": "HTMLFormElement"
    },
    "name": {
      "!type": "string"
    },
    "type": {
      "!type": "string"
    },
    "elements": {
      "!type": "HTMLCollection"
    },
    "willValidate": {
      "!type": "bool"
    },
    "validity": {
      "!type": "ValidityState"
    },
    "validationMessage": {
      "!type": "string"
    },
    "checkValidity": {
      "!type": "fn() -> bool"
    },
    "setCustomValidity": {
      "!type": "fn(error: string)"
    }
  },
  "HTMLFontElement": {
    "color": {
      "!type": "string"
    },
    "face": {
      "!type": "string"
    },
    "size": {
      "!type": "string"
    }
  },
  "HTMLFormControlsCollection": {
    "namedItem": {
      "!type": "fn(name: string) -> ?"
    }
  },
  "HTMLFormElement": {
    "acceptCharset": {
      "!type": "string"
    },
    "action": {
      "!type": "string"
    },
    "autocomplete": {
      "!type": "string"
    },
    "enctype": {
      "!type": "string"
    },
    "encoding": {
      "!type": "string"
    },
    "method": {
      "!type": "string"
    },
    "name": {
      "!type": "string"
    },
    "noValidate": {
      "!type": "bool"
    },
    "target": {
      "!type": "string"
    },
    "elements": {
      "!type": "HTMLCollection"
    },
    "length": {
      "!type": "number"
    },
    "submit": {
      "!type": "fn()"
    },
    "reset": {
      "!type": "fn()"
    },
    "checkValidity": {
      "!type": "fn() -> bool"
    },
    "requestAutocomplete": {
      "!type": "fn()"
    }
  },
  "HTMLFrameElement": {
    "name": {
      "!type": "string"
    },
    "scrolling": {
      "!type": "string"
    },
    "src": {
      "!type": "string"
    },
    "frameBorder": {
      "!type": "string"
    },
    "longDesc": {
      "!type": "string"
    },
    "noResize": {
      "!type": "bool"
    },
    "contentDocument": {
      "!type": "Document"
    },
    "contentWindow": {
      "!type": "WindowProxy"
    },
    "marginHeight": {
      "!type": "string"
    },
    "marginWidth": {
      "!type": "string"
    }
  },
  "HTMLFrameSetElement": {
    "cols": {
      "!type": "string"
    },
    "rows": {
      "!type": "string"
    },
    "onafterprint": {
      "!type": "fn(+Event)"
    },
    "onbeforeprint": {
      "!type": "fn(+Event)"
    },
    "onbeforeunload": {
      "!type": "OnBeforeUnloadEventHandler"
    },
    "onhashchange": {
      "!type": "fn(+Event)"
    },
    "onlanguagechange": {
      "!type": "fn(+Event)"
    },
    "onmessage": {
      "!type": "fn(+Event)"
    },
    "onoffline": {
      "!type": "fn(+Event)"
    },
    "ononline": {
      "!type": "fn(+Event)"
    },
    "onpagehide": {
      "!type": "fn(+Event)"
    },
    "onpageshow": {
      "!type": "fn(+Event)"
    },
    "onpopstate": {
      "!type": "fn(+Event)"
    },
    "onunload": {
      "!type": "fn(+Event)"
    }
  },
  "HTMLHRElement": {
    "align": {
      "!type": "string"
    },
    "color": {
      "!type": "string"
    },
    "noShade": {
      "!type": "bool"
    },
    "size": {
      "!type": "string"
    },
    "width": {
      "!type": "string"
    }
  },
  "HTMLHeadElement": {},
  "HTMLHeadingElement": {
    "align": {
      "!type": "string"
    }
  },
  "HTMLHtmlElement": {
    "version": {
      "!type": "string"
    }
  },
  "HTMLIFrameElement": {
    "src": {
      "!type": "string"
    },
    "srcdoc": {
      "!type": "string"
    },
    "name": {
      "!type": "string"
    },
    "sandbox": {
      "!type": "DOMSettableTokenList"
    },
    "allowFullscreen": {
      "!type": "bool"
    },
    "width": {
      "!type": "string"
    },
    "height": {
      "!type": "string"
    },
    "contentDocument": {
      "!type": "Document"
    },
    "contentWindow": {
      "!type": "WindowProxy"
    },
    "align": {
      "!type": "string"
    },
    "scrolling": {
      "!type": "string"
    },
    "frameBorder": {
      "!type": "string"
    },
    "longDesc": {
      "!type": "string"
    },
    "marginHeight": {
      "!type": "string"
    },
    "marginWidth": {
      "!type": "string"
    },
    "getSVGDocument": {
      "!type": "fn() -> Document"
    },
    "appManifestURL": {
      "!type": "string"
    },
    "setVisible": {
      "!type": "fn(visible: bool)"
    },
    "getVisible": {
      "!type": "fn() -> DOMRequest"
    },
    "setActive": {
      "!type": "fn(active: bool)"
    },
    "getActive": {
      "!type": "fn() -> bool"
    },
    "addNextPaintListener": {
      "!type": "fn(listener: BrowserElementNextPaintEventCallback)"
    },
    "removeNextPaintListener": {
      "!type": "fn(listener: BrowserElementNextPaintEventCallback)"
    },
    "sendMouseEvent": {
      "!type": "fn(type: string, x: number, y: number, button: number, clickCount: number, modifiers: number)"
    },
    "sendTouchEvent": {
      "!type": "fn(type: string, identifiers: [number], x: [number], y: [number], rx: [number], ry: [number], rotationAngles: [number], forces: [number], count: number, modifiers: number)"
    },
    "goBack": {
      "!type": "fn()"
    },
    "goForward": {
      "!type": "fn()"
    },
    "reload": {
      "!type": "fn(hardReload?: bool)"
    },
    "stop": {
      "!type": "fn()"
    },
    "download": {
      "!type": "fn(url: string, options?: BrowserElementDownloadOptions) -> DOMRequest"
    },
    "purgeHistory": {
      "!type": "fn() -> DOMRequest"
    },
    "getScreenshot": {
      "!type": "fn(width: number, height: number, mimeType?: string) -> DOMRequest"
    },
    "zoom": {
      "!type": "fn(zoom: number)"
    },
    "getCanGoBack": {
      "!type": "fn() -> DOMRequest"
    },
    "getCanGoForward": {
      "!type": "fn() -> DOMRequest"
    },
    "getContentDimensions": {
      "!type": "fn() -> DOMRequest"
    },
    "setInputMethodActive": {
      "!type": "fn(isActive: bool) -> DOMRequest"
    },
    "setNFCFocus": {
      "!type": "fn(isFocus: bool)"
    }
  },
  "imgINotificationObserver": {},
  "imgIRequest": {},
  "HTMLImageElement": {
    "!type": "fn(width?: number, height?: number)",
    "prototype": {
      "alt": {
        "!type": "string"
      },
      "src": {
        "!type": "string"
      },
      "srcset": {
        "!type": "string"
      },
      "crossOrigin": {
        "!type": "string"
      },
      "useMap": {
        "!type": "string"
      },
      "isMap": {
        "!type": "bool"
      },
      "width": {
        "!type": "number"
      },
      "height": {
        "!type": "number"
      },
      "naturalWidth": {
        "!type": "number"
      },
      "naturalHeight": {
        "!type": "number"
      },
      "complete": {
        "!type": "bool"
      },
      "name": {
        "!type": "string"
      },
      "align": {
        "!type": "string"
      },
      "hspace": {
        "!type": "number"
      },
      "vspace": {
        "!type": "number"
      },
      "longDesc": {
        "!type": "string"
      },
      "border": {
        "!type": "string"
      },
      "sizes": {
        "!type": "string"
      },
      "currentSrc": {
        "!type": "string"
      },
      "lowsrc": {
        "!type": "string"
      },
      "x": {
        "!type": "number"
      },
      "y": {
        "!type": "number"
      }
    }
  },
  "Image": {
    "!type": "fn(width?: number, height?: number)",
    "prototype": {
      "alt": {
        "!type": "string"
      },
      "src": {
        "!type": "string"
      },
      "srcset": {
        "!type": "string"
      },
      "crossOrigin": {
        "!type": "string"
      },
      "useMap": {
        "!type": "string"
      },
      "isMap": {
        "!type": "bool"
      },
      "width": {
        "!type": "number"
      },
      "height": {
        "!type": "number"
      },
      "naturalWidth": {
        "!type": "number"
      },
      "naturalHeight": {
        "!type": "number"
      },
      "complete": {
        "!type": "bool"
      },
      "name": {
        "!type": "string"
      },
      "align": {
        "!type": "string"
      },
      "hspace": {
        "!type": "number"
      },
      "vspace": {
        "!type": "number"
      },
      "longDesc": {
        "!type": "string"
      },
      "border": {
        "!type": "string"
      },
      "sizes": {
        "!type": "string"
      },
      "currentSrc": {
        "!type": "string"
      },
      "lowsrc": {
        "!type": "string"
      },
      "x": {
        "!type": "number"
      },
      "y": {
        "!type": "number"
      }
    }
  },
  "HTMLInputElement": {
    "accept": {
      "!type": "string"
    },
    "alt": {
      "!type": "string"
    },
    "autocomplete": {
      "!type": "string"
    },
    "autofocus": {
      "!type": "bool"
    },
    "defaultChecked": {
      "!type": "bool"
    },
    "checked": {
      "!type": "bool"
    },
    "disabled": {
      "!type": "bool"
    },
    "form": {
      "!type": "HTMLFormElement"
    },
    "files": {
      "!type": "FileList"
    },
    "openDirectoryPicker": {
      "!type": "fn()"
    },
    "formAction": {
      "!type": "string"
    },
    "formEnctype": {
      "!type": "string"
    },
    "formMethod": {
      "!type": "string"
    },
    "formNoValidate": {
      "!type": "bool"
    },
    "formTarget": {
      "!type": "string"
    },
    "height": {
      "!type": "number"
    },
    "indeterminate": {
      "!type": "bool"
    },
    "inputMode": {
      "!type": "string"
    },
    "list": {
      "!type": "HTMLElement"
    },
    "max": {
      "!type": "string"
    },
    "maxLength": {
      "!type": "number"
    },
    "min": {
      "!type": "string"
    },
    "multiple": {
      "!type": "bool"
    },
    "name": {
      "!type": "string"
    },
    "pattern": {
      "!type": "string"
    },
    "placeholder": {
      "!type": "string"
    },
    "readOnly": {
      "!type": "bool"
    },
    "required": {
      "!type": "bool"
    },
    "size": {
      "!type": "number"
    },
    "src": {
      "!type": "string"
    },
    "step": {
      "!type": "string"
    },
    "type": {
      "!type": "string"
    },
    "defaultValue": {
      "!type": "string"
    },
    "value": {
      "!type": "string"
    },
    "valueAsDate": {
      "!type": "Date"
    },
    "valueAsNumber": {
      "!type": "number"
    },
    "width": {
      "!type": "number"
    },
    "stepUp": {
      "!type": "fn(n?: number)"
    },
    "stepDown": {
      "!type": "fn(n?: number)"
    },
    "willValidate": {
      "!type": "bool"
    },
    "validity": {
      "!type": "ValidityState"
    },
    "validationMessage": {
      "!type": "string"
    },
    "checkValidity": {
      "!type": "fn() -> bool"
    },
    "setCustomValidity": {
      "!type": "fn(error: string)"
    },
    "select": {
      "!type": "fn()"
    },
    "selectionStart": {
      "!type": "number"
    },
    "selectionEnd": {
      "!type": "number"
    },
    "selectionDirection": {
      "!type": "string"
    },
    "setRangeText": {
      "!type": "fn(replacement: string)"
    },
    "align": {
      "!type": "string"
    },
    "useMap": {
      "!type": "string"
    },
    "setSelectionRange": {
      "!type": "fn(start: number, end: number, direction?: string)"
    },
    "controllers": {
      "!type": "nsIControllers"
    },
    "textLength": {
      "!type": "number"
    },
    "ownerNumberControl": {
      "!type": "HTMLInputElement"
    },
    "getAutocompleteInfo": {
      "!type": "fn() -> AutocompleteInfo"
    },
    "editor": {
      "!type": "nsIEditor"
    },
    "setUserInput": {
      "!type": "fn(input: string)"
    }
  },
  "HTMLLIElement": {
    "value": {
      "!type": "number"
    },
    "type": {
      "!type": "string"
    }
  },
  "HTMLLabelElement": {
    "form": {
      "!type": "HTMLFormElement"
    },
    "htmlFor": {
      "!type": "string"
    },
    "control": {
      "!type": "HTMLElement"
    }
  },
  "HTMLLegendElement": {
    "form": {
      "!type": "HTMLFormElement"
    },
    "align": {
      "!type": "string"
    }
  },
  "HTMLLinkElement": {
    "disabled": {
      "!type": "bool"
    },
    "href": {
      "!type": "string"
    },
    "crossOrigin": {
      "!type": "string"
    },
    "rel": {
      "!type": "string"
    },
    "relList": {
      "!type": "DOMTokenList"
    },
    "media": {
      "!type": "string"
    },
    "hreflang": {
      "!type": "string"
    },
    "type": {
      "!type": "string"
    },
    "sizes": {
      "!type": "DOMSettableTokenList"
    },
    "charset": {
      "!type": "string"
    },
    "rev": {
      "!type": "string"
    },
    "target": {
      "!type": "string"
    },
    "import": {
      "!type": "Document"
    },
    "sheet": {
      "!type": "StyleSheet"
    }
  },
  "HTMLMapElement": {
    "name": {
      "!type": "string"
    },
    "areas": {
      "!type": "HTMLCollection"
    }
  },
  "HTMLMediaElement": {
    "error": {
      "!type": "MediaError"
    },
    "src": {
      "!type": "string"
    },
    "currentSrc": {
      "!type": "string"
    },
    "crossOrigin": {
      "!type": "string"
    },
    "NETWORK_EMPTY": {
      "!type": "number"
    },
    "NETWORK_IDLE": {
      "!type": "number"
    },
    "NETWORK_LOADING": {
      "!type": "number"
    },
    "NETWORK_NO_SOURCE": {
      "!type": "number"
    },
    "networkState": {
      "!type": "number"
    },
    "preload": {
      "!type": "string"
    },
    "buffered": {
      "!type": "TimeRanges"
    },
    "load": {
      "!type": "fn()"
    },
    "canPlayType": {
      "!type": "fn(type: string) -> string"
    },
    "HAVE_NOTHING": {
      "!type": "number"
    },
    "HAVE_METADATA": {
      "!type": "number"
    },
    "HAVE_CURRENT_DATA": {
      "!type": "number"
    },
    "HAVE_FUTURE_DATA": {
      "!type": "number"
    },
    "HAVE_ENOUGH_DATA": {
      "!type": "number"
    },
    "readyState": {
      "!type": "number"
    },
    "seeking": {
      "!type": "bool"
    },
    "currentTime": {
      "!type": "number"
    },
    "fastSeek": {
      "!type": "fn(time: number)"
    },
    "duration": {
      "!type": "number"
    },
    "isEncrypted": {
      "!type": "bool"
    },
    "paused": {
      "!type": "bool"
    },
    "defaultPlaybackRate": {
      "!type": "number"
    },
    "playbackRate": {
      "!type": "number"
    },
    "played": {
      "!type": "TimeRanges"
    },
    "seekable": {
      "!type": "TimeRanges"
    },
    "ended": {
      "!type": "bool"
    },
    "autoplay": {
      "!type": "bool"
    },
    "loop": {
      "!type": "bool"
    },
    "play": {
      "!type": "fn()"
    },
    "pause": {
      "!type": "fn()"
    },
    "controls": {
      "!type": "bool"
    },
    "volume": {
      "!type": "number"
    },
    "muted": {
      "!type": "bool"
    },
    "defaultMuted": {
      "!type": "bool"
    },
    "audioTracks": {
      "!type": "AudioTrackList"
    },
    "videoTracks": {
      "!type": "VideoTrackList"
    },
    "textTracks": {
      "!type": "TextTrackList"
    },
    "addTextTrack": {
      "!type": "fn(kind: TextTrackKind, label?: string, language?: string) -> TextTrack"
    },
    "mediaKeys": {
      "!type": "MediaKeys"
    },
    "setMediaKeys": {
      "!type": "fn(mediaKeys: MediaKeys) -> +Promise[value=void]"
    },
    "onencrypted": {
      "!type": "fn(+Event)"
    }
  },
  "MenuBuilder": {},
  "HTMLMenuElement": {
    "type": {
      "!type": "string"
    },
    "label": {
      "!type": "string"
    },
    "compact": {
      "!type": "bool"
    },
    "sendShowEvent": {
      "!type": "fn()"
    },
    "createBuilder": {
      "!type": "fn() -> MenuBuilder"
    },
    "build": {
      "!type": "fn(aBuilder: MenuBuilder)"
    }
  },
  "HTMLMenuItemElement": {
    "type": {
      "!type": "string"
    },
    "label": {
      "!type": "string"
    },
    "icon": {
      "!type": "string"
    },
    "disabled": {
      "!type": "bool"
    },
    "checked": {
      "!type": "bool"
    },
    "radiogroup": {
      "!type": "string"
    },
    "defaultChecked": {
      "!type": "bool"
    }
  },
  "HTMLMetaElement": {
    "name": {
      "!type": "string"
    },
    "httpEquiv": {
      "!type": "string"
    },
    "content": {
      "!type": "string"
    },
    "scheme": {
      "!type": "string"
    }
  },
  "HTMLMeterElement": {
    "value": {
      "!type": "number"
    },
    "min": {
      "!type": "number"
    },
    "max": {
      "!type": "number"
    },
    "low": {
      "!type": "number"
    },
    "high": {
      "!type": "number"
    },
    "optimum": {
      "!type": "number"
    }
  },
  "HTMLModElement": {
    "cite": {
      "!type": "string"
    },
    "dateTime": {
      "!type": "string"
    }
  },
  "HTMLOListElement": {
    "reversed": {
      "!type": "bool"
    },
    "start": {
      "!type": "number"
    },
    "type": {
      "!type": "string"
    },
    "compact": {
      "!type": "bool"
    }
  },
  "HTMLObjectElement": {
    "data": {
      "!type": "string"
    },
    "type": {
      "!type": "string"
    },
    "typeMustMatch": {
      "!type": "bool"
    },
    "name": {
      "!type": "string"
    },
    "useMap": {
      "!type": "string"
    },
    "form": {
      "!type": "HTMLFormElement"
    },
    "width": {
      "!type": "string"
    },
    "height": {
      "!type": "string"
    },
    "contentDocument": {
      "!type": "Document"
    },
    "contentWindow": {
      "!type": "WindowProxy"
    },
    "willValidate": {
      "!type": "bool"
    },
    "validity": {
      "!type": "ValidityState"
    },
    "validationMessage": {
      "!type": "string"
    },
    "checkValidity": {
      "!type": "fn() -> bool"
    },
    "setCustomValidity": {
      "!type": "fn(error: string)"
    },
    "align": {
      "!type": "string"
    },
    "archive": {
      "!type": "string"
    },
    "code": {
      "!type": "string"
    },
    "declare": {
      "!type": "bool"
    },
    "hspace": {
      "!type": "number"
    },
    "standby": {
      "!type": "string"
    },
    "vspace": {
      "!type": "number"
    },
    "codeBase": {
      "!type": "string"
    },
    "codeType": {
      "!type": "string"
    },
    "border": {
      "!type": "string"
    },
    "getSVGDocument": {
      "!type": "fn() -> Document"
    }
  },
  "HTMLOptGroupElement": {
    "disabled": {
      "!type": "bool"
    },
    "label": {
      "!type": "string"
    }
  },
  "HTMLOptionElement": {
    "!type": "fn(text?: string, value?: string, defaultSelected?: bool, selected?: bool)",
    "prototype": {
      "disabled": {
        "!type": "bool"
      },
      "form": {
        "!type": "HTMLFormElement"
      },
      "label": {
        "!type": "string"
      },
      "defaultSelected": {
        "!type": "bool"
      },
      "selected": {
        "!type": "bool"
      },
      "value": {
        "!type": "string"
      },
      "text": {
        "!type": "string"
      },
      "index": {
        "!type": "number"
      }
    }
  },
  "Option": {
    "!type": "fn(text?: string, value?: string, defaultSelected?: bool, selected?: bool)",
    "prototype": {
      "disabled": {
        "!type": "bool"
      },
      "form": {
        "!type": "HTMLFormElement"
      },
      "label": {
        "!type": "string"
      },
      "defaultSelected": {
        "!type": "bool"
      },
      "selected": {
        "!type": "bool"
      },
      "value": {
        "!type": "string"
      },
      "text": {
        "!type": "string"
      },
      "index": {
        "!type": "number"
      }
    }
  },
  "HTMLOptionsCollection": {
    "length": {
      "!type": "number"
    },
    "add": {
      "!type": "fn(element: ?, before?: ?)"
    },
    "remove": {
      "!type": "fn(index: number)"
    },
    "selectedIndex": {
      "!type": "number"
    }
  },
  "HTMLOutputElement": {
    "htmlFor": {
      "!type": "DOMSettableTokenList"
    },
    "form": {
      "!type": "HTMLFormElement"
    },
    "name": {
      "!type": "string"
    },
    "type": {
      "!type": "string"
    },
    "defaultValue": {
      "!type": "string"
    },
    "value": {
      "!type": "string"
    },
    "willValidate": {
      "!type": "bool"
    },
    "validity": {
      "!type": "ValidityState"
    },
    "validationMessage": {
      "!type": "string"
    },
    "checkValidity": {
      "!type": "fn() -> bool"
    },
    "setCustomValidity": {
      "!type": "fn(error: string)"
    }
  },
  "HTMLParagraphElement": {
    "align": {
      "!type": "string"
    }
  },
  "HTMLParamElement": {
    "name": {
      "!type": "string"
    },
    "value": {
      "!type": "string"
    },
    "type": {
      "!type": "string"
    },
    "valueType": {
      "!type": "string"
    }
  },
  "HTMLPictureElement": {},
  "HTMLPreElement": {
    "width": {
      "!type": "number"
    }
  },
  "HTMLProgressElement": {
    "value": {
      "!type": "number"
    },
    "max": {
      "!type": "number"
    },
    "position": {
      "!type": "number"
    }
  },
  "HTMLPropertiesCollection": {
    "namedItem": {
      "!type": "fn(name: string) -> PropertyNodeList"
    },
    "names": {
      "!type": "DOMStringList"
    }
  },
  "PropertyNodeList": {
    "getValues": {
      "!type": "fn() -> PropertyValueArray"
    }
  },
  "HTMLQuoteElement": {
    "cite": {
      "!type": "string"
    }
  },
  "HTMLScriptElement": {
    "src": {
      "!type": "string"
    },
    "type": {
      "!type": "string"
    },
    "charset": {
      "!type": "string"
    },
    "async": {
      "!type": "bool"
    },
    "defer": {
      "!type": "bool"
    },
    "crossOrigin": {
      "!type": "string"
    },
    "text": {
      "!type": "string"
    },
    "event": {
      "!type": "string"
    },
    "htmlFor": {
      "!type": "string"
    }
  },
  "HTMLSelectElement": {
    "autofocus": {
      "!type": "bool"
    },
    "autocomplete": {
      "!type": "string"
    },
    "disabled": {
      "!type": "bool"
    },
    "form": {
      "!type": "HTMLFormElement"
    },
    "multiple": {
      "!type": "bool"
    },
    "name": {
      "!type": "string"
    },
    "required": {
      "!type": "bool"
    },
    "size": {
      "!type": "number"
    },
    "type": {
      "!type": "string"
    },
    "options": {
      "!type": "HTMLOptionsCollection"
    },
    "length": {
      "!type": "number"
    },
    "item": {
      "!type": "fn(index: number) -> Element"
    },
    "namedItem": {
      "!type": "fn(name: string) -> HTMLOptionElement"
    },
    "add": {
      "!type": "fn(element: ?, before?: ?)"
    },
    "remove": {
      "!type": "fn(index: number)"
    },
    "selectedOptions": {
      "!type": "HTMLCollection"
    },
    "selectedIndex": {
      "!type": "number"
    },
    "value": {
      "!type": "string"
    },
    "willValidate": {
      "!type": "bool"
    },
    "validity": {
      "!type": "ValidityState"
    },
    "validationMessage": {
      "!type": "string"
    },
    "checkValidity": {
      "!type": "fn() -> bool"
    },
    "setCustomValidity": {
      "!type": "fn(error: string)"
    }
  },
  "HTMLShadowElement": {
    "olderShadowRoot": {
      "!type": "ShadowRoot"
    }
  },
  "HTMLSourceElement": {
    "src": {
      "!type": "string"
    },
    "type": {
      "!type": "string"
    },
    "srcset": {
      "!type": "string"
    },
    "sizes": {
      "!type": "string"
    },
    "media": {
      "!type": "string"
    }
  },
  "HTMLSpanElement": {},
  "HTMLStyleElement": {
    "disabled": {
      "!type": "bool"
    },
    "media": {
      "!type": "string"
    },
    "type": {
      "!type": "string"
    },
    "scoped": {
      "!type": "bool"
    },
    "sheet": {
      "!type": "StyleSheet"
    }
  },
  "HTMLTableCaptionElement": {
    "align": {
      "!type": "string"
    }
  },
  "HTMLTableCellElement": {
    "colSpan": {
      "!type": "number"
    },
    "rowSpan": {
      "!type": "number"
    },
    "headers": {
      "!type": "string"
    },
    "cellIndex": {
      "!type": "number"
    },
    "abbr": {
      "!type": "string"
    },
    "scope": {
      "!type": "string"
    },
    "align": {
      "!type": "string"
    },
    "axis": {
      "!type": "string"
    },
    "height": {
      "!type": "string"
    },
    "width": {
      "!type": "string"
    },
    "ch": {
      "!type": "string"
    },
    "chOff": {
      "!type": "string"
    },
    "noWrap": {
      "!type": "bool"
    },
    "vAlign": {
      "!type": "string"
    },
    "bgColor": {
      "!type": "string"
    }
  },
  "HTMLTableColElement": {
    "span": {
      "!type": "number"
    },
    "align": {
      "!type": "string"
    },
    "ch": {
      "!type": "string"
    },
    "chOff": {
      "!type": "string"
    },
    "vAlign": {
      "!type": "string"
    },
    "width": {
      "!type": "string"
    }
  },
  "HTMLTableElement": {
    "caption": {
      "!type": "HTMLTableCaptionElement"
    },
    "createCaption": {
      "!type": "fn() -> HTMLElement"
    },
    "deleteCaption": {
      "!type": "fn()"
    },
    "tHead": {
      "!type": "HTMLTableSectionElement"
    },
    "createTHead": {
      "!type": "fn() -> HTMLElement"
    },
    "deleteTHead": {
      "!type": "fn()"
    },
    "tFoot": {
      "!type": "HTMLTableSectionElement"
    },
    "createTFoot": {
      "!type": "fn() -> HTMLElement"
    },
    "deleteTFoot": {
      "!type": "fn()"
    },
    "tBodies": {
      "!type": "HTMLCollection"
    },
    "createTBody": {
      "!type": "fn() -> HTMLElement"
    },
    "rows": {
      "!type": "HTMLCollection"
    },
    "insertRow": {
      "!type": "fn(index?: number) -> HTMLElement"
    },
    "deleteRow": {
      "!type": "fn(index: number)"
    },
    "align": {
      "!type": "string"
    },
    "border": {
      "!type": "string"
    },
    "frame": {
      "!type": "string"
    },
    "rules": {
      "!type": "string"
    },
    "summary": {
      "!type": "string"
    },
    "width": {
      "!type": "string"
    },
    "bgColor": {
      "!type": "string"
    },
    "cellPadding": {
      "!type": "string"
    },
    "cellSpacing": {
      "!type": "string"
    }
  },
  "HTMLTableRowElement": {
    "rowIndex": {
      "!type": "number"
    },
    "sectionRowIndex": {
      "!type": "number"
    },
    "cells": {
      "!type": "HTMLCollection"
    },
    "insertCell": {
      "!type": "fn(index?: number) -> HTMLElement"
    },
    "deleteCell": {
      "!type": "fn(index: number)"
    },
    "align": {
      "!type": "string"
    },
    "ch": {
      "!type": "string"
    },
    "chOff": {
      "!type": "string"
    },
    "vAlign": {
      "!type": "string"
    },
    "bgColor": {
      "!type": "string"
    }
  },
  "HTMLTableSectionElement": {
    "rows": {
      "!type": "HTMLCollection"
    },
    "insertRow": {
      "!type": "fn(index?: number) -> HTMLElement"
    },
    "deleteRow": {
      "!type": "fn(index: number)"
    },
    "align": {
      "!type": "string"
    },
    "ch": {
      "!type": "string"
    },
    "chOff": {
      "!type": "string"
    },
    "vAlign": {
      "!type": "string"
    }
  },
  "HTMLTemplateElement": {
    "content": {
      "!type": "DocumentFragment"
    }
  },
  "HTMLTextAreaElement": {
    "autofocus": {
      "!type": "bool"
    },
    "cols": {
      "!type": "number"
    },
    "disabled": {
      "!type": "bool"
    },
    "form": {
      "!type": "HTMLFormElement"
    },
    "maxLength": {
      "!type": "number"
    },
    "name": {
      "!type": "string"
    },
    "placeholder": {
      "!type": "string"
    },
    "readOnly": {
      "!type": "bool"
    },
    "required": {
      "!type": "bool"
    },
    "rows": {
      "!type": "number"
    },
    "wrap": {
      "!type": "string"
    },
    "type": {
      "!type": "string"
    },
    "defaultValue": {
      "!type": "string"
    },
    "value": {
      "!type": "string"
    },
    "textLength": {
      "!type": "number"
    },
    "willValidate": {
      "!type": "bool"
    },
    "validity": {
      "!type": "ValidityState"
    },
    "validationMessage": {
      "!type": "string"
    },
    "checkValidity": {
      "!type": "fn() -> bool"
    },
    "setCustomValidity": {
      "!type": "fn(error: string)"
    },
    "select": {
      "!type": "fn()"
    },
    "selectionStart": {
      "!type": "number"
    },
    "selectionEnd": {
      "!type": "number"
    },
    "selectionDirection": {
      "!type": "string"
    },
    "setRangeText": {
      "!type": "fn(replacement: string)"
    },
    "setSelectionRange": {
      "!type": "fn(start: number, end: number, direction?: string)"
    },
    "controllers": {
      "!type": "MozControllers"
    },
    "editor": {
      "!type": "nsIEditor"
    },
    "setUserInput": {
      "!type": "fn(input: string)"
    }
  },
  "HTMLTimeElement": {
    "dateTime": {
      "!type": "string"
    }
  },
  "HTMLTitleElement": {
    "text": {
      "!type": "string"
    }
  },
  "HTMLTrackElement": {
    "kind": {
      "!type": "string"
    },
    "src": {
      "!type": "string"
    },
    "srclang": {
      "!type": "string"
    },
    "label": {
      "!type": "string"
    },
    "default": {
      "!type": "bool"
    },
    "NONE": {
      "!type": "number"
    },
    "LOADING": {
      "!type": "number"
    },
    "LOADED": {
      "!type": "number"
    },
    "ERROR": {
      "!type": "number"
    },
    "readyState": {
      "!type": "number"
    },
    "track": {
      "!type": "TextTrack"
    }
  },
  "HTMLUListElement": {
    "compact": {
      "!type": "bool"
    },
    "type": {
      "!type": "string"
    }
  },
  "HTMLVideoElement": {
    "width": {
      "!type": "number"
    },
    "height": {
      "!type": "number"
    },
    "videoWidth": {
      "!type": "number"
    },
    "videoHeight": {
      "!type": "number"
    },
    "poster": {
      "!type": "string"
    },
    "getVideoPlaybackQuality": {
      "!type": "fn() -> VideoPlaybackQuality"
    }
  },
  "HashChangeEvent": {
    "!type": "fn(type: string, eventInitDict?: HashChangeEventInit)",
    "prototype": {
      "oldURL": {
        "!type": "string"
      },
      "newURL": {
        "!type": "string"
      },
      "initHashChangeEvent": {
        "!type": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, oldURLArg: string, newURLArg: string)"
      }
    }
  },
  "Headers": {
    "!type": "fn(init?: HeadersInit)",
    "prototype": {
      "append": {
        "!type": "fn(name: ByteString, value: ByteString)"
      },
      "delete": {
        "!type": "fn(name: ByteString)"
      },
      "get": {
        "!type": "fn(name: ByteString) -> ByteString"
      },
      "getAll": {
        "!type": "fn(name: ByteString) -> [ByteString]"
      },
      "has": {
        "!type": "fn(name: ByteString) -> bool"
      },
      "set": {
        "!type": "fn(name: ByteString, value: ByteString)"
      },
      "guard": {
        "!type": "HeadersGuardEnum"
      }
    }
  },
  "History": {
    "length": {
      "!type": "number"
    },
    "state": {
      "!type": "?"
    },
    "go": {
      "!type": "fn(delta?: number)"
    },
    "back": {
      "!type": "fn()"
    },
    "forward": {
      "!type": "fn()"
    },
    "pushState": {
      "!type": "fn(data: ?, title: string, url?: string)"
    },
    "replaceState": {
      "!type": "fn(data: ?, title: string, url?: string)"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "IDBCursor": {
    "source": {
      "!type": "?"
    },
    "direction": {
      "!type": "IDBCursorDirection"
    },
    "key": {
      "!type": "?"
    },
    "primaryKey": {
      "!type": "?"
    },
    "update": {
      "!type": "fn(value: ?) -> IDBRequest"
    },
    "advance": {
      "!type": "fn(count: number)"
    },
    "continue": {
      "!type": "fn(key?: ?)"
    },
    "delete": {
      "!type": "fn() -> IDBRequest"
    }
  },
  "IDBCursorWithValue": {
    "value": {
      "!type": "?"
    }
  },
  "IDBDatabase": {
    "name": {
      "!type": "string"
    },
    "version": {
      "!type": "number"
    },
    "objectStoreNames": {
      "!type": "DOMStringList"
    },
    "createObjectStore": {
      "!type": "fn(name: string, optionalParameters?: IDBObjectStoreParameters) -> IDBObjectStore"
    },
    "deleteObjectStore": {
      "!type": "fn(name: string)"
    },
    "transaction": {
      "!type": "fn(storeNames: ?, mode?: IDBTransactionMode) -> IDBTransaction"
    },
    "close": {
      "!type": "fn()"
    },
    "onabort": {
      "!type": "fn(+Event)"
    },
    "onerror": {
      "!type": "fn(+Event)"
    },
    "onversionchange": {
      "!type": "fn(+Event)"
    },
    "storage": {
      "!type": "StorageType"
    },
    "createMutableFile": {
      "!type": "fn(name: string, type?: string) -> IDBRequest"
    }
  },
  "IDBFactory": {
    "open": {
      "!type": "fn(name: string, version: number) -> IDBOpenDBRequest"
    },
    "deleteDatabase": {
      "!type": "fn(name: string, options?: IDBOpenDBOptions) -> IDBOpenDBRequest"
    },
    "cmp": {
      "!type": "fn(first: ?, second: ?) -> number"
    },
    "openForPrincipal": {
      "!type": "fn(principal: Principal, name: string, version: number) -> IDBOpenDBRequest"
    },
    "deleteForPrincipal": {
      "!type": "fn(principal: Principal, name: string, options?: IDBOpenDBOptions) -> IDBOpenDBRequest"
    }
  },
  "IDBFileHandle": {
    "mutableFile": {
      "!type": "IDBMutableFile"
    },
    "fileHandle": {
      "!type": "IDBMutableFile"
    },
    "mode": {
      "!type": "FileMode"
    },
    "active": {
      "!type": "bool"
    },
    "location": {
      "!type": "number"
    },
    "getMetadata": {
      "!type": "fn(parameters?: IDBFileMetadataParameters) -> IDBFileRequest"
    },
    "readAsArrayBuffer": {
      "!type": "fn(size: number) -> IDBFileRequest"
    },
    "readAsText": {
      "!type": "fn(size: number, encoding?: string) -> IDBFileRequest"
    },
    "write": {
      "!type": "fn(value: ArrayBuffer) -> IDBFileRequest"
    },
    "append": {
      "!type": "fn(value: ArrayBuffer) -> IDBFileRequest"
    },
    "truncate": {
      "!type": "fn(size?: number) -> IDBFileRequest"
    },
    "flush": {
      "!type": "fn() -> IDBFileRequest"
    },
    "abort": {
      "!type": "fn()"
    },
    "oncomplete": {
      "!type": "fn(+Event)"
    },
    "onabort": {
      "!type": "fn(+Event)"
    },
    "onerror": {
      "!type": "fn(+Event)"
    }
  },
  "IDBFileRequest": {
    "fileHandle": {
      "!type": "IDBFileHandle"
    },
    "lockedFile": {
      "!type": "IDBFileHandle"
    },
    "onprogress": {
      "!type": "fn(+Event)"
    }
  },
  "IDBIndex": {
    "name": {
      "!type": "string"
    },
    "objectStore": {
      "!type": "IDBObjectStore"
    },
    "keyPath": {
      "!type": "?"
    },
    "multiEntry": {
      "!type": "bool"
    },
    "unique": {
      "!type": "bool"
    },
    "openCursor": {
      "!type": "fn(range?: ?, direction?: IDBCursorDirection) -> IDBRequest"
    },
    "openKeyCursor": {
      "!type": "fn(range?: ?, direction?: IDBCursorDirection) -> IDBRequest"
    },
    "get": {
      "!type": "fn(key: ?) -> IDBRequest"
    },
    "getKey": {
      "!type": "fn(key: ?) -> IDBRequest"
    },
    "count": {
      "!type": "fn(key?: ?) -> IDBRequest"
    },
    "getAll": {
      "!type": "fn(key?: ?, limit?: number) -> IDBRequest"
    },
    "getAllKeys": {
      "!type": "fn(key?: ?, limit?: number) -> IDBRequest"
    }
  },
  "IDBKeyRange": {
    "lower": {
      "!type": "?"
    },
    "upper": {
      "!type": "?"
    },
    "lowerOpen": {
      "!type": "bool"
    },
    "upperOpen": {
      "!type": "bool"
    },
    "only": {
      "!type": "fn(value: ?) -> IDBKeyRange"
    },
    "lowerBound": {
      "!type": "fn(lower: ?, open?: bool) -> IDBKeyRange"
    },
    "upperBound": {
      "!type": "fn(upper: ?, open?: bool) -> IDBKeyRange"
    },
    "bound": {
      "!type": "fn(lower: ?, upper: ?, lowerOpen?: bool, upperOpen?: bool) -> IDBKeyRange"
    }
  },
  "IDBMutableFile": {
    "name": {
      "!type": "string"
    },
    "type": {
      "!type": "string"
    },
    "database": {
      "!type": "IDBDatabase"
    },
    "open": {
      "!type": "fn(mode?: FileMode) -> IDBFileHandle"
    },
    "getFile": {
      "!type": "fn() -> DOMRequest"
    },
    "onabort": {
      "!type": "fn(+Event)"
    },
    "onerror": {
      "!type": "fn(+Event)"
    }
  },
  "IDBObjectStore": {
    "name": {
      "!type": "string"
    },
    "keyPath": {
      "!type": "?"
    },
    "indexNames": {
      "!type": "DOMStringList"
    },
    "transaction": {
      "!type": "IDBTransaction"
    },
    "autoIncrement": {
      "!type": "bool"
    },
    "put": {
      "!type": "fn(value: ?, key?: ?) -> IDBRequest"
    },
    "add": {
      "!type": "fn(value: ?, key?: ?) -> IDBRequest"
    },
    "delete": {
      "!type": "fn(key: ?) -> IDBRequest"
    },
    "get": {
      "!type": "fn(key: ?) -> IDBRequest"
    },
    "clear": {
      "!type": "fn() -> IDBRequest"
    },
    "openCursor": {
      "!type": "fn(range?: ?, direction?: IDBCursorDirection) -> IDBRequest"
    },
    "createIndex": {
      "!type": "fn(name: string, keyPath: string, optionalParameters?: IDBIndexParameters) -> IDBIndex"
    },
    "index": {
      "!type": "fn(name: string) -> IDBIndex"
    },
    "deleteIndex": {
      "!type": "fn(indexName: string)"
    },
    "count": {
      "!type": "fn(key?: ?) -> IDBRequest"
    },
    "getAll": {
      "!type": "fn(key?: ?, limit?: number) -> IDBRequest"
    },
    "getAllKeys": {
      "!type": "fn(key?: ?, limit?: number) -> IDBRequest"
    },
    "openKeyCursor": {
      "!type": "fn(range?: ?, direction?: IDBCursorDirection) -> IDBRequest"
    }
  },
  "IDBOpenDBRequest": {
    "onblocked": {
      "!type": "fn(+Event)"
    },
    "onupgradeneeded": {
      "!type": "fn(+Event)"
    }
  },
  "IDBRequest": {
    "result": {
      "!type": "?"
    },
    "error": {
      "!type": "DOMError"
    },
    "source": {
      "!type": "?"
    },
    "transaction": {
      "!type": "IDBTransaction"
    },
    "readyState": {
      "!type": "IDBRequestReadyState"
    },
    "onsuccess": {
      "!type": "fn(+Event)"
    },
    "onerror": {
      "!type": "fn(+Event)"
    }
  },
  "IDBTransaction": {
    "mode": {
      "!type": "IDBTransactionMode"
    },
    "db": {
      "!type": "IDBDatabase"
    },
    "error": {
      "!type": "DOMError"
    },
    "objectStore": {
      "!type": "fn(name: string) -> IDBObjectStore"
    },
    "abort": {
      "!type": "fn()"
    },
    "onabort": {
      "!type": "fn(+Event)"
    },
    "oncomplete": {
      "!type": "fn(+Event)"
    },
    "onerror": {
      "!type": "fn(+Event)"
    },
    "objectStoreNames": {
      "!type": "DOMStringList"
    }
  },
  "IDBVersionChangeEvent": {
    "!type": "fn(type: string, eventInitDict?: IDBVersionChangeEventInit)",
    "prototype": {
      "oldVersion": {
        "!type": "number"
      },
      "newVersion": {
        "!type": "number"
      }
    }
  },
  "IccCardLockError": {
    "!type": "fn(errorName: string, retryCount: number)",
    "prototype": {
      "retryCount": {
        "!type": "number"
      }
    }
  },
  "IccChangeEvent": {
    "!type": "fn(type: string, eventInitDict?: IccChangeEventInit)",
    "prototype": {
      "iccId": {
        "!type": "string"
      }
    }
  },
  "ImageCapture": {
    "!type": "fn(track: VideoStreamTrack)",
    "prototype": {
      "videoStreamTrack": {
        "!type": "VideoStreamTrack"
      },
      "onphoto": {
        "!type": "fn(+Event)"
      },
      "onerror": {
        "!type": "fn(+Event)"
      },
      "takePhoto": {
        "!type": "fn()"
      }
    }
  },
  "ImageCaptureErrorEvent": {
    "!type": "fn(type: string, imageCaptureErrorInitDict?: ImageCaptureErrorEventInit)",
    "prototype": {
      "imageCaptureError": {
        "!type": "ImageCaptureError"
      }
    }
  },
  "ImageData": {
    "!type": "fn(data: Uint8ClampedArray, sw: number, sh?: number)",
    "prototype": {
      "width": {
        "!type": "number"
      },
      "height": {
        "!type": "number"
      },
      "data": {
        "!type": "Uint8ClampedArray"
      }
    }
  },
  "InputEvent": {
    "!type": "fn(type: string, eventInitDict?: InputEventInit)",
    "prototype": {
      "isComposing": {
        "!type": "bool"
      }
    }
  },
  "InputPort": {
    "id": {
      "!type": "string"
    },
    "stream": {
      "!type": "MediaStream"
    },
    "connected": {
      "!type": "bool"
    },
    "onconnect": {
      "!type": "fn(+Event)"
    },
    "ondisconnect": {
      "!type": "fn(+Event)"
    }
  },
  "InputPortManager": {
    "getInputPorts": {
      "!type": "fn() -> +Promise"
    }
  },
  "InstallEvent": {
    "!type": "fn(type: string, eventInitDict?: InstallEventInit)",
    "prototype": {
      "activeWorker": {
        "!type": "ServiceWorker"
      },
      "replace": {
        "!type": "fn()"
      }
    }
  },
  "InstallPhaseEvent": {
    "!type": "fn(type: string, eventInitDict?: EventInit)",
    "prototype": {
      "waitUntil": {
        "!type": "fn(p: +Promise)"
      }
    }
  },
  "KeyEvent": {
    "DOM_VK_CANCEL": {
      "!type": "number"
    },
    "DOM_VK_HELP": {
      "!type": "number"
    },
    "DOM_VK_BACK_SPACE": {
      "!type": "number"
    },
    "DOM_VK_TAB": {
      "!type": "number"
    },
    "DOM_VK_CLEAR": {
      "!type": "number"
    },
    "DOM_VK_RETURN": {
      "!type": "number"
    },
    "DOM_VK_SHIFT": {
      "!type": "number"
    },
    "DOM_VK_CONTROL": {
      "!type": "number"
    },
    "DOM_VK_ALT": {
      "!type": "number"
    },
    "DOM_VK_PAUSE": {
      "!type": "number"
    },
    "DOM_VK_CAPS_LOCK": {
      "!type": "number"
    },
    "DOM_VK_KANA": {
      "!type": "number"
    },
    "DOM_VK_HANGUL": {
      "!type": "number"
    },
    "DOM_VK_EISU": {
      "!type": "number"
    },
    "DOM_VK_JUNJA": {
      "!type": "number"
    },
    "DOM_VK_FINAL": {
      "!type": "number"
    },
    "DOM_VK_HANJA": {
      "!type": "number"
    },
    "DOM_VK_KANJI": {
      "!type": "number"
    },
    "DOM_VK_ESCAPE": {
      "!type": "number"
    },
    "DOM_VK_CONVERT": {
      "!type": "number"
    },
    "DOM_VK_NONCONVERT": {
      "!type": "number"
    },
    "DOM_VK_ACCEPT": {
      "!type": "number"
    },
    "DOM_VK_MODECHANGE": {
      "!type": "number"
    },
    "DOM_VK_SPACE": {
      "!type": "number"
    },
    "DOM_VK_PAGE_UP": {
      "!type": "number"
    },
    "DOM_VK_PAGE_DOWN": {
      "!type": "number"
    },
    "DOM_VK_END": {
      "!type": "number"
    },
    "DOM_VK_HOME": {
      "!type": "number"
    },
    "DOM_VK_LEFT": {
      "!type": "number"
    },
    "DOM_VK_UP": {
      "!type": "number"
    },
    "DOM_VK_RIGHT": {
      "!type": "number"
    },
    "DOM_VK_DOWN": {
      "!type": "number"
    },
    "DOM_VK_SELECT": {
      "!type": "number"
    },
    "DOM_VK_PRINT": {
      "!type": "number"
    },
    "DOM_VK_EXECUTE": {
      "!type": "number"
    },
    "DOM_VK_PRINTSCREEN": {
      "!type": "number"
    },
    "DOM_VK_INSERT": {
      "!type": "number"
    },
    "DOM_VK_DELETE": {
      "!type": "number"
    },
    "DOM_VK_0": {
      "!type": "number"
    },
    "DOM_VK_1": {
      "!type": "number"
    },
    "DOM_VK_2": {
      "!type": "number"
    },
    "DOM_VK_3": {
      "!type": "number"
    },
    "DOM_VK_4": {
      "!type": "number"
    },
    "DOM_VK_5": {
      "!type": "number"
    },
    "DOM_VK_6": {
      "!type": "number"
    },
    "DOM_VK_7": {
      "!type": "number"
    },
    "DOM_VK_8": {
      "!type": "number"
    },
    "DOM_VK_9": {
      "!type": "number"
    },
    "DOM_VK_COLON": {
      "!type": "number"
    },
    "DOM_VK_SEMICOLON": {
      "!type": "number"
    },
    "DOM_VK_LESS_THAN": {
      "!type": "number"
    },
    "DOM_VK_EQUALS": {
      "!type": "number"
    },
    "DOM_VK_GREATER_THAN": {
      "!type": "number"
    },
    "DOM_VK_QUESTION_MARK": {
      "!type": "number"
    },
    "DOM_VK_AT": {
      "!type": "number"
    },
    "DOM_VK_A": {
      "!type": "number"
    },
    "DOM_VK_B": {
      "!type": "number"
    },
    "DOM_VK_C": {
      "!type": "number"
    },
    "DOM_VK_D": {
      "!type": "number"
    },
    "DOM_VK_E": {
      "!type": "number"
    },
    "DOM_VK_F": {
      "!type": "number"
    },
    "DOM_VK_G": {
      "!type": "number"
    },
    "DOM_VK_H": {
      "!type": "number"
    },
    "DOM_VK_I": {
      "!type": "number"
    },
    "DOM_VK_J": {
      "!type": "number"
    },
    "DOM_VK_K": {
      "!type": "number"
    },
    "DOM_VK_L": {
      "!type": "number"
    },
    "DOM_VK_M": {
      "!type": "number"
    },
    "DOM_VK_N": {
      "!type": "number"
    },
    "DOM_VK_O": {
      "!type": "number"
    },
    "DOM_VK_P": {
      "!type": "number"
    },
    "DOM_VK_Q": {
      "!type": "number"
    },
    "DOM_VK_R": {
      "!type": "number"
    },
    "DOM_VK_S": {
      "!type": "number"
    },
    "DOM_VK_T": {
      "!type": "number"
    },
    "DOM_VK_U": {
      "!type": "number"
    },
    "DOM_VK_V": {
      "!type": "number"
    },
    "DOM_VK_W": {
      "!type": "number"
    },
    "DOM_VK_X": {
      "!type": "number"
    },
    "DOM_VK_Y": {
      "!type": "number"
    },
    "DOM_VK_Z": {
      "!type": "number"
    },
    "DOM_VK_WIN": {
      "!type": "number"
    },
    "DOM_VK_CONTEXT_MENU": {
      "!type": "number"
    },
    "DOM_VK_SLEEP": {
      "!type": "number"
    },
    "DOM_VK_NUMPAD0": {
      "!type": "number"
    },
    "DOM_VK_NUMPAD1": {
      "!type": "number"
    },
    "DOM_VK_NUMPAD2": {
      "!type": "number"
    },
    "DOM_VK_NUMPAD3": {
      "!type": "number"
    },
    "DOM_VK_NUMPAD4": {
      "!type": "number"
    },
    "DOM_VK_NUMPAD5": {
      "!type": "number"
    },
    "DOM_VK_NUMPAD6": {
      "!type": "number"
    },
    "DOM_VK_NUMPAD7": {
      "!type": "number"
    },
    "DOM_VK_NUMPAD8": {
      "!type": "number"
    },
    "DOM_VK_NUMPAD9": {
      "!type": "number"
    },
    "DOM_VK_MULTIPLY": {
      "!type": "number"
    },
    "DOM_VK_ADD": {
      "!type": "number"
    },
    "DOM_VK_SEPARATOR": {
      "!type": "number"
    },
    "DOM_VK_SUBTRACT": {
      "!type": "number"
    },
    "DOM_VK_DECIMAL": {
      "!type": "number"
    },
    "DOM_VK_DIVIDE": {
      "!type": "number"
    },
    "DOM_VK_F1": {
      "!type": "number"
    },
    "DOM_VK_F2": {
      "!type": "number"
    },
    "DOM_VK_F3": {
      "!type": "number"
    },
    "DOM_VK_F4": {
      "!type": "number"
    },
    "DOM_VK_F5": {
      "!type": "number"
    },
    "DOM_VK_F6": {
      "!type": "number"
    },
    "DOM_VK_F7": {
      "!type": "number"
    },
    "DOM_VK_F8": {
      "!type": "number"
    },
    "DOM_VK_F9": {
      "!type": "number"
    },
    "DOM_VK_F10": {
      "!type": "number"
    },
    "DOM_VK_F11": {
      "!type": "number"
    },
    "DOM_VK_F12": {
      "!type": "number"
    },
    "DOM_VK_F13": {
      "!type": "number"
    },
    "DOM_VK_F14": {
      "!type": "number"
    },
    "DOM_VK_F15": {
      "!type": "number"
    },
    "DOM_VK_F16": {
      "!type": "number"
    },
    "DOM_VK_F17": {
      "!type": "number"
    },
    "DOM_VK_F18": {
      "!type": "number"
    },
    "DOM_VK_F19": {
      "!type": "number"
    },
    "DOM_VK_F20": {
      "!type": "number"
    },
    "DOM_VK_F21": {
      "!type": "number"
    },
    "DOM_VK_F22": {
      "!type": "number"
    },
    "DOM_VK_F23": {
      "!type": "number"
    },
    "DOM_VK_F24": {
      "!type": "number"
    },
    "DOM_VK_NUM_LOCK": {
      "!type": "number"
    },
    "DOM_VK_SCROLL_LOCK": {
      "!type": "number"
    },
    "DOM_VK_WIN_OEM_FJ_JISHO": {
      "!type": "number"
    },
    "DOM_VK_WIN_OEM_FJ_MASSHOU": {
      "!type": "number"
    },
    "DOM_VK_WIN_OEM_FJ_TOUROKU": {
      "!type": "number"
    },
    "DOM_VK_WIN_OEM_FJ_LOYA": {
      "!type": "number"
    },
    "DOM_VK_WIN_OEM_FJ_ROYA": {
      "!type": "number"
    },
    "DOM_VK_CIRCUMFLEX": {
      "!type": "number"
    },
    "DOM_VK_EXCLAMATION": {
      "!type": "number"
    },
    "DOM_VK_DOUBLE_QUOTE": {
      "!type": "number"
    },
    "DOM_VK_HASH": {
      "!type": "number"
    },
    "DOM_VK_DOLLAR": {
      "!type": "number"
    },
    "DOM_VK_PERCENT": {
      "!type": "number"
    },
    "DOM_VK_AMPERSAND": {
      "!type": "number"
    },
    "DOM_VK_UNDERSCORE": {
      "!type": "number"
    },
    "DOM_VK_OPEN_PAREN": {
      "!type": "number"
    },
    "DOM_VK_CLOSE_PAREN": {
      "!type": "number"
    },
    "DOM_VK_ASTERISK": {
      "!type": "number"
    },
    "DOM_VK_PLUS": {
      "!type": "number"
    },
    "DOM_VK_PIPE": {
      "!type": "number"
    },
    "DOM_VK_HYPHEN_MINUS": {
      "!type": "number"
    },
    "DOM_VK_OPEN_CURLY_BRACKET": {
      "!type": "number"
    },
    "DOM_VK_CLOSE_CURLY_BRACKET": {
      "!type": "number"
    },
    "DOM_VK_TILDE": {
      "!type": "number"
    },
    "DOM_VK_VOLUME_MUTE": {
      "!type": "number"
    },
    "DOM_VK_VOLUME_DOWN": {
      "!type": "number"
    },
    "DOM_VK_VOLUME_UP": {
      "!type": "number"
    },
    "DOM_VK_COMMA": {
      "!type": "number"
    },
    "DOM_VK_PERIOD": {
      "!type": "number"
    },
    "DOM_VK_SLASH": {
      "!type": "number"
    },
    "DOM_VK_BACK_QUOTE": {
      "!type": "number"
    },
    "DOM_VK_OPEN_BRACKET": {
      "!type": "number"
    },
    "DOM_VK_BACK_SLASH": {
      "!type": "number"
    },
    "DOM_VK_CLOSE_BRACKET": {
      "!type": "number"
    },
    "DOM_VK_QUOTE": {
      "!type": "number"
    },
    "DOM_VK_META": {
      "!type": "number"
    },
    "DOM_VK_ALTGR": {
      "!type": "number"
    },
    "DOM_VK_WIN_ICO_HELP": {
      "!type": "number"
    },
    "DOM_VK_WIN_ICO_00": {
      "!type": "number"
    },
    "DOM_VK_WIN_ICO_CLEAR": {
      "!type": "number"
    },
    "DOM_VK_WIN_OEM_RESET": {
      "!type": "number"
    },
    "DOM_VK_WIN_OEM_JUMP": {
      "!type": "number"
    },
    "DOM_VK_WIN_OEM_PA1": {
      "!type": "number"
    },
    "DOM_VK_WIN_OEM_PA2": {
      "!type": "number"
    },
    "DOM_VK_WIN_OEM_PA3": {
      "!type": "number"
    },
    "DOM_VK_WIN_OEM_WSCTRL": {
      "!type": "number"
    },
    "DOM_VK_WIN_OEM_CUSEL": {
      "!type": "number"
    },
    "DOM_VK_WIN_OEM_ATTN": {
      "!type": "number"
    },
    "DOM_VK_WIN_OEM_FINISH": {
      "!type": "number"
    },
    "DOM_VK_WIN_OEM_COPY": {
      "!type": "number"
    },
    "DOM_VK_WIN_OEM_AUTO": {
      "!type": "number"
    },
    "DOM_VK_WIN_OEM_ENLW": {
      "!type": "number"
    },
    "DOM_VK_WIN_OEM_BACKTAB": {
      "!type": "number"
    },
    "DOM_VK_ATTN": {
      "!type": "number"
    },
    "DOM_VK_CRSEL": {
      "!type": "number"
    },
    "DOM_VK_EXSEL": {
      "!type": "number"
    },
    "DOM_VK_EREOF": {
      "!type": "number"
    },
    "DOM_VK_PLAY": {
      "!type": "number"
    },
    "DOM_VK_ZOOM": {
      "!type": "number"
    },
    "DOM_VK_PA1": {
      "!type": "number"
    },
    "DOM_VK_WIN_OEM_CLEAR": {
      "!type": "number"
    },
    "initKeyEvent": {
      "!type": "fn(type: string, canBubble: bool, cancelable: bool, view: Window, ctrlKey: bool, altKey: bool, shiftKey: bool, metaKey: bool, keyCode: number, charCode: number)"
    }
  },
  "KeyboardEvent": {
    "!type": "fn(typeArg: string, keyboardEventInitDict?: KeyboardEventInit)",
    "prototype": {
      "charCode": {
        "!type": "number"
      },
      "keyCode": {
        "!type": "number"
      },
      "altKey": {
        "!type": "bool"
      },
      "ctrlKey": {
        "!type": "bool"
      },
      "shiftKey": {
        "!type": "bool"
      },
      "metaKey": {
        "!type": "bool"
      },
      "getModifierState": {
        "!type": "fn(key: string) -> bool"
      },
      "DOM_KEY_LOCATION_STANDARD": {
        "!type": "number"
      },
      "DOM_KEY_LOCATION_LEFT": {
        "!type": "number"
      },
      "DOM_KEY_LOCATION_RIGHT": {
        "!type": "number"
      },
      "DOM_KEY_LOCATION_NUMPAD": {
        "!type": "number"
      },
      "location": {
        "!type": "number"
      },
      "repeat": {
        "!type": "bool"
      },
      "isComposing": {
        "!type": "bool"
      },
      "key": {
        "!type": "string"
      },
      "code": {
        "!type": "string"
      },
      "DOM_VK_CANCEL": {
        "!type": "number"
      },
      "DOM_VK_HELP": {
        "!type": "number"
      },
      "DOM_VK_BACK_SPACE": {
        "!type": "number"
      },
      "DOM_VK_TAB": {
        "!type": "number"
      },
      "DOM_VK_CLEAR": {
        "!type": "number"
      },
      "DOM_VK_RETURN": {
        "!type": "number"
      },
      "DOM_VK_SHIFT": {
        "!type": "number"
      },
      "DOM_VK_CONTROL": {
        "!type": "number"
      },
      "DOM_VK_ALT": {
        "!type": "number"
      },
      "DOM_VK_PAUSE": {
        "!type": "number"
      },
      "DOM_VK_CAPS_LOCK": {
        "!type": "number"
      },
      "DOM_VK_KANA": {
        "!type": "number"
      },
      "DOM_VK_HANGUL": {
        "!type": "number"
      },
      "DOM_VK_EISU": {
        "!type": "number"
      },
      "DOM_VK_JUNJA": {
        "!type": "number"
      },
      "DOM_VK_FINAL": {
        "!type": "number"
      },
      "DOM_VK_HANJA": {
        "!type": "number"
      },
      "DOM_VK_KANJI": {
        "!type": "number"
      },
      "DOM_VK_ESCAPE": {
        "!type": "number"
      },
      "DOM_VK_CONVERT": {
        "!type": "number"
      },
      "DOM_VK_NONCONVERT": {
        "!type": "number"
      },
      "DOM_VK_ACCEPT": {
        "!type": "number"
      },
      "DOM_VK_MODECHANGE": {
        "!type": "number"
      },
      "DOM_VK_SPACE": {
        "!type": "number"
      },
      "DOM_VK_PAGE_UP": {
        "!type": "number"
      },
      "DOM_VK_PAGE_DOWN": {
        "!type": "number"
      },
      "DOM_VK_END": {
        "!type": "number"
      },
      "DOM_VK_HOME": {
        "!type": "number"
      },
      "DOM_VK_LEFT": {
        "!type": "number"
      },
      "DOM_VK_UP": {
        "!type": "number"
      },
      "DOM_VK_RIGHT": {
        "!type": "number"
      },
      "DOM_VK_DOWN": {
        "!type": "number"
      },
      "DOM_VK_SELECT": {
        "!type": "number"
      },
      "DOM_VK_PRINT": {
        "!type": "number"
      },
      "DOM_VK_EXECUTE": {
        "!type": "number"
      },
      "DOM_VK_PRINTSCREEN": {
        "!type": "number"
      },
      "DOM_VK_INSERT": {
        "!type": "number"
      },
      "DOM_VK_DELETE": {
        "!type": "number"
      },
      "DOM_VK_0": {
        "!type": "number"
      },
      "DOM_VK_1": {
        "!type": "number"
      },
      "DOM_VK_2": {
        "!type": "number"
      },
      "DOM_VK_3": {
        "!type": "number"
      },
      "DOM_VK_4": {
        "!type": "number"
      },
      "DOM_VK_5": {
        "!type": "number"
      },
      "DOM_VK_6": {
        "!type": "number"
      },
      "DOM_VK_7": {
        "!type": "number"
      },
      "DOM_VK_8": {
        "!type": "number"
      },
      "DOM_VK_9": {
        "!type": "number"
      },
      "DOM_VK_COLON": {
        "!type": "number"
      },
      "DOM_VK_SEMICOLON": {
        "!type": "number"
      },
      "DOM_VK_LESS_THAN": {
        "!type": "number"
      },
      "DOM_VK_EQUALS": {
        "!type": "number"
      },
      "DOM_VK_GREATER_THAN": {
        "!type": "number"
      },
      "DOM_VK_QUESTION_MARK": {
        "!type": "number"
      },
      "DOM_VK_AT": {
        "!type": "number"
      },
      "DOM_VK_A": {
        "!type": "number"
      },
      "DOM_VK_B": {
        "!type": "number"
      },
      "DOM_VK_C": {
        "!type": "number"
      },
      "DOM_VK_D": {
        "!type": "number"
      },
      "DOM_VK_E": {
        "!type": "number"
      },
      "DOM_VK_F": {
        "!type": "number"
      },
      "DOM_VK_G": {
        "!type": "number"
      },
      "DOM_VK_H": {
        "!type": "number"
      },
      "DOM_VK_I": {
        "!type": "number"
      },
      "DOM_VK_J": {
        "!type": "number"
      },
      "DOM_VK_K": {
        "!type": "number"
      },
      "DOM_VK_L": {
        "!type": "number"
      },
      "DOM_VK_M": {
        "!type": "number"
      },
      "DOM_VK_N": {
        "!type": "number"
      },
      "DOM_VK_O": {
        "!type": "number"
      },
      "DOM_VK_P": {
        "!type": "number"
      },
      "DOM_VK_Q": {
        "!type": "number"
      },
      "DOM_VK_R": {
        "!type": "number"
      },
      "DOM_VK_S": {
        "!type": "number"
      },
      "DOM_VK_T": {
        "!type": "number"
      },
      "DOM_VK_U": {
        "!type": "number"
      },
      "DOM_VK_V": {
        "!type": "number"
      },
      "DOM_VK_W": {
        "!type": "number"
      },
      "DOM_VK_X": {
        "!type": "number"
      },
      "DOM_VK_Y": {
        "!type": "number"
      },
      "DOM_VK_Z": {
        "!type": "number"
      },
      "DOM_VK_WIN": {
        "!type": "number"
      },
      "DOM_VK_CONTEXT_MENU": {
        "!type": "number"
      },
      "DOM_VK_SLEEP": {
        "!type": "number"
      },
      "DOM_VK_NUMPAD0": {
        "!type": "number"
      },
      "DOM_VK_NUMPAD1": {
        "!type": "number"
      },
      "DOM_VK_NUMPAD2": {
        "!type": "number"
      },
      "DOM_VK_NUMPAD3": {
        "!type": "number"
      },
      "DOM_VK_NUMPAD4": {
        "!type": "number"
      },
      "DOM_VK_NUMPAD5": {
        "!type": "number"
      },
      "DOM_VK_NUMPAD6": {
        "!type": "number"
      },
      "DOM_VK_NUMPAD7": {
        "!type": "number"
      },
      "DOM_VK_NUMPAD8": {
        "!type": "number"
      },
      "DOM_VK_NUMPAD9": {
        "!type": "number"
      },
      "DOM_VK_MULTIPLY": {
        "!type": "number"
      },
      "DOM_VK_ADD": {
        "!type": "number"
      },
      "DOM_VK_SEPARATOR": {
        "!type": "number"
      },
      "DOM_VK_SUBTRACT": {
        "!type": "number"
      },
      "DOM_VK_DECIMAL": {
        "!type": "number"
      },
      "DOM_VK_DIVIDE": {
        "!type": "number"
      },
      "DOM_VK_F1": {
        "!type": "number"
      },
      "DOM_VK_F2": {
        "!type": "number"
      },
      "DOM_VK_F3": {
        "!type": "number"
      },
      "DOM_VK_F4": {
        "!type": "number"
      },
      "DOM_VK_F5": {
        "!type": "number"
      },
      "DOM_VK_F6": {
        "!type": "number"
      },
      "DOM_VK_F7": {
        "!type": "number"
      },
      "DOM_VK_F8": {
        "!type": "number"
      },
      "DOM_VK_F9": {
        "!type": "number"
      },
      "DOM_VK_F10": {
        "!type": "number"
      },
      "DOM_VK_F11": {
        "!type": "number"
      },
      "DOM_VK_F12": {
        "!type": "number"
      },
      "DOM_VK_F13": {
        "!type": "number"
      },
      "DOM_VK_F14": {
        "!type": "number"
      },
      "DOM_VK_F15": {
        "!type": "number"
      },
      "DOM_VK_F16": {
        "!type": "number"
      },
      "DOM_VK_F17": {
        "!type": "number"
      },
      "DOM_VK_F18": {
        "!type": "number"
      },
      "DOM_VK_F19": {
        "!type": "number"
      },
      "DOM_VK_F20": {
        "!type": "number"
      },
      "DOM_VK_F21": {
        "!type": "number"
      },
      "DOM_VK_F22": {
        "!type": "number"
      },
      "DOM_VK_F23": {
        "!type": "number"
      },
      "DOM_VK_F24": {
        "!type": "number"
      },
      "DOM_VK_NUM_LOCK": {
        "!type": "number"
      },
      "DOM_VK_SCROLL_LOCK": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_FJ_JISHO": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_FJ_MASSHOU": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_FJ_TOUROKU": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_FJ_LOYA": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_FJ_ROYA": {
        "!type": "number"
      },
      "DOM_VK_CIRCUMFLEX": {
        "!type": "number"
      },
      "DOM_VK_EXCLAMATION": {
        "!type": "number"
      },
      "DOM_VK_DOUBLE_QUOTE": {
        "!type": "number"
      },
      "DOM_VK_HASH": {
        "!type": "number"
      },
      "DOM_VK_DOLLAR": {
        "!type": "number"
      },
      "DOM_VK_PERCENT": {
        "!type": "number"
      },
      "DOM_VK_AMPERSAND": {
        "!type": "number"
      },
      "DOM_VK_UNDERSCORE": {
        "!type": "number"
      },
      "DOM_VK_OPEN_PAREN": {
        "!type": "number"
      },
      "DOM_VK_CLOSE_PAREN": {
        "!type": "number"
      },
      "DOM_VK_ASTERISK": {
        "!type": "number"
      },
      "DOM_VK_PLUS": {
        "!type": "number"
      },
      "DOM_VK_PIPE": {
        "!type": "number"
      },
      "DOM_VK_HYPHEN_MINUS": {
        "!type": "number"
      },
      "DOM_VK_OPEN_CURLY_BRACKET": {
        "!type": "number"
      },
      "DOM_VK_CLOSE_CURLY_BRACKET": {
        "!type": "number"
      },
      "DOM_VK_TILDE": {
        "!type": "number"
      },
      "DOM_VK_VOLUME_MUTE": {
        "!type": "number"
      },
      "DOM_VK_VOLUME_DOWN": {
        "!type": "number"
      },
      "DOM_VK_VOLUME_UP": {
        "!type": "number"
      },
      "DOM_VK_COMMA": {
        "!type": "number"
      },
      "DOM_VK_PERIOD": {
        "!type": "number"
      },
      "DOM_VK_SLASH": {
        "!type": "number"
      },
      "DOM_VK_BACK_QUOTE": {
        "!type": "number"
      },
      "DOM_VK_OPEN_BRACKET": {
        "!type": "number"
      },
      "DOM_VK_BACK_SLASH": {
        "!type": "number"
      },
      "DOM_VK_CLOSE_BRACKET": {
        "!type": "number"
      },
      "DOM_VK_QUOTE": {
        "!type": "number"
      },
      "DOM_VK_META": {
        "!type": "number"
      },
      "DOM_VK_ALTGR": {
        "!type": "number"
      },
      "DOM_VK_WIN_ICO_HELP": {
        "!type": "number"
      },
      "DOM_VK_WIN_ICO_00": {
        "!type": "number"
      },
      "DOM_VK_WIN_ICO_CLEAR": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_RESET": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_JUMP": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_PA1": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_PA2": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_PA3": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_WSCTRL": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_CUSEL": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_ATTN": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_FINISH": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_COPY": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_AUTO": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_ENLW": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_BACKTAB": {
        "!type": "number"
      },
      "DOM_VK_ATTN": {
        "!type": "number"
      },
      "DOM_VK_CRSEL": {
        "!type": "number"
      },
      "DOM_VK_EXSEL": {
        "!type": "number"
      },
      "DOM_VK_EREOF": {
        "!type": "number"
      },
      "DOM_VK_PLAY": {
        "!type": "number"
      },
      "DOM_VK_ZOOM": {
        "!type": "number"
      },
      "DOM_VK_PA1": {
        "!type": "number"
      },
      "DOM_VK_WIN_OEM_CLEAR": {
        "!type": "number"
      },
      "initKeyEvent": {
        "!type": "fn(type: string, canBubble: bool, cancelable: bool, view: Window, ctrlKey: bool, altKey: bool, shiftKey: bool, metaKey: bool, keyCode: number, charCode: number)"
      }
    }
  },
  "KeyframeEffectReadonly": {
    "target": {
      "!type": "Element"
    },
    "name": {
      "!type": "string"
    }
  },
  "IID": {},
  "LocalMediaStream": {
    "stop": {
      "!type": "fn()"
    }
  },
  "Location": {
    "assign": {
      "!type": "fn(url: string)"
    },
    "replace": {
      "!type": "fn(url: string)"
    },
    "reload": {
      "!type": "fn(forceget?: bool)"
    },
    "href": {
      "!type": "string"
    },
    "origin": {
      "!type": "string"
    },
    "protocol": {
      "!type": "string"
    },
    "username": {
      "!type": "string"
    },
    "password": {
      "!type": "string"
    },
    "host": {
      "!type": "string"
    },
    "hostname": {
      "!type": "string"
    },
    "port": {
      "!type": "string"
    },
    "pathname": {
      "!type": "string"
    },
    "search": {
      "!type": "string"
    },
    "hash": {
      "!type": "string"
    }
  },
  "MMICall": {
    "result": {
      "!type": "+Promise[value=MozMMIResult]"
    }
  },
  "MediaDeviceInfo": {
    "deviceId": {
      "!type": "string"
    },
    "kind": {
      "!type": "MediaDeviceKind"
    },
    "label": {
      "!type": "string"
    },
    "groupId": {
      "!type": "string"
    }
  },
  "MediaDevices": {
    "enumerateDevices": {
      "!type": "fn() -> +Promise"
    },
    "getUserMedia": {
      "!type": "fn(constraints?: MediaStreamConstraints) -> +Promise[value=MediaStream]"
    }
  },
  "MediaElementAudioSourceNode": {
    "passThrough": {
      "!type": "bool"
    }
  },
  "MediaEncryptedEvent": {
    "!type": "fn(type: string, eventInitDict?: MediaKeyNeededEventInit)",
    "prototype": {
      "initDataType": {
        "!type": "string"
      },
      "initData": {
        "!type": "ArrayBuffer"
      }
    }
  },
  "MediaError": {
    "MEDIA_ERR_ABORTED": {
      "!type": "number"
    },
    "MEDIA_ERR_NETWORK": {
      "!type": "number"
    },
    "MEDIA_ERR_DECODE": {
      "!type": "number"
    },
    "MEDIA_ERR_SRC_NOT_SUPPORTED": {
      "!type": "number"
    },
    "code": {
      "!type": "number"
    }
  },
  "MediaKeyError": {
    "systemCode": {
      "!type": "number"
    }
  },
  "MediaKeyMessageEvent": {
    "!type": "fn(type: string, eventInitDict?: MediaKeyMessageEventInit)",
    "prototype": {
      "messageType": {
        "!type": "MediaKeyMessageType"
      },
      "message": {
        "!type": "ArrayBuffer"
      }
    }
  },
  "MediaKeySession": {
    "error": {
      "!type": "MediaKeyError"
    },
    "keySystem": {
      "!type": "string"
    },
    "sessionId": {
      "!type": "string"
    },
    "expiration": {
      "!type": "number"
    },
    "closed": {
      "!type": "+Promise[value=void]"
    },
    "keyStatuses": {
      "!type": "MediaKeyStatusMap"
    },
    "generateRequest": {
      "!type": "fn(initDataType: string, initData: BufferSource) -> +Promise[value=void]"
    },
    "load": {
      "!type": "fn(sessionId: string) -> +Promise[value=bool]"
    },
    "update": {
      "!type": "fn(response: BufferSource) -> +Promise[value=void]"
    },
    "close": {
      "!type": "fn() -> +Promise[value=void]"
    },
    "remove": {
      "!type": "fn() -> +Promise[value=void]"
    }
  },
  "MediaKeyStatusMap": {
    "size": {
      "!type": "number"
    },
    "keys": {
      "!type": "fn() -> object"
    },
    "values": {
      "!type": "fn() -> object"
    },
    "entries": {
      "!type": "fn() -> object"
    }
  },
  "MediaKeySystemAccess": {
    "keySystem": {
      "!type": "string"
    },
    "createMediaKeys": {
      "!type": "fn() -> +Promise[value=MediaKeys]"
    }
  },
  "MediaKeys": {
    "keySystem": {
      "!type": "string"
    },
    "createSession": {
      "!type": "fn(sessionType?: SessionType) -> MediaKeySession"
    },
    "setServerCertificate": {
      "!type": "fn(serverCertificate: ?) -> +Promise[value=void]"
    }
  },
  "MediaList": {
    "mediaText": {
      "!type": "string"
    },
    "length": {
      "!type": "number"
    },
    "item": {
      "!type": "fn(index: number) -> string"
    },
    "deleteMedium": {
      "!type": "fn(oldMedium: string)"
    },
    "appendMedium": {
      "!type": "fn(newMedium: string)"
    }
  },
  "MediaQueryList": {
    "media": {
      "!type": "string"
    },
    "matches": {
      "!type": "bool"
    },
    "addListener": {
      "!type": "fn(listener: MediaQueryListListener)"
    },
    "removeListener": {
      "!type": "fn(listener: MediaQueryListListener)"
    }
  },
  "MediaRecorder": {
    "!type": "fn(node: AudioNode, output?: number, options?: MediaRecorderOptions)",
    "prototype": {
      "stream": {
        "!type": "MediaStream"
      },
      "state": {
        "!type": "RecordingState"
      },
      "mimeType": {
        "!type": "string"
      },
      "ondataavailable": {
        "!type": "fn(+Event)"
      },
      "onerror": {
        "!type": "fn(+Event)"
      },
      "onstart": {
        "!type": "fn(+Event)"
      },
      "onstop": {
        "!type": "fn(+Event)"
      },
      "onwarning": {
        "!type": "fn(+Event)"
      },
      "start": {
        "!type": "fn(timeSlice?: number)"
      },
      "stop": {
        "!type": "fn()"
      },
      "pause": {
        "!type": "fn()"
      },
      "resume": {
        "!type": "fn()"
      },
      "requestData": {
        "!type": "fn()"
      }
    }
  },
  "MediaSource": {
    "!type": "fn()",
    "isTypeSupported": {
      "!type": "fn(type: string) -> bool"
    },
    "prototype": {
      "sourceBuffers": {
        "!type": "SourceBufferList"
      },
      "activeSourceBuffers": {
        "!type": "SourceBufferList"
      },
      "readyState": {
        "!type": "MediaSourceReadyState"
      },
      "duration": {
        "!type": "number"
      },
      "addSourceBuffer": {
        "!type": "fn(type: string) -> SourceBuffer"
      },
      "removeSourceBuffer": {
        "!type": "fn(sourceBuffer: SourceBuffer)"
      },
      "endOfStream": {
        "!type": "fn(error?: MediaSourceEndOfStreamError)"
      }
    }
  },
  "MediaStream": {
    "id": {
      "!type": "string"
    },
    "getAudioTracks": {
      "!type": "fn() -> [AudioStreamTrack]"
    },
    "getVideoTracks": {
      "!type": "fn() -> [VideoStreamTrack]"
    },
    "getTracks": {
      "!type": "fn() -> [MediaStreamTrack]"
    },
    "currentTime": {
      "!type": "number"
    }
  },
  "MediaStreamAudioDestinationNode": {
    "stream": {
      "!type": "MediaStream"
    }
  },
  "MediaStreamAudioSourceNode": {
    "passThrough": {
      "!type": "bool"
    }
  },
  "MediaStreamEvent": {
    "!type": "fn(type: string, eventInitDict?: MediaStreamEventInit)",
    "prototype": {
      "stream": {
        "!type": "MediaStream"
      }
    }
  },
  "MediaStreamTrack": {
    "kind": {
      "!type": "string"
    },
    "id": {
      "!type": "string"
    },
    "label": {
      "!type": "string"
    },
    "enabled": {
      "!type": "bool"
    },
    "stop": {
      "!type": "fn()"
    }
  },
  "MediaStreamTrackEvent": {
    "!type": "fn(type: string, eventInitDict?: MediaStreamTrackEventInit)",
    "prototype": {
      "receiver": {
        "!type": "RTCRtpReceiver"
      },
      "track": {
        "!type": "MediaStreamTrack"
      },
      "stream": {
        "!type": "MediaStream"
      }
    }
  },
  "MenuBoxObject": {
    "openMenu": {
      "!type": "fn(openFlag: bool)"
    },
    "activeChild": {
      "!type": "Element"
    },
    "handleKeyPress": {
      "!type": "fn(keyEvent: KeyboardEvent) -> bool"
    },
    "openedWithKey": {
      "!type": "bool"
    }
  },
  "MessageChannel": {
    "!type": "fn()",
    "prototype": {
      "port1": {
        "!type": "MessagePort"
      },
      "port2": {
        "!type": "MessagePort"
      }
    }
  },
  "MessageEvent": {
    "!type": "fn(type: string, eventInitDict?: MessageEventInit)",
    "prototype": {
      "data": {
        "!type": "?"
      },
      "origin": {
        "!type": "string"
      },
      "lastEventId": {
        "!type": "string"
      },
      "source": {
        "!type": "?"
      },
      "ports": {
        "!type": "MessagePortList"
      }
    }
  },
  "MessagePort": {
    "postMessage": {
      "!type": "fn(message: ?, transferable?: [Transferable])"
    },
    "start": {
      "!type": "fn()"
    },
    "close": {
      "!type": "fn()"
    },
    "onmessage": {
      "!type": "fn(+Event)"
    }
  },
  "MimeType": {
    "description": {
      "!type": "string"
    },
    "enabledPlugin": {
      "!type": "Plugin"
    },
    "suffixes": {
      "!type": "string"
    },
    "type": {
      "!type": "string"
    }
  },
  "MimeTypeArray": {
    "length": {
      "!type": "number"
    },
    "item": {
      "!type": "fn(index: number) -> MimeType"
    },
    "namedItem": {
      "!type": "fn(name: string) -> MimeType"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "MouseEvent": {
    "screenX": {
      "!type": "number"
    },
    "screenY": {
      "!type": "number"
    },
    "clientX": {
      "!type": "number"
    },
    "clientY": {
      "!type": "number"
    },
    "offsetX": {
      "!type": "number"
    },
    "offsetY": {
      "!type": "number"
    },
    "ctrlKey": {
      "!type": "bool"
    },
    "shiftKey": {
      "!type": "bool"
    },
    "altKey": {
      "!type": "bool"
    },
    "metaKey": {
      "!type": "bool"
    },
    "button": {
      "!type": "number"
    },
    "buttons": {
      "!type": "number"
    },
    "relatedTarget": {
      "!type": "EventTarget"
    },
    "region": {
      "!type": "string"
    },
    "initMouseEvent": {
      "!type": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: bool, altKeyArg: bool, shiftKeyArg: bool, metaKeyArg: bool, buttonArg: number, relatedTargetArg: EventTarget)"
    },
    "getModifierState": {
      "!type": "fn(keyArg: string) -> bool"
    },
    "MOZ_SOURCE_UNKNOWN": {
      "!type": "number"
    },
    "MOZ_SOURCE_MOUSE": {
      "!type": "number"
    },
    "MOZ_SOURCE_PEN": {
      "!type": "number"
    },
    "MOZ_SOURCE_ERASER": {
      "!type": "number"
    },
    "MOZ_SOURCE_CURSOR": {
      "!type": "number"
    },
    "MOZ_SOURCE_TOUCH": {
      "!type": "number"
    },
    "MOZ_SOURCE_KEYBOARD": {
      "!type": "number"
    },
    "initNSMouseEvent": {
      "!type": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: bool, altKeyArg: bool, shiftKeyArg: bool, metaKeyArg: bool, buttonArg: number, relatedTargetArg: EventTarget, pressure: number, inputSourceArg: number)"
    },
    "hitCluster": {
      "!type": "bool"
    }
  },
  "MouseScrollEvent": {
    "HORIZONTAL_AXIS": {
      "!type": "number"
    },
    "VERTICAL_AXIS": {
      "!type": "number"
    },
    "axis": {
      "!type": "number"
    },
    "initMouseScrollEvent": {
      "!type": "fn(type: string, canBubble: bool, cancelable: bool, view: Window, detail: number, screenX: number, screenY: number, clientX: number, clientY: number, ctrlKey: bool, altKey: bool, shiftKey: bool, metaKey: bool, button: number, relatedTarget: EventTarget, axis: number)"
    }
  },
  "MutationEvent": {
    "MODIFICATION": {
      "!type": "number"
    },
    "ADDITION": {
      "!type": "number"
    },
    "REMOVAL": {
      "!type": "number"
    },
    "relatedNode": {
      "!type": "Node"
    },
    "prevValue": {
      "!type": "string"
    },
    "newValue": {
      "!type": "string"
    },
    "attrName": {
      "!type": "string"
    },
    "attrChange": {
      "!type": "number"
    },
    "initMutationEvent": {
      "!type": "fn(type: string, canBubble: bool, cancelable: bool, relatedNode: Node, prevValue: string, newValue: string, attrName: string, attrChange: number)"
    }
  },
  "MutationRecord": {
    "type": {
      "!type": "string"
    },
    "target": {
      "!type": "Node"
    },
    "addedNodes": {
      "!type": "NodeList"
    },
    "removedNodes": {
      "!type": "NodeList"
    },
    "previousSibling": {
      "!type": "Node"
    },
    "nextSibling": {
      "!type": "Node"
    },
    "attributeName": {
      "!type": "string"
    },
    "attributeNamespace": {
      "!type": "string"
    },
    "oldValue": {
      "!type": "string"
    },
    "addedAnimations": {
      "!type": "[Animation]"
    },
    "changedAnimations": {
      "!type": "[Animation]"
    },
    "removedAnimations": {
      "!type": "[Animation]"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "MutationObserver": {
    "!type": "fn(mutationCallback: MutationCallback)",
    "prototype": {
      "observe": {
        "!type": "fn(target: Node, options?: MutationObserverInit)"
      },
      "disconnect": {
        "!type": "fn()"
      },
      "takeRecords": {
        "!type": "fn() -> [MutationRecord]"
      },
      "getObservingInfo": {
        "!type": "fn() -> [MutationObservingInfo]"
      },
      "mutationCallback": {
        "!type": "MutationCallback"
      },
      "queryInterface": {
        "!type": "fn(iid: IID) -> nsISupports"
      }
    }
  },
  "NamedNodeMap": {
    "getNamedItem": {
      "!type": "fn(name: string) -> Attr"
    },
    "setNamedItem": {
      "!type": "fn(arg: Attr) -> Attr"
    },
    "removeNamedItem": {
      "!type": "fn(name: string) -> Attr"
    },
    "item": {
      "!type": "fn(index: number) -> Attr"
    },
    "length": {
      "!type": "number"
    },
    "getNamedItemNS": {
      "!type": "fn(namespaceURI: string, localName: string) -> Attr"
    },
    "setNamedItemNS": {
      "!type": "fn(arg: Attr) -> Attr"
    },
    "removeNamedItemNS": {
      "!type": "fn(namespaceURI: string, localName: string) -> Attr"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "Navigator": {
    "mimeTypes": {
      "!type": "MimeTypeArray"
    },
    "plugins": {
      "!type": "PluginArray"
    },
    "doNotTrack": {
      "!type": "string"
    },
    "vibrate": {
      "!type": "fn(duration: number) -> bool"
    },
    "maxTouchPoints": {
      "!type": "number"
    },
    "oscpu": {
      "!type": "string"
    },
    "vendor": {
      "!type": "string"
    },
    "vendorSub": {
      "!type": "string"
    },
    "productSub": {
      "!type": "string"
    },
    "cookieEnabled": {
      "!type": "bool"
    },
    "buildID": {
      "!type": "string"
    },
    "javaEnabled": {
      "!type": "fn() -> bool"
    },
    "addIdleObserver": {
      "!type": "fn(aIdleObserver: MozIdleObserver)"
    },
    "removeIdleObserver": {
      "!type": "fn(aIdleObserver: MozIdleObserver)"
    },
    "requestWakeLock": {
      "!type": "fn(aTopic: string) -> MozWakeLock"
    },
    "getDeviceStorage": {
      "!type": "fn(type: string) -> DeviceStorage"
    },
    "getDeviceStorages": {
      "!type": "fn(type: string) -> [DeviceStorage]"
    },
    "connection": {
      "!type": "NetworkInformation"
    },
    "getGamepads": {
      "!type": "fn() -> [Gamepad]"
    },
    "getVRDevices": {
      "!type": "fn() -> +Promise"
    },
    "mediaDevices": {
      "!type": "MediaDevices"
    },
    "serviceWorker": {
      "!type": "ServiceWorkerContainer"
    },
    "sendBeacon": {
      "!type": "fn(url: string, data?: ?) -> bool"
    },
    "tv": {
      "!type": "TVManager"
    },
    "inputPortManager": {
      "!type": "InputPortManager"
    },
    "requestMediaKeySystemAccess": {
      "!type": "fn(keySystem: string, supportedConfigurations?: [MediaKeySystemOptions]) -> +Promise[value=MediaKeySystemAccess]"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    },
    "appCodeName": {
      "!type": "string"
    },
    "appName": {
      "!type": "string"
    },
    "appVersion": {
      "!type": "string"
    },
    "platform": {
      "!type": "string"
    },
    "userAgent": {
      "!type": "string"
    },
    "product": {
      "!type": "string"
    },
    "taintEnabled": {
      "!type": "fn() -> bool"
    },
    "language": {
      "!type": "string"
    },
    "languages": {
      "!type": "[string]"
    },
    "onLine": {
      "!type": "bool"
    },
    "registerProtocolHandler": {
      "!type": "fn(scheme: string, url: string, title: string)"
    },
    "registerContentHandler": {
      "!type": "fn(mimeType: string, url: string, title: string)"
    },
    "getFeature": {
      "!type": "fn(name: string) -> +Promise[value=?]"
    },
    "hasFeature": {
      "!type": "fn(name: string) -> +Promise[value=?]"
    },
    "geolocation": {
      "!type": "Geolocation"
    },
    "battery": {
      "!type": "BatteryManager"
    },
    "getDataStores": {
      "!type": "fn(name: string, owner?: string) -> +Promise"
    }
  },
  "NetworkInformation": {
    "type": {
      "!type": "ConnectionType"
    },
    "ontypechange": {
      "!type": "fn(+Event)"
    }
  },
  "Node": {
    "ELEMENT_NODE": {
      "!type": "number"
    },
    "ATTRIBUTE_NODE": {
      "!type": "number"
    },
    "TEXT_NODE": {
      "!type": "number"
    },
    "CDATA_SECTION_NODE": {
      "!type": "number"
    },
    "ENTITY_REFERENCE_NODE": {
      "!type": "number"
    },
    "ENTITY_NODE": {
      "!type": "number"
    },
    "PROCESSING_INSTRUCTION_NODE": {
      "!type": "number"
    },
    "COMMENT_NODE": {
      "!type": "number"
    },
    "DOCUMENT_NODE": {
      "!type": "number"
    },
    "DOCUMENT_TYPE_NODE": {
      "!type": "number"
    },
    "DOCUMENT_FRAGMENT_NODE": {
      "!type": "number"
    },
    "NOTATION_NODE": {
      "!type": "number"
    },
    "nodeType": {
      "!type": "number"
    },
    "nodeName": {
      "!type": "string"
    },
    "baseURI": {
      "!type": "string"
    },
    "ownerDocument": {
      "!type": "Document"
    },
    "parentNode": {
      "!type": "Node"
    },
    "parentElement": {
      "!type": "Element"
    },
    "hasChildNodes": {
      "!type": "fn() -> bool"
    },
    "childNodes": {
      "!type": "NodeList"
    },
    "firstChild": {
      "!type": "Node"
    },
    "lastChild": {
      "!type": "Node"
    },
    "previousSibling": {
      "!type": "Node"
    },
    "nextSibling": {
      "!type": "Node"
    },
    "nodeValue": {
      "!type": "string"
    },
    "textContent": {
      "!type": "string"
    },
    "insertBefore": {
      "!type": "fn(node: Node, child: Node) -> Node"
    },
    "appendChild": {
      "!type": "fn(node: Node) -> Node"
    },
    "replaceChild": {
      "!type": "fn(node: Node, child: Node) -> Node"
    },
    "removeChild": {
      "!type": "fn(child: Node) -> Node"
    },
    "normalize": {
      "!type": "fn()"
    },
    "cloneNode": {
      "!type": "fn(deep?: bool) -> Node"
    },
    "isEqualNode": {
      "!type": "fn(node: Node) -> bool"
    },
    "DOCUMENT_POSITION_DISCONNECTED": {
      "!type": "number"
    },
    "DOCUMENT_POSITION_PRECEDING": {
      "!type": "number"
    },
    "DOCUMENT_POSITION_FOLLOWING": {
      "!type": "number"
    },
    "DOCUMENT_POSITION_CONTAINS": {
      "!type": "number"
    },
    "DOCUMENT_POSITION_CONTAINED_BY": {
      "!type": "number"
    },
    "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
      "!type": "number"
    },
    "compareDocumentPosition": {
      "!type": "fn(other: Node) -> number"
    },
    "contains": {
      "!type": "fn(other: Node) -> bool"
    },
    "lookupPrefix": {
      "!type": "fn(namespace: string) -> string"
    },
    "lookupNamespaceURI": {
      "!type": "fn(prefix: string) -> string"
    },
    "isDefaultNamespace": {
      "!type": "fn(namespace: string) -> bool"
    },
    "namespaceURI": {
      "!type": "string"
    },
    "prefix": {
      "!type": "string"
    },
    "localName": {
      "!type": "string"
    },
    "setUserData": {
      "!type": "fn(key: string, data: ?) -> ?"
    },
    "getUserData": {
      "!type": "fn(key: string) -> ?"
    },
    "nodePrincipal": {
      "!type": "Principal"
    },
    "baseURIObject": {
      "!type": "URI"
    },
    "getBoundMutationObservers": {
      "!type": "fn() -> [MutationObserver]"
    }
  },
  "NodeIterator": {
    "root": {
      "!type": "Node"
    },
    "referenceNode": {
      "!type": "Node"
    },
    "pointerBeforeReferenceNode": {
      "!type": "bool"
    },
    "whatToShow": {
      "!type": "number"
    },
    "filter": {
      "!type": "NodeFilter"
    },
    "nextNode": {
      "!type": "fn() -> Node"
    },
    "previousNode": {
      "!type": "fn() -> Node"
    },
    "detach": {
      "!type": "fn()"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "NodeList": {
    "item": {
      "!type": "fn(index: number) -> Node"
    },
    "length": {
      "!type": "number"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "Notification": {
    "!type": "fn(title: string, options?: NotificationOptions)",
    "permission": {
      "!type": "NotificationPermission"
    },
    "requestPermission": {
      "!type": "fn(permissionCallback?: NotificationPermissionCallback)"
    },
    "get": {
      "!type": "fn(filter?: GetNotificationOptions) -> +Promise"
    },
    "prototype": {
      "onclick": {
        "!type": "fn(+Event)"
      },
      "onshow": {
        "!type": "fn(+Event)"
      },
      "onerror": {
        "!type": "fn(+Event)"
      },
      "onclose": {
        "!type": "fn(+Event)"
      },
      "title": {
        "!type": "string"
      },
      "dir": {
        "!type": "NotificationDirection"
      },
      "lang": {
        "!type": "string"
      },
      "body": {
        "!type": "string"
      },
      "tag": {
        "!type": "string"
      },
      "icon": {
        "!type": "string"
      },
      "data": {
        "!type": "?"
      },
      "close": {
        "!type": "fn()"
      },
      "queryInterface": {
        "!type": "fn(iid: IID) -> nsISupports"
      }
    }
  },
  "NotifyPaintEvent": {
    "clientRects": {
      "!type": "DOMRectList"
    },
    "boundingClientRect": {
      "!type": "DOMRect"
    },
    "paintRequests": {
      "!type": "PaintRequestList"
    }
  },
  "OfflineAudioCompletionEvent": {
    "renderedBuffer": {
      "!type": "AudioBuffer"
    }
  },
  "OfflineAudioContext": {
    "!type": "fn(numberOfChannels: number, length: number, sampleRate: number)",
    "prototype": {
      "startRendering": {
        "!type": "fn() -> +Promise[value=AudioBuffer]"
      },
      "oncomplete": {
        "!type": "fn(+Event)"
      }
    }
  },
  "OfflineResourceList": {
    "UNCACHED": {
      "!type": "number"
    },
    "IDLE": {
      "!type": "number"
    },
    "CHECKING": {
      "!type": "number"
    },
    "DOWNLOADING": {
      "!type": "number"
    },
    "UPDATEREADY": {
      "!type": "number"
    },
    "OBSOLETE": {
      "!type": "number"
    },
    "status": {
      "!type": "number"
    },
    "update": {
      "!type": "fn()"
    },
    "swapCache": {
      "!type": "fn()"
    },
    "onchecking": {
      "!type": "fn(+Event)"
    },
    "onerror": {
      "!type": "fn(+Event)"
    },
    "onnoupdate": {
      "!type": "fn(+Event)"
    },
    "ondownloading": {
      "!type": "fn(+Event)"
    },
    "onprogress": {
      "!type": "fn(+Event)"
    },
    "onupdateready": {
      "!type": "fn(+Event)"
    },
    "oncached": {
      "!type": "fn(+Event)"
    },
    "onobsolete": {
      "!type": "fn(+Event)"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "OscillatorNode": {
    "type": {
      "!type": "OscillatorType"
    },
    "frequency": {
      "!type": "AudioParam"
    },
    "detune": {
      "!type": "AudioParam"
    },
    "start": {
      "!type": "fn(when?: number)"
    },
    "stop": {
      "!type": "fn(when?: number)"
    },
    "setPeriodicWave": {
      "!type": "fn(periodicWave: PeriodicWave)"
    },
    "onended": {
      "!type": "fn(+Event)"
    },
    "passThrough": {
      "!type": "bool"
    }
  },
  "PageTransitionEvent": {
    "!type": "fn(type: string, eventInitDict?: PageTransitionEventInit)",
    "prototype": {
      "persisted": {
        "!type": "bool"
      }
    }
  },
  "PaintRequest": {
    "clientRect": {
      "!type": "DOMRect"
    },
    "reason": {
      "!type": "string"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "PaintRequestList": {
    "length": {
      "!type": "number"
    },
    "item": {
      "!type": "fn(index: number) -> PaintRequest"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "PannerNode": {
    "panningModel": {
      "!type": "PanningModelType"
    },
    "setPosition": {
      "!type": "fn(x: number, y: number, z: number)"
    },
    "setOrientation": {
      "!type": "fn(x: number, y: number, z: number)"
    },
    "setVelocity": {
      "!type": "fn(x: number, y: number, z: number)"
    },
    "distanceModel": {
      "!type": "DistanceModelType"
    },
    "refDistance": {
      "!type": "number"
    },
    "maxDistance": {
      "!type": "number"
    },
    "rolloffFactor": {
      "!type": "number"
    },
    "coneInnerAngle": {
      "!type": "number"
    },
    "coneOuterAngle": {
      "!type": "number"
    },
    "coneOuterGain": {
      "!type": "number"
    },
    "passThrough": {
      "!type": "bool"
    }
  },
  "Performance": {
    "now": {
      "!type": "fn() -> DOMHighResTimeStamp"
    },
    "timing": {
      "!type": "PerformanceTiming"
    },
    "navigation": {
      "!type": "PerformanceNavigation"
    },
    "getEntries": {
      "!type": "fn() -> PerformanceEntryList"
    },
    "getEntriesByType": {
      "!type": "fn(entryType: string) -> PerformanceEntryList"
    },
    "getEntriesByName": {
      "!type": "fn(name: string, entryType?: string) -> PerformanceEntryList"
    },
    "clearResourceTimings": {
      "!type": "fn()"
    },
    "setResourceTimingBufferSize": {
      "!type": "fn(maxSize: number)"
    },
    "onresourcetimingbufferfull": {
      "!type": "fn(+Event)"
    },
    "mark": {
      "!type": "fn(markName: string)"
    },
    "clearMarks": {
      "!type": "fn(markName?: string)"
    },
    "measure": {
      "!type": "fn(measureName: string, startMark?: string, endMark?: string)"
    },
    "clearMeasures": {
      "!type": "fn(measureName?: string)"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "PerformanceEntry": {
    "name": {
      "!type": "string"
    },
    "entryType": {
      "!type": "string"
    },
    "startTime": {
      "!type": "DOMHighResTimeStamp"
    },
    "duration": {
      "!type": "DOMHighResTimeStamp"
    }
  },
  "PerformanceMark": {},
  "PerformanceMeasure": {},
  "PerformanceNavigation": {
    "TYPE_NAVIGATE": {
      "!type": "number"
    },
    "TYPE_RELOAD": {
      "!type": "number"
    },
    "TYPE_BACK_FORWARD": {
      "!type": "number"
    },
    "TYPE_RESERVED": {
      "!type": "number"
    },
    "type": {
      "!type": "number"
    },
    "redirectCount": {
      "!type": "number"
    }
  },
  "PerformanceResourceTiming": {
    "initiatorType": {
      "!type": "string"
    },
    "redirectStart": {
      "!type": "DOMHighResTimeStamp"
    },
    "redirectEnd": {
      "!type": "DOMHighResTimeStamp"
    },
    "fetchStart": {
      "!type": "DOMHighResTimeStamp"
    },
    "domainLookupStart": {
      "!type": "DOMHighResTimeStamp"
    },
    "domainLookupEnd": {
      "!type": "DOMHighResTimeStamp"
    },
    "connectStart": {
      "!type": "DOMHighResTimeStamp"
    },
    "connectEnd": {
      "!type": "DOMHighResTimeStamp"
    },
    "secureConnectionStart": {
      "!type": "DOMHighResTimeStamp"
    },
    "requestStart": {
      "!type": "DOMHighResTimeStamp"
    },
    "responseStart": {
      "!type": "DOMHighResTimeStamp"
    },
    "responseEnd": {
      "!type": "DOMHighResTimeStamp"
    }
  },
  "PerformanceTiming": {
    "navigationStart": {
      "!type": "number"
    },
    "unloadEventStart": {
      "!type": "number"
    },
    "unloadEventEnd": {
      "!type": "number"
    },
    "redirectStart": {
      "!type": "number"
    },
    "redirectEnd": {
      "!type": "number"
    },
    "fetchStart": {
      "!type": "number"
    },
    "domainLookupStart": {
      "!type": "number"
    },
    "domainLookupEnd": {
      "!type": "number"
    },
    "connectStart": {
      "!type": "number"
    },
    "connectEnd": {
      "!type": "number"
    },
    "requestStart": {
      "!type": "number"
    },
    "responseStart": {
      "!type": "number"
    },
    "responseEnd": {
      "!type": "number"
    },
    "domLoading": {
      "!type": "number"
    },
    "domInteractive": {
      "!type": "number"
    },
    "domContentLoadedEventStart": {
      "!type": "number"
    },
    "domContentLoadedEventEnd": {
      "!type": "number"
    },
    "domComplete": {
      "!type": "number"
    },
    "loadEventStart": {
      "!type": "number"
    },
    "loadEventEnd": {
      "!type": "number"
    }
  },
  "PeriodicWave": {},
  "PermissionSettings": {
    "get": {
      "!type": "fn(permission: string, manifestURI: string, origin: string, browserFlag: bool) -> string"
    },
    "set": {
      "!type": "fn(permission: string, value: string, manifestURI: string, origin: string, browserFlag: bool)"
    },
    "isExplicit": {
      "!type": "fn(permission: string, manifestURI: string, origin: string, browserFlag: bool) -> bool"
    },
    "remove": {
      "!type": "fn(permission: string, manifestURI: string, origin: string)"
    }
  },
  "PhoneNumberService": {
    "fuzzyMatch": {
      "!type": "fn(number1?: string, number2?: string) -> DOMRequest"
    },
    "normalize": {
      "!type": "fn(number: string) -> string"
    }
  },
  "Plugin": {
    "description": {
      "!type": "string"
    },
    "filename": {
      "!type": "string"
    },
    "version": {
      "!type": "string"
    },
    "name": {
      "!type": "string"
    },
    "length": {
      "!type": "number"
    },
    "item": {
      "!type": "fn(index: number) -> MimeType"
    },
    "namedItem": {
      "!type": "fn(name: string) -> MimeType"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "PluginArray": {
    "length": {
      "!type": "number"
    },
    "item": {
      "!type": "fn(index: number) -> Plugin"
    },
    "namedItem": {
      "!type": "fn(name: string) -> Plugin"
    },
    "refresh": {
      "!type": "fn(reloadDocuments?: bool)"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "PointerEvent": {
    "!type": "fn(type: string, eventInitDict?: PointerEventInit)",
    "prototype": {
      "pointerId": {
        "!type": "number"
      },
      "width": {
        "!type": "number"
      },
      "height": {
        "!type": "number"
      },
      "pressure": {
        "!type": "number"
      },
      "tiltX": {
        "!type": "number"
      },
      "tiltY": {
        "!type": "number"
      },
      "pointerType": {
        "!type": "string"
      },
      "isPrimary": {
        "!type": "bool"
      }
    }
  },
  "PopStateEvent": {
    "!type": "fn(type: string, eventInitDict?: PopStateEventInit)",
    "prototype": {
      "state": {
        "!type": "?"
      }
    }
  },
  "PopupBlockedEvent": {
    "!type": "fn(type: string, eventInitDict?: PopupBlockedEventInit)",
    "prototype": {
      "requestingWindow": {
        "!type": "Window"
      },
      "popupWindowURI": {
        "!type": "URI"
      },
      "popupWindowName": {
        "!type": "string"
      },
      "popupWindowFeatures": {
        "!type": "string"
      }
    }
  },
  "PopupBoxObject": {
    "showPopup": {
      "!type": "fn(srcContent: Element, popupContent: Element, xpos: number, ypos: number, popupType?: string, anchorAlignment?: string, popupAlignment?: string)"
    },
    "hidePopup": {
      "!type": "fn(cancel?: bool)"
    },
    "autoPosition": {
      "!type": "bool"
    },
    "enableKeyboardNavigator": {
      "!type": "fn(enableKeyboardNavigator: bool)"
    },
    "enableRollup": {
      "!type": "fn(enableRollup: bool)"
    },
    "ROLLUP_DEFAULT": {
      "!type": "number"
    },
    "ROLLUP_CONSUME": {
      "!type": "number"
    },
    "ROLLUP_NO_CONSUME": {
      "!type": "number"
    },
    "setConsumeRollupEvent": {
      "!type": "fn(consume: number)"
    },
    "sizeTo": {
      "!type": "fn(width: number, height: number)"
    },
    "moveTo": {
      "!type": "fn(left: number, top: number)"
    },
    "openPopup": {
      "!type": "fn(anchorElement: Element, position?: string, x: number, y: number, isContextMenu: bool, attributesOverride: bool, triggerEvent: Event)"
    },
    "openPopupAtScreen": {
      "!type": "fn(x: number, y: number, isContextMenu: bool, triggerEvent: Event)"
    },
    "popupState": {
      "!type": "string"
    },
    "triggerNode": {
      "!type": "Node"
    },
    "anchorNode": {
      "!type": "Element"
    },
    "getOuterScreenRect": {
      "!type": "fn() -> DOMRect"
    },
    "moveToAnchor": {
      "!type": "fn(anchorElement: Element, position?: string, x: number, y: number, attributesOverride: bool)"
    },
    "alignmentPosition": {
      "!type": "string"
    },
    "alignmentOffset": {
      "!type": "number"
    }
  },
  "PresentationDeviceInfoManager": {
    "ondevicechange": {
      "!type": "fn(+Event)"
    },
    "getAll": {
      "!type": "fn() -> +Promise"
    },
    "forceDiscovery": {
      "!type": "fn()"
    }
  },
  "ProcessingInstruction": {
    "target": {
      "!type": "string"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "ProgressEvent": {
    "!type": "fn(type: string, eventInitDict?: ProgressEventInit)",
    "prototype": {
      "lengthComputable": {
        "!type": "bool"
      },
      "loaded": {
        "!type": "number"
      },
      "total": {
        "!type": "number"
      }
    }
  },
  "Promise": {
    "!type": "fn(init: PromiseInit)",
    "resolve": {
      "!type": "fn(value?: ?) -> +Promise[value=?]"
    },
    "reject": {
      "!type": "fn(value?: ?) -> +Promise[value=void]"
    },
    "all": {
      "!type": "fn(iterable: [?]) -> +Promise[value=?]"
    },
    "race": {
      "!type": "fn(iterable: [?]) -> +Promise[value=?]"
    },
    "prototype": {
      "then": {
        "!type": "fn(fulfillCallback?: AnyCallback, rejectCallback?: AnyCallback) -> +Promise[value=?]"
      },
      "catch": {
        "!type": "fn(rejectCallback?: AnyCallback) -> +Promise[value=?]"
      }
    }
  },
  "PushEvent": {
    "!type": "fn(type: string, eventInitDict?: PushEventInit)",
    "prototype": {
      "data": {
        "!type": "PushMessageData"
      }
    }
  },
  "PushManager": {
    "subscribe": {
      "!type": "fn() -> +Promise[value=PushSubscription]"
    },
    "getSubscription": {
      "!type": "fn() -> +Promise[value=PushSubscription]"
    },
    "hasPermission": {
      "!type": "fn() -> +Promise[value=PushPermissionStatus]"
    },
    "setScope": {
      "!type": "fn(scope: string)"
    }
  },
  "PushMessageData": {
    "arrayBuffer": {
      "!type": "fn() -> ArrayBuffer"
    },
    "blob": {
      "!type": "fn() -> Blob"
    },
    "json": {
      "!type": "fn() -> object"
    },
    "text": {
      "!type": "fn() -> string"
    }
  },
  "RGBColor": {
    "red": {
      "!type": "CSSPrimitiveValue"
    },
    "green": {
      "!type": "CSSPrimitiveValue"
    },
    "blue": {
      "!type": "CSSPrimitiveValue"
    },
    "alpha": {
      "!type": "CSSPrimitiveValue"
    }
  },
  "RTCDataChannel": {},
  "RTCDataChannelEvent": {
    "!type": "fn(type: string, eventInitDict?: RTCDataChannelEventInit)",
    "prototype": {
      "channel": {
        "!type": "RTCDataChannel"
      }
    }
  },
  "RTCPeerConnectionIceEvent": {
    "!type": "fn(type: string, eventInitDict?: RTCPeerConnectionIceEventInit)",
    "prototype": {
      "candidate": {
        "!type": "mozRTCIceCandidate"
      }
    }
  },
  "RTCRtpReceiver": {
    "track": {
      "!type": "MediaStreamTrack"
    }
  },
  "RTCRtpSender": {
    "track": {
      "!type": "MediaStreamTrack"
    },
    "replaceTrack": {
      "!type": "fn(track: MediaStreamTrack) -> +Promise[value=void]"
    }
  },
  "RTCStatsReport": {
    "forEach": {
      "!type": "fn(callbackFn: RTCStatsReportCallback, thisArg?: ?)"
    },
    "get": {
      "!type": "fn(key: string) -> object"
    },
    "has": {
      "!type": "fn(key: string) -> bool"
    }
  },
  "RadioNodeList": {
    "value": {
      "!type": "string"
    }
  },
  "Range": {
    "!type": "fn()",
    "prototype": {
      "startContainer": {
        "!type": "Node"
      },
      "startOffset": {
        "!type": "number"
      },
      "endContainer": {
        "!type": "Node"
      },
      "endOffset": {
        "!type": "number"
      },
      "collapsed": {
        "!type": "bool"
      },
      "commonAncestorContainer": {
        "!type": "Node"
      },
      "setStart": {
        "!type": "fn(refNode: Node, offset: number)"
      },
      "setEnd": {
        "!type": "fn(refNode: Node, offset: number)"
      },
      "setStartBefore": {
        "!type": "fn(refNode: Node)"
      },
      "setStartAfter": {
        "!type": "fn(refNode: Node)"
      },
      "setEndBefore": {
        "!type": "fn(refNode: Node)"
      },
      "setEndAfter": {
        "!type": "fn(refNode: Node)"
      },
      "collapse": {
        "!type": "fn(toStart?: bool)"
      },
      "selectNode": {
        "!type": "fn(refNode: Node)"
      },
      "selectNodeContents": {
        "!type": "fn(refNode: Node)"
      },
      "START_TO_START": {
        "!type": "number"
      },
      "START_TO_END": {
        "!type": "number"
      },
      "END_TO_END": {
        "!type": "number"
      },
      "END_TO_START": {
        "!type": "number"
      },
      "compareBoundaryPoints": {
        "!type": "fn(how: number, sourceRange: Range) -> number"
      },
      "deleteContents": {
        "!type": "fn()"
      },
      "extractContents": {
        "!type": "fn() -> DocumentFragment"
      },
      "cloneContents": {
        "!type": "fn() -> DocumentFragment"
      },
      "insertNode": {
        "!type": "fn(node: Node)"
      },
      "surroundContents": {
        "!type": "fn(newParent: Node)"
      },
      "cloneRange": {
        "!type": "fn() -> Range"
      },
      "detach": {
        "!type": "fn()"
      },
      "isPointInRange": {
        "!type": "fn(node: Node, offset: number) -> bool"
      },
      "comparePoint": {
        "!type": "fn(node: Node, offset: number) -> number"
      },
      "intersectsNode": {
        "!type": "fn(node: Node) -> bool"
      },
      "createContextualFragment": {
        "!type": "fn(fragment: string) -> DocumentFragment"
      },
      "getClientRects": {
        "!type": "fn() -> DOMRectList"
      },
      "getBoundingClientRect": {
        "!type": "fn() -> DOMRect"
      },
      "queryInterface": {
        "!type": "fn(iid: IID) -> nsISupports"
      }
    }
  },
  "RecordErrorEvent": {
    "!type": "fn(type: string, eventInitDict?: RecordErrorEventInit)",
    "prototype": {
      "name": {
        "!type": "string"
      }
    }
  },
  "Rect": {
    "top": {
      "!type": "CSSPrimitiveValue"
    },
    "right": {
      "!type": "CSSPrimitiveValue"
    },
    "bottom": {
      "!type": "CSSPrimitiveValue"
    },
    "left": {
      "!type": "CSSPrimitiveValue"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "Request": {
    "!type": "fn(input: RequestInfo, init?: RequestInit)",
    "prototype": {
      "method": {
        "!type": "ByteString"
      },
      "url": {
        "!type": "string"
      },
      "headers": {
        "!type": "Headers"
      },
      "context": {
        "!type": "RequestContext"
      },
      "referrer": {
        "!type": "string"
      },
      "mode": {
        "!type": "RequestMode"
      },
      "credentials": {
        "!type": "RequestCredentials"
      },
      "cache": {
        "!type": "RequestCache"
      },
      "clone": {
        "!type": "fn() -> Request"
      },
      "setContext": {
        "!type": "fn(context: RequestContext)"
      },
      "bodyUsed": {
        "!type": "bool"
      },
      "arrayBuffer": {
        "!type": "fn() -> +Promise[value=ArrayBuffer]"
      },
      "blob": {
        "!type": "fn() -> +Promise[value=Blob]"
      },
      "formData": {
        "!type": "fn() -> +Promise[value=FormData]"
      },
      "json": {
        "!type": "fn() -> +Promise[value=JSON]"
      },
      "text": {
        "!type": "fn() -> +Promise[value=string]"
      }
    }
  },
  "RequestSyncApp": {
    "origin": {
      "!type": "string"
    },
    "manifestURL": {
      "!type": "string"
    },
    "isInBrowserElement": {
      "!type": "bool"
    }
  },
  "RequestSyncTask": {
    "app": {
      "!type": "RequestSyncApp"
    },
    "state": {
      "!type": "RequestSyncTaskPolicyState"
    },
    "overwrittenMinInterval": {
      "!type": "number"
    },
    "task": {
      "!type": "string"
    },
    "lastSync": {
      "!type": "DOMTimeStamp"
    },
    "wakeUpPage": {
      "!type": "string"
    },
    "oneShot": {
      "!type": "bool"
    },
    "minInterval": {
      "!type": "number"
    },
    "wifiOnly": {
      "!type": "bool"
    },
    "data": {
      "!type": "?"
    },
    "setPolicy": {
      "!type": "fn(aState: RequestSyncTaskPolicyState, ovewrittenMinInterval?: number) -> +Promise[value=void]"
    },
    "runNow": {
      "!type": "fn() -> +Promise[value=void]"
    }
  },
  "RequestSyncManager": {
    "registrations": {
      "!type": "fn() -> +Promise"
    }
  },
  "RequestSyncScheduler": {
    "register": {
      "!type": "fn(task: string, params?: RequestTaskParams) -> +Promise[value=void]"
    },
    "unregister": {
      "!type": "fn(task: string) -> +Promise[value=void]"
    },
    "registrations": {
      "!type": "fn() -> +Promise"
    },
    "registration": {
      "!type": "fn(task: string) -> +Promise[value=RequestTaskFull]"
    }
  },
  "NetworkStatsData": {
    "receivedBytes": {
      "!type": "number"
    },
    "sentBytes": {
      "!type": "number"
    },
    "timestamp": {
      "!type": "DOMTimeStamp"
    }
  },
  "PowerStatsData": {
    "consumedPower": {
      "!type": "number"
    },
    "timestamp": {
      "!type": "DOMTimeStamp"
    }
  },
  "ResourceStats": {
    "type": {
      "!type": "ResourceType"
    },
    "component": {
      "!type": "string"
    },
    "serviceType": {
      "!type": "SystemService"
    },
    "manifestURL": {
      "!type": "string"
    },
    "getData": {
      "!type": "fn() -> [?]"
    },
    "start": {
      "!type": "DOMTimeStamp"
    },
    "end": {
      "!type": "DOMTimeStamp"
    }
  },
  "ResourceStatsAlarm": {
    "alarmId": {
      "!type": "number"
    },
    "type": {
      "!type": "ResourceType"
    },
    "component": {
      "!type": "string"
    },
    "serviceType": {
      "!type": "SystemService"
    },
    "manifestURL": {
      "!type": "string"
    },
    "threshold": {
      "!type": "number"
    },
    "data": {
      "!type": "?"
    }
  },
  "ResourceStatsManager": {
    "!type": "fn(type: ResourceType)",
    "prototype": {
      "getStats": {
        "!type": "fn(statsOptions?: ResourceStatsOptions, start?: DOMTimeStamp, end?: DOMTimeStamp) -> +Promise[value=ResourceStats]"
      },
      "clearStats": {
        "!type": "fn(statsOptions?: ResourceStatsOptions, start?: DOMTimeStamp, end?: DOMTimeStamp) -> +Promise[value=?]"
      },
      "clearAllStats": {
        "!type": "fn() -> +Promise[value=?]"
      },
      "addAlarm": {
        "!type": "fn(threshold: number, statsOptions?: ResourceStatsOptions, alarmOptions?: ResourceStatsAlarmOptions) -> +Promise[value=number]"
      },
      "getAlarms": {
        "!type": "fn(statsOptions?: ResourceStatsOptions) -> +Promise"
      },
      "removeAlarm": {
        "!type": "fn(alarmId: number) -> +Promise[value=?]"
      },
      "removeAllAlarms": {
        "!type": "fn() -> +Promise[value=?]"
      },
      "getAvailableComponents": {
        "!type": "fn() -> +Promise"
      },
      "resourceTypes": {
        "!type": "[string]"
      },
      "sampleRate": {
        "!type": "number"
      },
      "maxStorageAge": {
        "!type": "number"
      }
    }
  },
  "Response": {
    "!type": "fn(body?: BodyInit, init?: ResponseInit)",
    "error": {
      "!type": "fn() -> Response"
    },
    "redirect": {
      "!type": "fn(url: string, status?: number) -> Response"
    },
    "prototype": {
      "type": {
        "!type": "ResponseType"
      },
      "url": {
        "!type": "string"
      },
      "status": {
        "!type": "number"
      },
      "ok": {
        "!type": "bool"
      },
      "statusText": {
        "!type": "ByteString"
      },
      "headers": {
        "!type": "Headers"
      },
      "clone": {
        "!type": "fn() -> Response"
      },
      "bodyUsed": {
        "!type": "bool"
      },
      "arrayBuffer": {
        "!type": "fn() -> +Promise[value=ArrayBuffer]"
      },
      "blob": {
        "!type": "fn() -> +Promise[value=Blob]"
      },
      "formData": {
        "!type": "fn() -> +Promise[value=FormData]"
      },
      "json": {
        "!type": "fn() -> +Promise[value=JSON]"
      },
      "text": {
        "!type": "fn() -> +Promise[value=string]"
      }
    }
  },
  "SVGAElement": {
    "target": {
      "!type": "SVGAnimatedString"
    },
    "download": {
      "!type": "string"
    },
    "href": {
      "!type": "SVGAnimatedString"
    }
  },
  "SVGAltGlyphElement": {
    "glyphRef": {
      "!type": "string"
    },
    "format": {
      "!type": "string"
    },
    "href": {
      "!type": "SVGAnimatedString"
    }
  },
  "SVGAngle": {
    "SVG_ANGLETYPE_UNKNOWN": {
      "!type": "number"
    },
    "SVG_ANGLETYPE_UNSPECIFIED": {
      "!type": "number"
    },
    "SVG_ANGLETYPE_DEG": {
      "!type": "number"
    },
    "SVG_ANGLETYPE_RAD": {
      "!type": "number"
    },
    "SVG_ANGLETYPE_GRAD": {
      "!type": "number"
    },
    "unitType": {
      "!type": "number"
    },
    "value": {
      "!type": "number"
    },
    "valueInSpecifiedUnits": {
      "!type": "number"
    },
    "valueAsString": {
      "!type": "string"
    },
    "newValueSpecifiedUnits": {
      "!type": "fn(unitType: number, valueInSpecifiedUnits: number)"
    },
    "convertToSpecifiedUnits": {
      "!type": "fn(unitType: number)"
    }
  },
  "SVGAnimateElement": {},
  "SVGAnimateMotionElement": {},
  "SVGAnimateTransformElement": {},
  "SVGAnimatedAngle": {
    "baseVal": {
      "!type": "SVGAngle"
    },
    "animVal": {
      "!type": "SVGAngle"
    }
  },
  "SVGAnimatedBoolean": {
    "baseVal": {
      "!type": "bool"
    },
    "animVal": {
      "!type": "bool"
    }
  },
  "SVGAnimatedEnumeration": {
    "baseVal": {
      "!type": "number"
    },
    "animVal": {
      "!type": "number"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "SVGAnimatedInteger": {
    "baseVal": {
      "!type": "number"
    },
    "animVal": {
      "!type": "number"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "SVGAnimatedLength": {
    "baseVal": {
      "!type": "SVGLength"
    },
    "animVal": {
      "!type": "SVGLength"
    }
  },
  "SVGAnimatedLengthList": {
    "baseVal": {
      "!type": "SVGLengthList"
    },
    "animVal": {
      "!type": "SVGLengthList"
    }
  },
  "SVGAnimatedNumber": {
    "baseVal": {
      "!type": "number"
    },
    "animVal": {
      "!type": "number"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "SVGAnimatedNumberList": {
    "baseVal": {
      "!type": "SVGNumberList"
    },
    "animVal": {
      "!type": "SVGNumberList"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "SVGAnimatedPreserveAspectRatio": {
    "baseVal": {
      "!type": "SVGPreserveAspectRatio"
    },
    "animVal": {
      "!type": "SVGPreserveAspectRatio"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "SVGAnimatedRect": {
    "baseVal": {
      "!type": "SVGRect"
    },
    "animVal": {
      "!type": "SVGRect"
    }
  },
  "SVGAnimatedString": {
    "baseVal": {
      "!type": "string"
    },
    "animVal": {
      "!type": "string"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "SVGAnimatedTransformList": {
    "baseVal": {
      "!type": "SVGTransformList"
    },
    "animVal": {
      "!type": "SVGTransformList"
    }
  },
  "SVGAnimationElement": {
    "targetElement": {
      "!type": "SVGElement"
    },
    "getStartTime": {
      "!type": "fn() -> number"
    },
    "getCurrentTime": {
      "!type": "fn() -> number"
    },
    "getSimpleDuration": {
      "!type": "fn() -> number"
    },
    "beginElement": {
      "!type": "fn()"
    },
    "beginElementAt": {
      "!type": "fn(offset: number)"
    },
    "endElement": {
      "!type": "fn()"
    },
    "endElementAt": {
      "!type": "fn(offset: number)"
    },
    "requiredFeatures": {
      "!type": "SVGStringList"
    },
    "requiredExtensions": {
      "!type": "SVGStringList"
    },
    "systemLanguage": {
      "!type": "SVGStringList"
    },
    "hasExtension": {
      "!type": "fn(extension: string) -> bool"
    }
  },
  "SVGCircleElement": {
    "cx": {
      "!type": "SVGAnimatedLength"
    },
    "cy": {
      "!type": "SVGAnimatedLength"
    },
    "r": {
      "!type": "SVGAnimatedLength"
    }
  },
  "SVGClipPathElement": {
    "clipPathUnits": {
      "!type": "SVGAnimatedEnumeration"
    },
    "transform": {
      "!type": "SVGAnimatedTransformList"
    },
    "SVG_UNIT_TYPE_UNKNOWN": {
      "!type": "number"
    },
    "SVG_UNIT_TYPE_USERSPACEONUSE": {
      "!type": "number"
    },
    "SVG_UNIT_TYPE_OBJECTBOUNDINGBOX": {
      "!type": "number"
    }
  },
  "SVGComponentTransferFunctionElement": {
    "SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN": {
      "!type": "number"
    },
    "SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY": {
      "!type": "number"
    },
    "SVG_FECOMPONENTTRANSFER_TYPE_TABLE": {
      "!type": "number"
    },
    "SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE": {
      "!type": "number"
    },
    "SVG_FECOMPONENTTRANSFER_TYPE_LINEAR": {
      "!type": "number"
    },
    "SVG_FECOMPONENTTRANSFER_TYPE_GAMMA": {
      "!type": "number"
    },
    "type": {
      "!type": "SVGAnimatedEnumeration"
    },
    "tableValues": {
      "!type": "SVGAnimatedNumberList"
    },
    "slope": {
      "!type": "SVGAnimatedNumber"
    },
    "intercept": {
      "!type": "SVGAnimatedNumber"
    },
    "amplitude": {
      "!type": "SVGAnimatedNumber"
    },
    "exponent": {
      "!type": "SVGAnimatedNumber"
    },
    "offset": {
      "!type": "SVGAnimatedNumber"
    }
  },
  "SVGDefsElement": {},
  "SVGDescElement": {},
  "SVGDocument": {
    "domain": {
      "!type": "string"
    },
    "rootElement": {
      "!type": "SVGElement"
    }
  },
  "SVGElement": {
    "id": {
      "!type": "string"
    },
    "className": {
      "!type": "SVGAnimatedString"
    },
    "style": {
      "!type": "CSSStyleDeclaration"
    },
    "ownerSVGElement": {
      "!type": "SVGSVGElement"
    },
    "viewportElement": {
      "!type": "SVGElement"
    },
    "oncopy": {
      "!type": "fn(+Event)"
    },
    "oncut": {
      "!type": "fn(+Event)"
    },
    "onpaste": {
      "!type": "fn(+Event)"
    },
    "onabort": {
      "!type": "fn(+Event)"
    },
    "onblur": {
      "!type": "fn(+Event)"
    },
    "onfocus": {
      "!type": "fn(+Event)"
    },
    "oncanplay": {
      "!type": "fn(+Event)"
    },
    "oncanplaythrough": {
      "!type": "fn(+Event)"
    },
    "onchange": {
      "!type": "fn(+Event)"
    },
    "onclick": {
      "!type": "fn(+Event)"
    },
    "oncontextmenu": {
      "!type": "fn(+Event)"
    },
    "ondblclick": {
      "!type": "fn(+Event)"
    },
    "ondrag": {
      "!type": "fn(+Event)"
    },
    "ondragend": {
      "!type": "fn(+Event)"
    },
    "ondragenter": {
      "!type": "fn(+Event)"
    },
    "ondragleave": {
      "!type": "fn(+Event)"
    },
    "ondragover": {
      "!type": "fn(+Event)"
    },
    "ondragstart": {
      "!type": "fn(+Event)"
    },
    "ondrop": {
      "!type": "fn(+Event)"
    },
    "ondurationchange": {
      "!type": "fn(+Event)"
    },
    "onemptied": {
      "!type": "fn(+Event)"
    },
    "onended": {
      "!type": "fn(+Event)"
    },
    "oninput": {
      "!type": "fn(+Event)"
    },
    "oninvalid": {
      "!type": "fn(+Event)"
    },
    "onkeydown": {
      "!type": "fn(+Event)"
    },
    "onkeypress": {
      "!type": "fn(+Event)"
    },
    "onkeyup": {
      "!type": "fn(+Event)"
    },
    "onload": {
      "!type": "fn(+Event)"
    },
    "onloadeddata": {
      "!type": "fn(+Event)"
    },
    "onloadedmetadata": {
      "!type": "fn(+Event)"
    },
    "onloadstart": {
      "!type": "fn(+Event)"
    },
    "onmousedown": {
      "!type": "fn(+Event)"
    },
    "onmouseenter": {
      "!type": "fn(+Event)"
    },
    "onmouseleave": {
      "!type": "fn(+Event)"
    },
    "onmousemove": {
      "!type": "fn(+Event)"
    },
    "onmouseout": {
      "!type": "fn(+Event)"
    },
    "onmouseover": {
      "!type": "fn(+Event)"
    },
    "onmouseup": {
      "!type": "fn(+Event)"
    },
    "onpause": {
      "!type": "fn(+Event)"
    },
    "onplay": {
      "!type": "fn(+Event)"
    },
    "onplaying": {
      "!type": "fn(+Event)"
    },
    "onprogress": {
      "!type": "fn(+Event)"
    },
    "onratechange": {
      "!type": "fn(+Event)"
    },
    "onreset": {
      "!type": "fn(+Event)"
    },
    "onresize": {
      "!type": "fn(+Event)"
    },
    "onscroll": {
      "!type": "fn(+Event)"
    },
    "onseeked": {
      "!type": "fn(+Event)"
    },
    "onseeking": {
      "!type": "fn(+Event)"
    },
    "onselect": {
      "!type": "fn(+Event)"
    },
    "onshow": {
      "!type": "fn(+Event)"
    },
    "onstalled": {
      "!type": "fn(+Event)"
    },
    "onsubmit": {
      "!type": "fn(+Event)"
    },
    "onsuspend": {
      "!type": "fn(+Event)"
    },
    "ontimeupdate": {
      "!type": "fn(+Event)"
    },
    "onvolumechange": {
      "!type": "fn(+Event)"
    },
    "onwaiting": {
      "!type": "fn(+Event)"
    },
    "onpointercancel": {
      "!type": "fn(+Event)"
    },
    "onpointerdown": {
      "!type": "fn(+Event)"
    },
    "onpointerup": {
      "!type": "fn(+Event)"
    },
    "onpointermove": {
      "!type": "fn(+Event)"
    },
    "onpointerout": {
      "!type": "fn(+Event)"
    },
    "onpointerover": {
      "!type": "fn(+Event)"
    },
    "onpointerenter": {
      "!type": "fn(+Event)"
    },
    "onpointerleave": {
      "!type": "fn(+Event)"
    },
    "ongotpointercapture": {
      "!type": "fn(+Event)"
    },
    "onlostpointercapture": {
      "!type": "fn(+Event)"
    },
    "onmozfullscreenchange": {
      "!type": "fn(+Event)"
    },
    "onmozfullscreenerror": {
      "!type": "fn(+Event)"
    },
    "onmozpointerlockchange": {
      "!type": "fn(+Event)"
    },
    "onmozpointerlockerror": {
      "!type": "fn(+Event)"
    },
    "ontouchstart": {
      "!type": "fn(+Event)"
    },
    "ontouchend": {
      "!type": "fn(+Event)"
    },
    "ontouchmove": {
      "!type": "fn(+Event)"
    },
    "ontouchcancel": {
      "!type": "fn(+Event)"
    },
    "onerror": {
      "!type": "fn(+Event)"
    }
  },
  "SVGEllipseElement": {
    "cx": {
      "!type": "SVGAnimatedLength"
    },
    "cy": {
      "!type": "SVGAnimatedLength"
    },
    "rx": {
      "!type": "SVGAnimatedLength"
    },
    "ry": {
      "!type": "SVGAnimatedLength"
    }
  },
  "SVGFEBlendElement": {
    "SVG_FEBLEND_MODE_UNKNOWN": {
      "!type": "number"
    },
    "SVG_FEBLEND_MODE_NORMAL": {
      "!type": "number"
    },
    "SVG_FEBLEND_MODE_MULTIPLY": {
      "!type": "number"
    },
    "SVG_FEBLEND_MODE_SCREEN": {
      "!type": "number"
    },
    "SVG_FEBLEND_MODE_DARKEN": {
      "!type": "number"
    },
    "SVG_FEBLEND_MODE_LIGHTEN": {
      "!type": "number"
    },
    "SVG_FEBLEND_MODE_OVERLAY": {
      "!type": "number"
    },
    "SVG_FEBLEND_MODE_COLOR_DODGE": {
      "!type": "number"
    },
    "SVG_FEBLEND_MODE_COLOR_BURN": {
      "!type": "number"
    },
    "SVG_FEBLEND_MODE_HARD_LIGHT": {
      "!type": "number"
    },
    "SVG_FEBLEND_MODE_SOFT_LIGHT": {
      "!type": "number"
    },
    "SVG_FEBLEND_MODE_DIFFERENCE": {
      "!type": "number"
    },
    "SVG_FEBLEND_MODE_EXCLUSION": {
      "!type": "number"
    },
    "SVG_FEBLEND_MODE_HUE": {
      "!type": "number"
    },
    "SVG_FEBLEND_MODE_SATURATION": {
      "!type": "number"
    },
    "SVG_FEBLEND_MODE_COLOR": {
      "!type": "number"
    },
    "SVG_FEBLEND_MODE_LUMINOSITY": {
      "!type": "number"
    },
    "in1": {
      "!type": "SVGAnimatedString"
    },
    "in2": {
      "!type": "SVGAnimatedString"
    },
    "mode": {
      "!type": "SVGAnimatedEnumeration"
    },
    "x": {
      "!type": "SVGAnimatedLength"
    },
    "y": {
      "!type": "SVGAnimatedLength"
    },
    "width": {
      "!type": "SVGAnimatedLength"
    },
    "height": {
      "!type": "SVGAnimatedLength"
    },
    "result": {
      "!type": "SVGAnimatedString"
    }
  },
  "SVGFEColorMatrixElement": {
    "SVG_FECOLORMATRIX_TYPE_UNKNOWN": {
      "!type": "number"
    },
    "SVG_FECOLORMATRIX_TYPE_MATRIX": {
      "!type": "number"
    },
    "SVG_FECOLORMATRIX_TYPE_SATURATE": {
      "!type": "number"
    },
    "SVG_FECOLORMATRIX_TYPE_HUEROTATE": {
      "!type": "number"
    },
    "SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA": {
      "!type": "number"
    },
    "in1": {
      "!type": "SVGAnimatedString"
    },
    "type": {
      "!type": "SVGAnimatedEnumeration"
    },
    "values": {
      "!type": "SVGAnimatedNumberList"
    },
    "x": {
      "!type": "SVGAnimatedLength"
    },
    "y": {
      "!type": "SVGAnimatedLength"
    },
    "width": {
      "!type": "SVGAnimatedLength"
    },
    "height": {
      "!type": "SVGAnimatedLength"
    },
    "result": {
      "!type": "SVGAnimatedString"
    }
  },
  "SVGFEComponentTransferElement": {
    "in1": {
      "!type": "SVGAnimatedString"
    },
    "x": {
      "!type": "SVGAnimatedLength"
    },
    "y": {
      "!type": "SVGAnimatedLength"
    },
    "width": {
      "!type": "SVGAnimatedLength"
    },
    "height": {
      "!type": "SVGAnimatedLength"
    },
    "result": {
      "!type": "SVGAnimatedString"
    }
  },
  "SVGFECompositeElement": {
    "SVG_FECOMPOSITE_OPERATOR_UNKNOWN": {
      "!type": "number"
    },
    "SVG_FECOMPOSITE_OPERATOR_OVER": {
      "!type": "number"
    },
    "SVG_FECOMPOSITE_OPERATOR_IN": {
      "!type": "number"
    },
    "SVG_FECOMPOSITE_OPERATOR_OUT": {
      "!type": "number"
    },
    "SVG_FECOMPOSITE_OPERATOR_ATOP": {
      "!type": "number"
    },
    "SVG_FECOMPOSITE_OPERATOR_XOR": {
      "!type": "number"
    },
    "SVG_FECOMPOSITE_OPERATOR_ARITHMETIC": {
      "!type": "number"
    },
    "in1": {
      "!type": "SVGAnimatedString"
    },
    "in2": {
      "!type": "SVGAnimatedString"
    },
    "operator": {
      "!type": "SVGAnimatedEnumeration"
    },
    "k1": {
      "!type": "SVGAnimatedNumber"
    },
    "k2": {
      "!type": "SVGAnimatedNumber"
    },
    "k3": {
      "!type": "SVGAnimatedNumber"
    },
    "k4": {
      "!type": "SVGAnimatedNumber"
    },
    "x": {
      "!type": "SVGAnimatedLength"
    },
    "y": {
      "!type": "SVGAnimatedLength"
    },
    "width": {
      "!type": "SVGAnimatedLength"
    },
    "height": {
      "!type": "SVGAnimatedLength"
    },
    "result": {
      "!type": "SVGAnimatedString"
    }
  },
  "SVGFEConvolveMatrixElement": {
    "SVG_EDGEMODE_UNKNOWN": {
      "!type": "number"
    },
    "SVG_EDGEMODE_DUPLICATE": {
      "!type": "number"
    },
    "SVG_EDGEMODE_WRAP": {
      "!type": "number"
    },
    "SVG_EDGEMODE_NONE": {
      "!type": "number"
    },
    "in1": {
      "!type": "SVGAnimatedString"
    },
    "orderX": {
      "!type": "SVGAnimatedInteger"
    },
    "orderY": {
      "!type": "SVGAnimatedInteger"
    },
    "kernelMatrix": {
      "!type": "SVGAnimatedNumberList"
    },
    "divisor": {
      "!type": "SVGAnimatedNumber"
    },
    "bias": {
      "!type": "SVGAnimatedNumber"
    },
    "targetX": {
      "!type": "SVGAnimatedInteger"
    },
    "targetY": {
      "!type": "SVGAnimatedInteger"
    },
    "edgeMode": {
      "!type": "SVGAnimatedEnumeration"
    },
    "kernelUnitLengthX": {
      "!type": "SVGAnimatedNumber"
    },
    "kernelUnitLengthY": {
      "!type": "SVGAnimatedNumber"
    },
    "preserveAlpha": {
      "!type": "SVGAnimatedBoolean"
    },
    "x": {
      "!type": "SVGAnimatedLength"
    },
    "y": {
      "!type": "SVGAnimatedLength"
    },
    "width": {
      "!type": "SVGAnimatedLength"
    },
    "height": {
      "!type": "SVGAnimatedLength"
    },
    "result": {
      "!type": "SVGAnimatedString"
    }
  },
  "SVGFEDiffuseLightingElement": {
    "in1": {
      "!type": "SVGAnimatedString"
    },
    "surfaceScale": {
      "!type": "SVGAnimatedNumber"
    },
    "diffuseConstant": {
      "!type": "SVGAnimatedNumber"
    },
    "kernelUnitLengthX": {
      "!type": "SVGAnimatedNumber"
    },
    "kernelUnitLengthY": {
      "!type": "SVGAnimatedNumber"
    },
    "x": {
      "!type": "SVGAnimatedLength"
    },
    "y": {
      "!type": "SVGAnimatedLength"
    },
    "width": {
      "!type": "SVGAnimatedLength"
    },
    "height": {
      "!type": "SVGAnimatedLength"
    },
    "result": {
      "!type": "SVGAnimatedString"
    }
  },
  "SVGFEDisplacementMapElement": {
    "SVG_CHANNEL_UNKNOWN": {
      "!type": "number"
    },
    "SVG_CHANNEL_R": {
      "!type": "number"
    },
    "SVG_CHANNEL_G": {
      "!type": "number"
    },
    "SVG_CHANNEL_B": {
      "!type": "number"
    },
    "SVG_CHANNEL_A": {
      "!type": "number"
    },
    "in1": {
      "!type": "SVGAnimatedString"
    },
    "in2": {
      "!type": "SVGAnimatedString"
    },
    "scale": {
      "!type": "SVGAnimatedNumber"
    },
    "xChannelSelector": {
      "!type": "SVGAnimatedEnumeration"
    },
    "yChannelSelector": {
      "!type": "SVGAnimatedEnumeration"
    },
    "x": {
      "!type": "SVGAnimatedLength"
    },
    "y": {
      "!type": "SVGAnimatedLength"
    },
    "width": {
      "!type": "SVGAnimatedLength"
    },
    "height": {
      "!type": "SVGAnimatedLength"
    },
    "result": {
      "!type": "SVGAnimatedString"
    }
  },
  "SVGFEDistantLightElement": {
    "azimuth": {
      "!type": "SVGAnimatedNumber"
    },
    "elevation": {
      "!type": "SVGAnimatedNumber"
    }
  },
  "SVGFEDropShadowElement": {
    "in1": {
      "!type": "SVGAnimatedString"
    },
    "dx": {
      "!type": "SVGAnimatedNumber"
    },
    "dy": {
      "!type": "SVGAnimatedNumber"
    },
    "stdDeviationX": {
      "!type": "SVGAnimatedNumber"
    },
    "stdDeviationY": {
      "!type": "SVGAnimatedNumber"
    },
    "setStdDeviation": {
      "!type": "fn(stdDeviationX: number, stdDeviationY: number)"
    },
    "x": {
      "!type": "SVGAnimatedLength"
    },
    "y": {
      "!type": "SVGAnimatedLength"
    },
    "width": {
      "!type": "SVGAnimatedLength"
    },
    "height": {
      "!type": "SVGAnimatedLength"
    },
    "result": {
      "!type": "SVGAnimatedString"
    }
  },
  "SVGFEFloodElement": {
    "x": {
      "!type": "SVGAnimatedLength"
    },
    "y": {
      "!type": "SVGAnimatedLength"
    },
    "width": {
      "!type": "SVGAnimatedLength"
    },
    "height": {
      "!type": "SVGAnimatedLength"
    },
    "result": {
      "!type": "SVGAnimatedString"
    }
  },
  "SVGFEFuncAElement": {},
  "SVGFEFuncBElement": {},
  "SVGFEFuncGElement": {},
  "SVGFEFuncRElement": {},
  "SVGFEGaussianBlurElement": {
    "in1": {
      "!type": "SVGAnimatedString"
    },
    "stdDeviationX": {
      "!type": "SVGAnimatedNumber"
    },
    "stdDeviationY": {
      "!type": "SVGAnimatedNumber"
    },
    "setStdDeviation": {
      "!type": "fn(stdDeviationX: number, stdDeviationY: number)"
    },
    "x": {
      "!type": "SVGAnimatedLength"
    },
    "y": {
      "!type": "SVGAnimatedLength"
    },
    "width": {
      "!type": "SVGAnimatedLength"
    },
    "height": {
      "!type": "SVGAnimatedLength"
    },
    "result": {
      "!type": "SVGAnimatedString"
    }
  },
  "SVGFEImageElement": {
    "preserveAspectRatio": {
      "!type": "SVGAnimatedPreserveAspectRatio"
    },
    "x": {
      "!type": "SVGAnimatedLength"
    },
    "y": {
      "!type": "SVGAnimatedLength"
    },
    "width": {
      "!type": "SVGAnimatedLength"
    },
    "height": {
      "!type": "SVGAnimatedLength"
    },
    "result": {
      "!type": "SVGAnimatedString"
    },
    "href": {
      "!type": "SVGAnimatedString"
    }
  },
  "SVGFEMergeElement": {
    "x": {
      "!type": "SVGAnimatedLength"
    },
    "y": {
      "!type": "SVGAnimatedLength"
    },
    "width": {
      "!type": "SVGAnimatedLength"
    },
    "height": {
      "!type": "SVGAnimatedLength"
    },
    "result": {
      "!type": "SVGAnimatedString"
    }
  },
  "SVGFEMergeNodeElement": {
    "in1": {
      "!type": "SVGAnimatedString"
    }
  },
  "SVGFEMorphologyElement": {
    "SVG_MORPHOLOGY_OPERATOR_UNKNOWN": {
      "!type": "number"
    },
    "SVG_MORPHOLOGY_OPERATOR_ERODE": {
      "!type": "number"
    },
    "SVG_MORPHOLOGY_OPERATOR_DILATE": {
      "!type": "number"
    },
    "in1": {
      "!type": "SVGAnimatedString"
    },
    "operator": {
      "!type": "SVGAnimatedEnumeration"
    },
    "radiusX": {
      "!type": "SVGAnimatedNumber"
    },
    "radiusY": {
      "!type": "SVGAnimatedNumber"
    },
    "x": {
      "!type": "SVGAnimatedLength"
    },
    "y": {
      "!type": "SVGAnimatedLength"
    },
    "width": {
      "!type": "SVGAnimatedLength"
    },
    "height": {
      "!type": "SVGAnimatedLength"
    },
    "result": {
      "!type": "SVGAnimatedString"
    }
  },
  "SVGFEOffsetElement": {
    "in1": {
      "!type": "SVGAnimatedString"
    },
    "dx": {
      "!type": "SVGAnimatedNumber"
    },
    "dy": {
      "!type": "SVGAnimatedNumber"
    },
    "x": {
      "!type": "SVGAnimatedLength"
    },
    "y": {
      "!type": "SVGAnimatedLength"
    },
    "width": {
      "!type": "SVGAnimatedLength"
    },
    "height": {
      "!type": "SVGAnimatedLength"
    },
    "result": {
      "!type": "SVGAnimatedString"
    }
  },
  "SVGFEPointLightElement": {
    "x": {
      "!type": "SVGAnimatedNumber"
    },
    "y": {
      "!type": "SVGAnimatedNumber"
    },
    "z": {
      "!type": "SVGAnimatedNumber"
    }
  },
  "SVGFESpecularLightingElement": {
    "in1": {
      "!type": "SVGAnimatedString"
    },
    "surfaceScale": {
      "!type": "SVGAnimatedNumber"
    },
    "specularConstant": {
      "!type": "SVGAnimatedNumber"
    },
    "specularExponent": {
      "!type": "SVGAnimatedNumber"
    },
    "kernelUnitLengthX": {
      "!type": "SVGAnimatedNumber"
    },
    "kernelUnitLengthY": {
      "!type": "SVGAnimatedNumber"
    },
    "x": {
      "!type": "SVGAnimatedLength"
    },
    "y": {
      "!type": "SVGAnimatedLength"
    },
    "width": {
      "!type": "SVGAnimatedLength"
    },
    "height": {
      "!type": "SVGAnimatedLength"
    },
    "result": {
      "!type": "SVGAnimatedString"
    }
  },
  "SVGFESpotLightElement": {
    "x": {
      "!type": "SVGAnimatedNumber"
    },
    "y": {
      "!type": "SVGAnimatedNumber"
    },
    "z": {
      "!type": "SVGAnimatedNumber"
    },
    "pointsAtX": {
      "!type": "SVGAnimatedNumber"
    },
    "pointsAtY": {
      "!type": "SVGAnimatedNumber"
    },
    "pointsAtZ": {
      "!type": "SVGAnimatedNumber"
    },
    "specularExponent": {
      "!type": "SVGAnimatedNumber"
    },
    "limitingConeAngle": {
      "!type": "SVGAnimatedNumber"
    }
  },
  "SVGFETileElement": {
    "in1": {
      "!type": "SVGAnimatedString"
    },
    "x": {
      "!type": "SVGAnimatedLength"
    },
    "y": {
      "!type": "SVGAnimatedLength"
    },
    "width": {
      "!type": "SVGAnimatedLength"
    },
    "height": {
      "!type": "SVGAnimatedLength"
    },
    "result": {
      "!type": "SVGAnimatedString"
    }
  },
  "SVGFETurbulenceElement": {
    "SVG_TURBULENCE_TYPE_UNKNOWN": {
      "!type": "number"
    },
    "SVG_TURBULENCE_TYPE_FRACTALNOISE": {
      "!type": "number"
    },
    "SVG_TURBULENCE_TYPE_TURBULENCE": {
      "!type": "number"
    },
    "SVG_STITCHTYPE_UNKNOWN": {
      "!type": "number"
    },
    "SVG_STITCHTYPE_STITCH": {
      "!type": "number"
    },
    "SVG_STITCHTYPE_NOSTITCH": {
      "!type": "number"
    },
    "baseFrequencyX": {
      "!type": "SVGAnimatedNumber"
    },
    "baseFrequencyY": {
      "!type": "SVGAnimatedNumber"
    },
    "numOctaves": {
      "!type": "SVGAnimatedInteger"
    },
    "seed": {
      "!type": "SVGAnimatedNumber"
    },
    "stitchTiles": {
      "!type": "SVGAnimatedEnumeration"
    },
    "type": {
      "!type": "SVGAnimatedEnumeration"
    },
    "x": {
      "!type": "SVGAnimatedLength"
    },
    "y": {
      "!type": "SVGAnimatedLength"
    },
    "width": {
      "!type": "SVGAnimatedLength"
    },
    "height": {
      "!type": "SVGAnimatedLength"
    },
    "result": {
      "!type": "SVGAnimatedString"
    }
  },
  "SVGFilterElement": {
    "filterUnits": {
      "!type": "SVGAnimatedEnumeration"
    },
    "primitiveUnits": {
      "!type": "SVGAnimatedEnumeration"
    },
    "x": {
      "!type": "SVGAnimatedLength"
    },
    "y": {
      "!type": "SVGAnimatedLength"
    },
    "width": {
      "!type": "SVGAnimatedLength"
    },
    "height": {
      "!type": "SVGAnimatedLength"
    },
    "href": {
      "!type": "SVGAnimatedString"
    },
    "SVG_UNIT_TYPE_UNKNOWN": {
      "!type": "number"
    },
    "SVG_UNIT_TYPE_USERSPACEONUSE": {
      "!type": "number"
    },
    "SVG_UNIT_TYPE_OBJECTBOUNDINGBOX": {
      "!type": "number"
    }
  },
  "SVGForeignObjectElement": {
    "x": {
      "!type": "SVGAnimatedLength"
    },
    "y": {
      "!type": "SVGAnimatedLength"
    },
    "width": {
      "!type": "SVGAnimatedLength"
    },
    "height": {
      "!type": "SVGAnimatedLength"
    }
  },
  "SVGGElement": {},
  "SVGGradientElement": {
    "SVG_SPREADMETHOD_UNKNOWN": {
      "!type": "number"
    },
    "SVG_SPREADMETHOD_PAD": {
      "!type": "number"
    },
    "SVG_SPREADMETHOD_REFLECT": {
      "!type": "number"
    },
    "SVG_SPREADMETHOD_REPEAT": {
      "!type": "number"
    },
    "gradientUnits": {
      "!type": "SVGAnimatedEnumeration"
    },
    "gradientTransform": {
      "!type": "SVGAnimatedTransformList"
    },
    "spreadMethod": {
      "!type": "SVGAnimatedEnumeration"
    },
    "href": {
      "!type": "SVGAnimatedString"
    },
    "SVG_UNIT_TYPE_UNKNOWN": {
      "!type": "number"
    },
    "SVG_UNIT_TYPE_USERSPACEONUSE": {
      "!type": "number"
    },
    "SVG_UNIT_TYPE_OBJECTBOUNDINGBOX": {
      "!type": "number"
    }
  },
  "SVGGraphicsElement": {
    "transform": {
      "!type": "SVGAnimatedTransformList"
    },
    "nearestViewportElement": {
      "!type": "SVGElement"
    },
    "farthestViewportElement": {
      "!type": "SVGElement"
    },
    "getBBox": {
      "!type": "fn(aOptions?: SVGBoundingBoxOptions) -> SVGRect"
    },
    "getCTM": {
      "!type": "fn() -> SVGMatrix"
    },
    "getScreenCTM": {
      "!type": "fn() -> SVGMatrix"
    },
    "getTransformToElement": {
      "!type": "fn(element: SVGGraphicsElement) -> SVGMatrix"
    },
    "requiredFeatures": {
      "!type": "SVGStringList"
    },
    "requiredExtensions": {
      "!type": "SVGStringList"
    },
    "systemLanguage": {
      "!type": "SVGStringList"
    },
    "hasExtension": {
      "!type": "fn(extension: string) -> bool"
    }
  },
  "SVGIFrameElement": {
    "x": {
      "!type": "SVGAnimatedLength"
    },
    "y": {
      "!type": "SVGAnimatedLength"
    },
    "width": {
      "!type": "SVGAnimatedLength"
    },
    "height": {
      "!type": "SVGAnimatedLength"
    },
    "preserveAspectRatio": {
      "!type": "SVGAnimatedPreserveAspectRatio"
    },
    "name": {
      "!type": "string"
    },
    "src": {
      "!type": "string"
    },
    "srcdoc": {
      "!type": "string"
    },
    "sandbox": {
      "!type": "DOMSettableTokenList"
    },
    "contentDocument": {
      "!type": "Document"
    },
    "contentWindow": {
      "!type": "WindowProxy"
    }
  },
  "SVGImageElement": {
    "x": {
      "!type": "SVGAnimatedLength"
    },
    "y": {
      "!type": "SVGAnimatedLength"
    },
    "width": {
      "!type": "SVGAnimatedLength"
    },
    "height": {
      "!type": "SVGAnimatedLength"
    },
    "preserveAspectRatio": {
      "!type": "SVGAnimatedPreserveAspectRatio"
    },
    "href": {
      "!type": "SVGAnimatedString"
    }
  },
  "SVGLength": {
    "SVG_LENGTHTYPE_UNKNOWN": {
      "!type": "number"
    },
    "SVG_LENGTHTYPE_NUMBER": {
      "!type": "number"
    },
    "SVG_LENGTHTYPE_PERCENTAGE": {
      "!type": "number"
    },
    "SVG_LENGTHTYPE_EMS": {
      "!type": "number"
    },
    "SVG_LENGTHTYPE_EXS": {
      "!type": "number"
    },
    "SVG_LENGTHTYPE_PX": {
      "!type": "number"
    },
    "SVG_LENGTHTYPE_CM": {
      "!type": "number"
    },
    "SVG_LENGTHTYPE_MM": {
      "!type": "number"
    },
    "SVG_LENGTHTYPE_IN": {
      "!type": "number"
    },
    "SVG_LENGTHTYPE_PT": {
      "!type": "number"
    },
    "SVG_LENGTHTYPE_PC": {
      "!type": "number"
    },
    "unitType": {
      "!type": "number"
    },
    "value": {
      "!type": "number"
    },
    "valueInSpecifiedUnits": {
      "!type": "number"
    },
    "valueAsString": {
      "!type": "string"
    },
    "newValueSpecifiedUnits": {
      "!type": "fn(unitType: number, valueInSpecifiedUnits: number)"
    },
    "convertToSpecifiedUnits": {
      "!type": "fn(unitType: number)"
    }
  },
  "SVGLengthList": {
    "numberOfItems": {
      "!type": "number"
    },
    "clear": {
      "!type": "fn()"
    },
    "initialize": {
      "!type": "fn(newItem: SVGLength) -> SVGLength"
    },
    "getItem": {
      "!type": "fn(index: number) -> SVGLength"
    },
    "insertItemBefore": {
      "!type": "fn(newItem: SVGLength, index: number) -> SVGLength"
    },
    "replaceItem": {
      "!type": "fn(newItem: SVGLength, index: number) -> SVGLength"
    },
    "removeItem": {
      "!type": "fn(index: number) -> SVGLength"
    },
    "appendItem": {
      "!type": "fn(newItem: SVGLength) -> SVGLength"
    },
    "length": {
      "!type": "number"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "SVGLineElement": {
    "x1": {
      "!type": "SVGAnimatedLength"
    },
    "y1": {
      "!type": "SVGAnimatedLength"
    },
    "x2": {
      "!type": "SVGAnimatedLength"
    },
    "y2": {
      "!type": "SVGAnimatedLength"
    }
  },
  "SVGLinearGradientElement": {
    "x1": {
      "!type": "SVGAnimatedLength"
    },
    "y1": {
      "!type": "SVGAnimatedLength"
    },
    "x2": {
      "!type": "SVGAnimatedLength"
    },
    "y2": {
      "!type": "SVGAnimatedLength"
    }
  },
  "SVGMPathElement": {
    "href": {
      "!type": "SVGAnimatedString"
    }
  },
  "SVGMarkerElement": {
    "SVG_MARKERUNITS_UNKNOWN": {
      "!type": "number"
    },
    "SVG_MARKERUNITS_USERSPACEONUSE": {
      "!type": "number"
    },
    "SVG_MARKERUNITS_STROKEWIDTH": {
      "!type": "number"
    },
    "SVG_MARKER_ORIENT_UNKNOWN": {
      "!type": "number"
    },
    "SVG_MARKER_ORIENT_AUTO": {
      "!type": "number"
    },
    "SVG_MARKER_ORIENT_ANGLE": {
      "!type": "number"
    },
    "refX": {
      "!type": "SVGAnimatedLength"
    },
    "refY": {
      "!type": "SVGAnimatedLength"
    },
    "markerUnits": {
      "!type": "SVGAnimatedEnumeration"
    },
    "markerWidth": {
      "!type": "SVGAnimatedLength"
    },
    "markerHeight": {
      "!type": "SVGAnimatedLength"
    },
    "orientType": {
      "!type": "SVGAnimatedEnumeration"
    },
    "orientAngle": {
      "!type": "SVGAnimatedAngle"
    },
    "setOrientToAuto": {
      "!type": "fn()"
    },
    "setOrientToAngle": {
      "!type": "fn(angle: SVGAngle)"
    },
    "viewBox": {
      "!type": "SVGAnimatedRect"
    },
    "preserveAspectRatio": {
      "!type": "SVGAnimatedPreserveAspectRatio"
    }
  },
  "SVGMaskElement": {
    "SVG_MASKTYPE_LUMINANCE": {
      "!type": "number"
    },
    "SVG_MASKTYPE_ALPHA": {
      "!type": "number"
    },
    "maskUnits": {
      "!type": "SVGAnimatedEnumeration"
    },
    "maskContentUnits": {
      "!type": "SVGAnimatedEnumeration"
    },
    "x": {
      "!type": "SVGAnimatedLength"
    },
    "y": {
      "!type": "SVGAnimatedLength"
    },
    "width": {
      "!type": "SVGAnimatedLength"
    },
    "height": {
      "!type": "SVGAnimatedLength"
    },
    "SVG_UNIT_TYPE_UNKNOWN": {
      "!type": "number"
    },
    "SVG_UNIT_TYPE_USERSPACEONUSE": {
      "!type": "number"
    },
    "SVG_UNIT_TYPE_OBJECTBOUNDINGBOX": {
      "!type": "number"
    }
  },
  "SVGMatrix": {
    "a": {
      "!type": "number"
    },
    "b": {
      "!type": "number"
    },
    "c": {
      "!type": "number"
    },
    "d": {
      "!type": "number"
    },
    "e": {
      "!type": "number"
    },
    "f": {
      "!type": "number"
    },
    "multiply": {
      "!type": "fn(secondMatrix: SVGMatrix) -> SVGMatrix"
    },
    "inverse": {
      "!type": "fn() -> SVGMatrix"
    },
    "translate": {
      "!type": "fn(x: number, y: number) -> SVGMatrix"
    },
    "scale": {
      "!type": "fn(scaleFactor: number) -> SVGMatrix"
    },
    "scaleNonUniform": {
      "!type": "fn(scaleFactorX: number, scaleFactorY: number) -> SVGMatrix"
    },
    "rotate": {
      "!type": "fn(angle: number) -> SVGMatrix"
    },
    "rotateFromVector": {
      "!type": "fn(x: number, y: number) -> SVGMatrix"
    },
    "flipX": {
      "!type": "fn() -> SVGMatrix"
    },
    "flipY": {
      "!type": "fn() -> SVGMatrix"
    },
    "skewX": {
      "!type": "fn(angle: number) -> SVGMatrix"
    },
    "skewY": {
      "!type": "fn(angle: number) -> SVGMatrix"
    }
  },
  "SVGMetadataElement": {},
  "SVGNumber": {
    "!type": "fn(value: number)",
    "prototype": {
      "value": {
        "!type": "number"
      }
    }
  },
  "SVGNumberList": {
    "numberOfItems": {
      "!type": "number"
    },
    "clear": {
      "!type": "fn()"
    },
    "initialize": {
      "!type": "fn(newItem: SVGNumber) -> SVGNumber"
    },
    "getItem": {
      "!type": "fn(index: number) -> SVGNumber"
    },
    "insertItemBefore": {
      "!type": "fn(newItem: SVGNumber, index: number) -> SVGNumber"
    },
    "replaceItem": {
      "!type": "fn(newItem: SVGNumber, index: number) -> SVGNumber"
    },
    "removeItem": {
      "!type": "fn(index: number) -> SVGNumber"
    },
    "appendItem": {
      "!type": "fn(newItem: SVGNumber) -> SVGNumber"
    },
    "length": {
      "!type": "number"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "SVGPathElement": {
    "pathLength": {
      "!type": "SVGAnimatedNumber"
    },
    "getTotalLength": {
      "!type": "fn() -> number"
    },
    "getPointAtLength": {
      "!type": "fn(distance: number) -> SVGPoint"
    },
    "getPathSegAtLength": {
      "!type": "fn(distance: number) -> number"
    },
    "createSVGPathSegClosePath": {
      "!type": "fn() -> SVGPathSegClosePath"
    },
    "createSVGPathSegMovetoAbs": {
      "!type": "fn(x: number, y: number) -> SVGPathSegMovetoAbs"
    },
    "createSVGPathSegMovetoRel": {
      "!type": "fn(x: number, y: number) -> SVGPathSegMovetoRel"
    },
    "createSVGPathSegLinetoAbs": {
      "!type": "fn(x: number, y: number) -> SVGPathSegLinetoAbs"
    },
    "createSVGPathSegLinetoRel": {
      "!type": "fn(x: number, y: number) -> SVGPathSegLinetoRel"
    },
    "createSVGPathSegCurvetoCubicAbs": {
      "!type": "fn(x: number, y: number, x1: number, y1: number, x2: number, y2: number) -> SVGPathSegCurvetoCubicAbs"
    },
    "createSVGPathSegCurvetoCubicRel": {
      "!type": "fn(x: number, y: number, x1: number, y1: number, x2: number, y2: number) -> SVGPathSegCurvetoCubicRel"
    },
    "createSVGPathSegCurvetoQuadraticAbs": {
      "!type": "fn(x: number, y: number, x1: number, y1: number) -> SVGPathSegCurvetoQuadraticAbs"
    },
    "createSVGPathSegCurvetoQuadraticRel": {
      "!type": "fn(x: number, y: number, x1: number, y1: number) -> SVGPathSegCurvetoQuadraticRel"
    },
    "createSVGPathSegArcAbs": {
      "!type": "fn(x: number, y: number, r1: number, r2: number, angle: number, largeArcFlag: bool, sweepFlag: bool) -> SVGPathSegArcAbs"
    },
    "createSVGPathSegArcRel": {
      "!type": "fn(x: number, y: number, r1: number, r2: number, angle: number, largeArcFlag: bool, sweepFlag: bool) -> SVGPathSegArcRel"
    },
    "createSVGPathSegLinetoHorizontalAbs": {
      "!type": "fn(x: number) -> SVGPathSegLinetoHorizontalAbs"
    },
    "createSVGPathSegLinetoHorizontalRel": {
      "!type": "fn(x: number) -> SVGPathSegLinetoHorizontalRel"
    },
    "createSVGPathSegLinetoVerticalAbs": {
      "!type": "fn(y: number) -> SVGPathSegLinetoVerticalAbs"
    },
    "createSVGPathSegLinetoVerticalRel": {
      "!type": "fn(y: number) -> SVGPathSegLinetoVerticalRel"
    },
    "createSVGPathSegCurvetoCubicSmoothAbs": {
      "!type": "fn(x: number, y: number, x2: number, y2: number) -> SVGPathSegCurvetoCubicSmoothAbs"
    },
    "createSVGPathSegCurvetoCubicSmoothRel": {
      "!type": "fn(x: number, y: number, x2: number, y2: number) -> SVGPathSegCurvetoCubicSmoothRel"
    },
    "createSVGPathSegCurvetoQuadraticSmoothAbs": {
      "!type": "fn(x: number, y: number) -> SVGPathSegCurvetoQuadraticSmoothAbs"
    },
    "createSVGPathSegCurvetoQuadraticSmoothRel": {
      "!type": "fn(x: number, y: number) -> SVGPathSegCurvetoQuadraticSmoothRel"
    },
    "pathSegList": {
      "!type": "SVGPathSegList"
    },
    "animatedPathSegList": {
      "!type": "SVGPathSegList"
    }
  },
  "SVGPathSeg": {
    "PATHSEG_UNKNOWN": {
      "!type": "number"
    },
    "PATHSEG_CLOSEPATH": {
      "!type": "number"
    },
    "PATHSEG_MOVETO_ABS": {
      "!type": "number"
    },
    "PATHSEG_MOVETO_REL": {
      "!type": "number"
    },
    "PATHSEG_LINETO_ABS": {
      "!type": "number"
    },
    "PATHSEG_LINETO_REL": {
      "!type": "number"
    },
    "PATHSEG_CURVETO_CUBIC_ABS": {
      "!type": "number"
    },
    "PATHSEG_CURVETO_CUBIC_REL": {
      "!type": "number"
    },
    "PATHSEG_CURVETO_QUADRATIC_ABS": {
      "!type": "number"
    },
    "PATHSEG_CURVETO_QUADRATIC_REL": {
      "!type": "number"
    },
    "PATHSEG_ARC_ABS": {
      "!type": "number"
    },
    "PATHSEG_ARC_REL": {
      "!type": "number"
    },
    "PATHSEG_LINETO_HORIZONTAL_ABS": {
      "!type": "number"
    },
    "PATHSEG_LINETO_HORIZONTAL_REL": {
      "!type": "number"
    },
    "PATHSEG_LINETO_VERTICAL_ABS": {
      "!type": "number"
    },
    "PATHSEG_LINETO_VERTICAL_REL": {
      "!type": "number"
    },
    "PATHSEG_CURVETO_CUBIC_SMOOTH_ABS": {
      "!type": "number"
    },
    "PATHSEG_CURVETO_CUBIC_SMOOTH_REL": {
      "!type": "number"
    },
    "PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS": {
      "!type": "number"
    },
    "PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL": {
      "!type": "number"
    },
    "pathSegType": {
      "!type": "number"
    },
    "pathSegTypeAsLetter": {
      "!type": "string"
    }
  },
  "SVGPathSegClosePath": {},
  "SVGPathSegMovetoAbs": {
    "x": {
      "!type": "number"
    },
    "y": {
      "!type": "number"
    }
  },
  "SVGPathSegMovetoRel": {
    "x": {
      "!type": "number"
    },
    "y": {
      "!type": "number"
    }
  },
  "SVGPathSegLinetoAbs": {
    "x": {
      "!type": "number"
    },
    "y": {
      "!type": "number"
    }
  },
  "SVGPathSegLinetoRel": {
    "x": {
      "!type": "number"
    },
    "y": {
      "!type": "number"
    }
  },
  "SVGPathSegCurvetoCubicAbs": {
    "x": {
      "!type": "number"
    },
    "y": {
      "!type": "number"
    },
    "x1": {
      "!type": "number"
    },
    "y1": {
      "!type": "number"
    },
    "x2": {
      "!type": "number"
    },
    "y2": {
      "!type": "number"
    }
  },
  "SVGPathSegCurvetoCubicRel": {
    "x": {
      "!type": "number"
    },
    "y": {
      "!type": "number"
    },
    "x1": {
      "!type": "number"
    },
    "y1": {
      "!type": "number"
    },
    "x2": {
      "!type": "number"
    },
    "y2": {
      "!type": "number"
    }
  },
  "SVGPathSegCurvetoQuadraticAbs": {
    "x": {
      "!type": "number"
    },
    "y": {
      "!type": "number"
    },
    "x1": {
      "!type": "number"
    },
    "y1": {
      "!type": "number"
    }
  },
  "SVGPathSegCurvetoQuadraticRel": {
    "x": {
      "!type": "number"
    },
    "y": {
      "!type": "number"
    },
    "x1": {
      "!type": "number"
    },
    "y1": {
      "!type": "number"
    }
  },
  "SVGPathSegArcAbs": {
    "x": {
      "!type": "number"
    },
    "y": {
      "!type": "number"
    },
    "r1": {
      "!type": "number"
    },
    "r2": {
      "!type": "number"
    },
    "angle": {
      "!type": "number"
    },
    "largeArcFlag": {
      "!type": "bool"
    },
    "sweepFlag": {
      "!type": "bool"
    }
  },
  "SVGPathSegArcRel": {
    "x": {
      "!type": "number"
    },
    "y": {
      "!type": "number"
    },
    "r1": {
      "!type": "number"
    },
    "r2": {
      "!type": "number"
    },
    "angle": {
      "!type": "number"
    },
    "largeArcFlag": {
      "!type": "bool"
    },
    "sweepFlag": {
      "!type": "bool"
    }
  },
  "SVGPathSegLinetoHorizontalAbs": {
    "x": {
      "!type": "number"
    }
  },
  "SVGPathSegLinetoHorizontalRel": {
    "x": {
      "!type": "number"
    }
  },
  "SVGPathSegLinetoVerticalAbs": {
    "y": {
      "!type": "number"
    }
  },
  "SVGPathSegLinetoVerticalRel": {
    "y": {
      "!type": "number"
    }
  },
  "SVGPathSegCurvetoCubicSmoothAbs": {
    "x": {
      "!type": "number"
    },
    "y": {
      "!type": "number"
    },
    "x2": {
      "!type": "number"
    },
    "y2": {
      "!type": "number"
    }
  },
  "SVGPathSegCurvetoCubicSmoothRel": {
    "x": {
      "!type": "number"
    },
    "y": {
      "!type": "number"
    },
    "x2": {
      "!type": "number"
    },
    "y2": {
      "!type": "number"
    }
  },
  "SVGPathSegCurvetoQuadraticSmoothAbs": {
    "x": {
      "!type": "number"
    },
    "y": {
      "!type": "number"
    }
  },
  "SVGPathSegCurvetoQuadraticSmoothRel": {
    "x": {
      "!type": "number"
    },
    "y": {
      "!type": "number"
    }
  },
  "SVGPathSegList": {
    "numberOfItems": {
      "!type": "number"
    },
    "clear": {
      "!type": "fn()"
    },
    "initialize": {
      "!type": "fn(newItem: SVGPathSeg) -> SVGPathSeg"
    },
    "getItem": {
      "!type": "fn(index: number) -> SVGPathSeg"
    },
    "insertItemBefore": {
      "!type": "fn(newItem: SVGPathSeg, index: number) -> SVGPathSeg"
    },
    "replaceItem": {
      "!type": "fn(newItem: SVGPathSeg, index: number) -> SVGPathSeg"
    },
    "removeItem": {
      "!type": "fn(index: number) -> SVGPathSeg"
    },
    "appendItem": {
      "!type": "fn(newItem: SVGPathSeg) -> SVGPathSeg"
    },
    "length": {
      "!type": "number"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "SVGPatternElement": {
    "patternUnits": {
      "!type": "SVGAnimatedEnumeration"
    },
    "patternContentUnits": {
      "!type": "SVGAnimatedEnumeration"
    },
    "patternTransform": {
      "!type": "SVGAnimatedTransformList"
    },
    "x": {
      "!type": "SVGAnimatedLength"
    },
    "y": {
      "!type": "SVGAnimatedLength"
    },
    "width": {
      "!type": "SVGAnimatedLength"
    },
    "height": {
      "!type": "SVGAnimatedLength"
    },
    "viewBox": {
      "!type": "SVGAnimatedRect"
    },
    "preserveAspectRatio": {
      "!type": "SVGAnimatedPreserveAspectRatio"
    },
    "href": {
      "!type": "SVGAnimatedString"
    },
    "SVG_UNIT_TYPE_UNKNOWN": {
      "!type": "number"
    },
    "SVG_UNIT_TYPE_USERSPACEONUSE": {
      "!type": "number"
    },
    "SVG_UNIT_TYPE_OBJECTBOUNDINGBOX": {
      "!type": "number"
    }
  },
  "SVGPoint": {
    "x": {
      "!type": "number"
    },
    "y": {
      "!type": "number"
    },
    "matrixTransform": {
      "!type": "fn(matrix: SVGMatrix) -> SVGPoint"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "SVGPointList": {
    "numberOfItems": {
      "!type": "number"
    },
    "clear": {
      "!type": "fn()"
    },
    "initialize": {
      "!type": "fn(newItem: SVGPoint) -> SVGPoint"
    },
    "getItem": {
      "!type": "fn(index: number) -> SVGPoint"
    },
    "insertItemBefore": {
      "!type": "fn(newItem: SVGPoint, index: number) -> SVGPoint"
    },
    "replaceItem": {
      "!type": "fn(newItem: SVGPoint, index: number) -> SVGPoint"
    },
    "removeItem": {
      "!type": "fn(index: number) -> SVGPoint"
    },
    "appendItem": {
      "!type": "fn(newItem: SVGPoint) -> SVGPoint"
    },
    "length": {
      "!type": "number"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "SVGPolygonElement": {
    "points": {
      "!type": "SVGPointList"
    },
    "animatedPoints": {
      "!type": "SVGPointList"
    }
  },
  "SVGPolylineElement": {
    "points": {
      "!type": "SVGPointList"
    },
    "animatedPoints": {
      "!type": "SVGPointList"
    }
  },
  "SVGPreserveAspectRatio": {
    "SVG_PRESERVEASPECTRATIO_UNKNOWN": {
      "!type": "number"
    },
    "SVG_PRESERVEASPECTRATIO_NONE": {
      "!type": "number"
    },
    "SVG_PRESERVEASPECTRATIO_XMINYMIN": {
      "!type": "number"
    },
    "SVG_PRESERVEASPECTRATIO_XMIDYMIN": {
      "!type": "number"
    },
    "SVG_PRESERVEASPECTRATIO_XMAXYMIN": {
      "!type": "number"
    },
    "SVG_PRESERVEASPECTRATIO_XMINYMID": {
      "!type": "number"
    },
    "SVG_PRESERVEASPECTRATIO_XMIDYMID": {
      "!type": "number"
    },
    "SVG_PRESERVEASPECTRATIO_XMAXYMID": {
      "!type": "number"
    },
    "SVG_PRESERVEASPECTRATIO_XMINYMAX": {
      "!type": "number"
    },
    "SVG_PRESERVEASPECTRATIO_XMIDYMAX": {
      "!type": "number"
    },
    "SVG_PRESERVEASPECTRATIO_XMAXYMAX": {
      "!type": "number"
    },
    "SVG_MEETORSLICE_UNKNOWN": {
      "!type": "number"
    },
    "SVG_MEETORSLICE_MEET": {
      "!type": "number"
    },
    "SVG_MEETORSLICE_SLICE": {
      "!type": "number"
    },
    "align": {
      "!type": "number"
    },
    "meetOrSlice": {
      "!type": "number"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "SVGRadialGradientElement": {
    "cx": {
      "!type": "SVGAnimatedLength"
    },
    "cy": {
      "!type": "SVGAnimatedLength"
    },
    "r": {
      "!type": "SVGAnimatedLength"
    },
    "fx": {
      "!type": "SVGAnimatedLength"
    },
    "fy": {
      "!type": "SVGAnimatedLength"
    }
  },
  "SVGRect": {
    "x": {
      "!type": "number"
    },
    "y": {
      "!type": "number"
    },
    "width": {
      "!type": "number"
    },
    "height": {
      "!type": "number"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "SVGRectElement": {
    "x": {
      "!type": "SVGAnimatedLength"
    },
    "y": {
      "!type": "SVGAnimatedLength"
    },
    "width": {
      "!type": "SVGAnimatedLength"
    },
    "height": {
      "!type": "SVGAnimatedLength"
    },
    "rx": {
      "!type": "SVGAnimatedLength"
    },
    "ry": {
      "!type": "SVGAnimatedLength"
    }
  },
  "SVGViewSpec": {},
  "SVGSVGElement": {
    "x": {
      "!type": "SVGAnimatedLength"
    },
    "y": {
      "!type": "SVGAnimatedLength"
    },
    "width": {
      "!type": "SVGAnimatedLength"
    },
    "height": {
      "!type": "SVGAnimatedLength"
    },
    "pixelUnitToMillimeterX": {
      "!type": "number"
    },
    "pixelUnitToMillimeterY": {
      "!type": "number"
    },
    "screenPixelToMillimeterX": {
      "!type": "number"
    },
    "screenPixelToMillimeterY": {
      "!type": "number"
    },
    "useCurrentView": {
      "!type": "bool"
    },
    "currentScale": {
      "!type": "number"
    },
    "currentTranslate": {
      "!type": "SVGPoint"
    },
    "suspendRedraw": {
      "!type": "fn(maxWaitMilliseconds: number) -> number"
    },
    "unsuspendRedraw": {
      "!type": "fn(suspendHandleID: number)"
    },
    "unsuspendRedrawAll": {
      "!type": "fn()"
    },
    "forceRedraw": {
      "!type": "fn()"
    },
    "pauseAnimations": {
      "!type": "fn()"
    },
    "unpauseAnimations": {
      "!type": "fn()"
    },
    "animationsPaused": {
      "!type": "fn() -> bool"
    },
    "getCurrentTime": {
      "!type": "fn() -> number"
    },
    "setCurrentTime": {
      "!type": "fn(seconds: number)"
    },
    "deselectAll": {
      "!type": "fn()"
    },
    "createSVGNumber": {
      "!type": "fn() -> SVGNumber"
    },
    "createSVGLength": {
      "!type": "fn() -> SVGLength"
    },
    "createSVGAngle": {
      "!type": "fn() -> SVGAngle"
    },
    "createSVGPoint": {
      "!type": "fn() -> SVGPoint"
    },
    "createSVGMatrix": {
      "!type": "fn() -> SVGMatrix"
    },
    "createSVGRect": {
      "!type": "fn() -> SVGRect"
    },
    "createSVGTransform": {
      "!type": "fn() -> SVGTransform"
    },
    "createSVGTransformFromMatrix": {
      "!type": "fn(matrix: SVGMatrix) -> SVGTransform"
    },
    "getElementById": {
      "!type": "fn(elementId: string) -> Element"
    },
    "viewBox": {
      "!type": "SVGAnimatedRect"
    },
    "preserveAspectRatio": {
      "!type": "SVGAnimatedPreserveAspectRatio"
    },
    "SVG_ZOOMANDPAN_UNKNOWN": {
      "!type": "number"
    },
    "SVG_ZOOMANDPAN_DISABLE": {
      "!type": "number"
    },
    "SVG_ZOOMANDPAN_MAGNIFY": {
      "!type": "number"
    },
    "zoomAndPan": {
      "!type": "number"
    }
  },
  "SVGScriptElement": {
    "type": {
      "!type": "string"
    },
    "crossOrigin": {
      "!type": "string"
    },
    "href": {
      "!type": "SVGAnimatedString"
    }
  },
  "SVGSetElement": {},
  "SVGStopElement": {
    "offset": {
      "!type": "SVGAnimatedNumber"
    }
  },
  "SVGStringList": {
    "length": {
      "!type": "number"
    },
    "numberOfItems": {
      "!type": "number"
    },
    "clear": {
      "!type": "fn()"
    },
    "initialize": {
      "!type": "fn(newItem: string) -> string"
    },
    "getItem": {
      "!type": "fn(index: number) -> string"
    },
    "insertItemBefore": {
      "!type": "fn(newItem: string, index: number) -> string"
    },
    "replaceItem": {
      "!type": "fn(newItem: string, index: number) -> string"
    },
    "removeItem": {
      "!type": "fn(index: number) -> string"
    },
    "appendItem": {
      "!type": "fn(newItem: string) -> string"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "SVGStyleElement": {
    "xmlspace": {
      "!type": "string"
    },
    "type": {
      "!type": "string"
    },
    "media": {
      "!type": "string"
    },
    "title": {
      "!type": "string"
    },
    "scoped": {
      "!type": "bool"
    }
  },
  "SVGSwitchElement": {},
  "SVGSymbolElement": {
    "viewBox": {
      "!type": "SVGAnimatedRect"
    },
    "preserveAspectRatio": {
      "!type": "SVGAnimatedPreserveAspectRatio"
    },
    "requiredFeatures": {
      "!type": "SVGStringList"
    },
    "requiredExtensions": {
      "!type": "SVGStringList"
    },
    "systemLanguage": {
      "!type": "SVGStringList"
    },
    "hasExtension": {
      "!type": "fn(extension: string) -> bool"
    }
  },
  "SVGTSpanElement": {},
  "SVGTextContentElement": {
    "LENGTHADJUST_UNKNOWN": {
      "!type": "number"
    },
    "LENGTHADJUST_SPACING": {
      "!type": "number"
    },
    "LENGTHADJUST_SPACINGANDGLYPHS": {
      "!type": "number"
    },
    "textLength": {
      "!type": "SVGAnimatedLength"
    },
    "lengthAdjust": {
      "!type": "SVGAnimatedEnumeration"
    },
    "getNumberOfChars": {
      "!type": "fn() -> number"
    },
    "getComputedTextLength": {
      "!type": "fn() -> number"
    },
    "getSubStringLength": {
      "!type": "fn(charnum: number, nchars: number) -> number"
    },
    "getStartPositionOfChar": {
      "!type": "fn(charnum: number) -> SVGPoint"
    },
    "getEndPositionOfChar": {
      "!type": "fn(charnum: number) -> SVGPoint"
    },
    "getExtentOfChar": {
      "!type": "fn(charnum: number) -> SVGRect"
    },
    "getRotationOfChar": {
      "!type": "fn(charnum: number) -> number"
    },
    "getCharNumAtPosition": {
      "!type": "fn(point: SVGPoint) -> number"
    },
    "selectSubString": {
      "!type": "fn(charnum: number, nchars: number)"
    }
  },
  "SVGTextElement": {},
  "SVGTextPathElement": {
    "TEXTPATH_METHODTYPE_UNKNOWN": {
      "!type": "number"
    },
    "TEXTPATH_METHODTYPE_ALIGN": {
      "!type": "number"
    },
    "TEXTPATH_METHODTYPE_STRETCH": {
      "!type": "number"
    },
    "TEXTPATH_SPACINGTYPE_UNKNOWN": {
      "!type": "number"
    },
    "TEXTPATH_SPACINGTYPE_AUTO": {
      "!type": "number"
    },
    "TEXTPATH_SPACINGTYPE_EXACT": {
      "!type": "number"
    },
    "startOffset": {
      "!type": "SVGAnimatedLength"
    },
    "method": {
      "!type": "SVGAnimatedEnumeration"
    },
    "spacing": {
      "!type": "SVGAnimatedEnumeration"
    },
    "href": {
      "!type": "SVGAnimatedString"
    }
  },
  "SVGTextPositioningElement": {
    "x": {
      "!type": "SVGAnimatedLengthList"
    },
    "y": {
      "!type": "SVGAnimatedLengthList"
    },
    "dx": {
      "!type": "SVGAnimatedLengthList"
    },
    "dy": {
      "!type": "SVGAnimatedLengthList"
    },
    "rotate": {
      "!type": "SVGAnimatedNumberList"
    }
  },
  "SVGTitleElement": {},
  "SVGTransform": {
    "SVG_TRANSFORM_UNKNOWN": {
      "!type": "number"
    },
    "SVG_TRANSFORM_MATRIX": {
      "!type": "number"
    },
    "SVG_TRANSFORM_TRANSLATE": {
      "!type": "number"
    },
    "SVG_TRANSFORM_SCALE": {
      "!type": "number"
    },
    "SVG_TRANSFORM_ROTATE": {
      "!type": "number"
    },
    "SVG_TRANSFORM_SKEWX": {
      "!type": "number"
    },
    "SVG_TRANSFORM_SKEWY": {
      "!type": "number"
    },
    "type": {
      "!type": "number"
    },
    "matrix": {
      "!type": "SVGMatrix"
    },
    "angle": {
      "!type": "number"
    },
    "setMatrix": {
      "!type": "fn(matrix: SVGMatrix)"
    },
    "setTranslate": {
      "!type": "fn(tx: number, ty: number)"
    },
    "setScale": {
      "!type": "fn(sx: number, sy: number)"
    },
    "setRotate": {
      "!type": "fn(angle: number, cx: number, cy: number)"
    },
    "setSkewX": {
      "!type": "fn(angle: number)"
    },
    "setSkewY": {
      "!type": "fn(angle: number)"
    }
  },
  "SVGTransformList": {
    "numberOfItems": {
      "!type": "number"
    },
    "clear": {
      "!type": "fn()"
    },
    "initialize": {
      "!type": "fn(newItem: SVGTransform) -> SVGTransform"
    },
    "getItem": {
      "!type": "fn(index: number) -> SVGTransform"
    },
    "insertItemBefore": {
      "!type": "fn(newItem: SVGTransform, index: number) -> SVGTransform"
    },
    "replaceItem": {
      "!type": "fn(newItem: SVGTransform, index: number) -> SVGTransform"
    },
    "removeItem": {
      "!type": "fn(index: number) -> SVGTransform"
    },
    "appendItem": {
      "!type": "fn(newItem: SVGTransform) -> SVGTransform"
    },
    "createSVGTransformFromMatrix": {
      "!type": "fn(matrix: SVGMatrix) -> SVGTransform"
    },
    "consolidate": {
      "!type": "fn() -> SVGTransform"
    },
    "length": {
      "!type": "number"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "SVGUnitTypes": {
    "SVG_UNIT_TYPE_UNKNOWN": {
      "!type": "number"
    },
    "SVG_UNIT_TYPE_USERSPACEONUSE": {
      "!type": "number"
    },
    "SVG_UNIT_TYPE_OBJECTBOUNDINGBOX": {
      "!type": "number"
    }
  },
  "SVGUseElement": {
    "x": {
      "!type": "SVGAnimatedLength"
    },
    "y": {
      "!type": "SVGAnimatedLength"
    },
    "width": {
      "!type": "SVGAnimatedLength"
    },
    "height": {
      "!type": "SVGAnimatedLength"
    },
    "href": {
      "!type": "SVGAnimatedString"
    }
  },
  "SVGViewElement": {
    "viewTarget": {
      "!type": "SVGStringList"
    },
    "viewBox": {
      "!type": "SVGAnimatedRect"
    },
    "preserveAspectRatio": {
      "!type": "SVGAnimatedPreserveAspectRatio"
    },
    "SVG_ZOOMANDPAN_UNKNOWN": {
      "!type": "number"
    },
    "SVG_ZOOMANDPAN_DISABLE": {
      "!type": "number"
    },
    "SVG_ZOOMANDPAN_MAGNIFY": {
      "!type": "number"
    },
    "zoomAndPan": {
      "!type": "number"
    }
  },
  "SVGZoomAndPan": {
    "SVG_ZOOMANDPAN_UNKNOWN": {
      "!type": "number"
    },
    "SVG_ZOOMANDPAN_DISABLE": {
      "!type": "number"
    },
    "SVG_ZOOMANDPAN_MAGNIFY": {
      "!type": "number"
    },
    "zoomAndPan": {
      "!type": "number"
    }
  },
  "SVGZoomEvent": {
    "previousScale": {
      "!type": "number"
    },
    "previousTranslate": {
      "!type": "SVGPoint"
    },
    "newScale": {
      "!type": "number"
    },
    "newTranslate": {
      "!type": "SVGPoint"
    }
  },
  "Screen": {
    "availWidth": {
      "!type": "number"
    },
    "availHeight": {
      "!type": "number"
    },
    "width": {
      "!type": "number"
    },
    "height": {
      "!type": "number"
    },
    "colorDepth": {
      "!type": "number"
    },
    "pixelDepth": {
      "!type": "number"
    },
    "top": {
      "!type": "number"
    },
    "left": {
      "!type": "number"
    },
    "availTop": {
      "!type": "number"
    },
    "availLeft": {
      "!type": "number"
    },
    "onmozorientationchange": {
      "!type": "fn(+Event)"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "ScriptProcessorNode": {
    "onaudioprocess": {
      "!type": "fn(+Event)"
    },
    "bufferSize": {
      "!type": "number"
    },
    "passThrough": {
      "!type": "bool"
    }
  },
  "ScrollAreaEvent": {
    "x": {
      "!type": "number"
    },
    "y": {
      "!type": "number"
    },
    "width": {
      "!type": "number"
    },
    "height": {
      "!type": "number"
    },
    "initScrollAreaEvent": {
      "!type": "fn(type: string, canBubble: bool, cancelable: bool, view: Window, detail: number, x: number, y: number, width: number, height: number)"
    }
  },
  "SEReader": {
    "isSEPresent": {
      "!type": "bool"
    },
    "type": {
      "!type": "SEType"
    },
    "openSession": {
      "!type": "fn() -> +Promise[value=SESession]"
    },
    "closeAll": {
      "!type": "fn() -> +Promise[value=void]"
    }
  },
  "SESession": {
    "reader": {
      "!type": "SEReader"
    },
    "isClosed": {
      "!type": "bool"
    },
    "openLogicalChannel": {
      "!type": "fn(aid: Uint8Array) -> +Promise[value=SEChannel]"
    },
    "closeAll": {
      "!type": "fn() -> +Promise[value=void]"
    }
  },
  "SEChannel": {
    "session": {
      "!type": "SESession"
    },
    "openResponse": {
      "!type": "Uint8Array"
    },
    "isClosed": {
      "!type": "bool"
    },
    "type": {
      "!type": "SEChannelType"
    },
    "transmit": {
      "!type": "fn(command?: SECommand) -> +Promise[value=SEResponse]"
    },
    "close": {
      "!type": "fn() -> +Promise[value=void]"
    }
  },
  "SEResponse": {
    "channel": {
      "!type": "SEChannel"
    },
    "sw1": {
      "!type": "number"
    },
    "sw2": {
      "!type": "number"
    },
    "data": {
      "!type": "[number]"
    }
  },
  "Selection": {
    "anchorNode": {
      "!type": "Node"
    },
    "anchorOffset": {
      "!type": "number"
    },
    "focusNode": {
      "!type": "Node"
    },
    "focusOffset": {
      "!type": "number"
    },
    "isCollapsed": {
      "!type": "bool"
    },
    "collapse": {
      "!type": "fn(node: Node, offset: number)"
    },
    "collapseToStart": {
      "!type": "fn()"
    },
    "collapseToEnd": {
      "!type": "fn()"
    },
    "extend": {
      "!type": "fn(node: Node, offset: number)"
    },
    "selectAllChildren": {
      "!type": "fn(node: Node)"
    },
    "deleteFromDocument": {
      "!type": "fn()"
    },
    "rangeCount": {
      "!type": "number"
    },
    "getRangeAt": {
      "!type": "fn(index: number) -> Range"
    },
    "addRange": {
      "!type": "fn(range: Range)"
    },
    "removeRange": {
      "!type": "fn(range: Range)"
    },
    "removeAllRanges": {
      "!type": "fn()"
    },
    "containsNode": {
      "!type": "fn(node: Node, allowPartialContainment: bool) -> bool"
    },
    "modify": {
      "!type": "fn(alter: string, direction: string, granularity: string)"
    },
    "ENDOFPRECEDINGLINE": {
      "!type": "number"
    },
    "STARTOFNEXTLINE": {
      "!type": "number"
    },
    "interlinePosition": {
      "!type": "bool"
    },
    "toStringWithFormat": {
      "!type": "fn(formatType: string, flags: number, wrapColumn: number) -> string"
    },
    "addSelectionListener": {
      "!type": "fn(newListener: nsISelectionListener)"
    },
    "removeSelectionListener": {
      "!type": "fn(listenerToRemove: nsISelectionListener)"
    },
    "type": {
      "!type": "number"
    },
    "GetRangesForInterval": {
      "!type": "fn(beginNode: Node, beginOffset: number, endNode: Node, endOffset: number, allowAdjacent: bool) -> [Range]"
    },
    "scrollIntoView": {
      "!type": "fn(aRegion: number, aIsSynchronous: bool, aVPercent: number, aHPercent: number)"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "ServiceWorker": {
    "scriptURL": {
      "!type": "string"
    },
    "state": {
      "!type": "ServiceWorkerState"
    },
    "onstatechange": {
      "!type": "fn(+Event)"
    },
    "postMessage": {
      "!type": "fn(message: ?, transferable?: [Transferable])"
    },
    "onerror": {
      "!type": "fn(+Event)"
    }
  },
  "ServiceWorkerClient": {
    "id": {
      "!type": "number"
    },
    "postMessage": {
      "!type": "fn(message: ?, transfer?: [Transferable])"
    }
  },
  "ServiceWorkerClients": {
    "getServiced": {
      "!type": "fn() -> +Promise"
    },
    "reloadAll": {
      "!type": "fn() -> +Promise[value=?]"
    }
  },
  "ServiceWorkerContainer": {
    "controller": {
      "!type": "ServiceWorker"
    },
    "ready": {
      "!type": "+Promise[value=ServiceWorkerRegistration]"
    },
    "register": {
      "!type": "fn(scriptURL: string, options?: RegistrationOptions) -> +Promise[value=ServiceWorkerRegistration]"
    },
    "getRegistration": {
      "!type": "fn(documentURL?: string) -> +Promise[value=ServiceWorkerRegistration]"
    },
    "getRegistrations": {
      "!type": "fn() -> +Promise"
    },
    "oncontrollerchange": {
      "!type": "fn(+Event)"
    },
    "onreloadpage": {
      "!type": "fn(+Event)"
    },
    "onerror": {
      "!type": "fn(+Event)"
    },
    "onmessage": {
      "!type": "fn(+Event)"
    },
    "getScopeForUrl": {
      "!type": "fn(url: string) -> string"
    }
  },
  "ServiceWorkerGlobalScope": {
    "clients": {
      "!type": "Clients"
    },
    "registration": {
      "!type": "ServiceWorkerRegistration"
    },
    "oninstall": {
      "!type": "fn(+Event)"
    },
    "onactivate": {
      "!type": "fn(+Event)"
    },
    "onfetch": {
      "!type": "fn(+Event)"
    },
    "onbeforeevicted": {
      "!type": "fn(+Event)"
    },
    "onevicted": {
      "!type": "fn(+Event)"
    },
    "onmessage": {
      "!type": "fn(+Event)"
    },
    "onpush": {
      "!type": "fn(+Event)"
    },
    "onpushsubscriptionchange": {
      "!type": "fn(+Event)"
    }
  },
  "ServiceWorkerRegistration": {
    "installing": {
      "!type": "ServiceWorker"
    },
    "waiting": {
      "!type": "ServiceWorker"
    },
    "active": {
      "!type": "ServiceWorker"
    },
    "scope": {
      "!type": "string"
    },
    "update": {
      "!type": "fn()"
    },
    "unregister": {
      "!type": "fn() -> +Promise[value=bool]"
    },
    "onupdatefound": {
      "!type": "fn(+Event)"
    },
    "pushManager": {
      "!type": "PushManager"
    }
  },
  "SettingsLock": {
    "closed": {
      "!type": "bool"
    },
    "set": {
      "!type": "fn(settings: object) -> DOMRequest"
    },
    "get": {
      "!type": "fn(name: string) -> DOMRequest"
    },
    "clear": {
      "!type": "fn() -> DOMRequest"
    },
    "onsettingstransactionsuccess": {
      "!type": "fn(+Event)"
    },
    "onsettingstransactionfailure": {
      "!type": "fn(+Event)"
    }
  },
  "SettingsManager": {
    "createLock": {
      "!type": "fn() -> SettingsLock"
    },
    "addObserver": {
      "!type": "fn(name: string, callback: SettingChangeCallback)"
    },
    "removeObserver": {
      "!type": "fn(name: string, callback: SettingChangeCallback)"
    },
    "onsettingchange": {
      "!type": "fn(+Event)"
    }
  },
  "ShadowRoot": {
    "getElementById": {
      "!type": "fn(elementId: string) -> Element"
    },
    "getElementsByTagName": {
      "!type": "fn(localName: string) -> HTMLCollection"
    },
    "getElementsByTagNameNS": {
      "!type": "fn(namespace: string, localName: string) -> HTMLCollection"
    },
    "getElementsByClassName": {
      "!type": "fn(classNames: string) -> HTMLCollection"
    },
    "innerHTML": {
      "!type": "string"
    },
    "host": {
      "!type": "Element"
    },
    "olderShadowRoot": {
      "!type": "ShadowRoot"
    },
    "applyAuthorStyles": {
      "!type": "bool"
    },
    "styleSheets": {
      "!type": "StyleSheetList"
    }
  },
  "SharedWorker": {
    "!type": "fn(scriptURL: string, name?: string)",
    "prototype": {
      "port": {
        "!type": "MessagePort"
      },
      "onerror": {
        "!type": "fn(+Event)"
      }
    }
  },
  "SharedWorkerGlobalScope": {
    "name": {
      "!type": "string"
    },
    "onconnect": {
      "!type": "fn(+Event)"
    }
  },
  "SimpleGestureEvent": {
    "DIRECTION_UP": {
      "!type": "number"
    },
    "DIRECTION_DOWN": {
      "!type": "number"
    },
    "DIRECTION_LEFT": {
      "!type": "number"
    },
    "DIRECTION_RIGHT": {
      "!type": "number"
    },
    "ROTATION_COUNTERCLOCKWISE": {
      "!type": "number"
    },
    "ROTATION_CLOCKWISE": {
      "!type": "number"
    },
    "allowedDirections": {
      "!type": "number"
    },
    "direction": {
      "!type": "number"
    },
    "delta": {
      "!type": "number"
    },
    "clickCount": {
      "!type": "number"
    },
    "initSimpleGestureEvent": {
      "!type": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: bool, altKeyArg: bool, shiftKeyArg: bool, metaKeyArg: bool, buttonArg: number, relatedTargetArg: EventTarget, allowedDirectionsArg: number, directionArg: number, deltaArg: number, clickCount: number)"
    }
  },
  "SimplePushManager": {
    "register": {
      "!type": "fn() -> DOMRequest"
    },
    "unregister": {
      "!type": "fn(pushEndpoint: string) -> DOMRequest"
    },
    "registrations": {
      "!type": "fn() -> DOMRequest"
    }
  },
  "SourceBuffer": {
    "mode": {
      "!type": "SourceBufferAppendMode"
    },
    "updating": {
      "!type": "bool"
    },
    "buffered": {
      "!type": "TimeRanges"
    },
    "timestampOffset": {
      "!type": "number"
    },
    "appendWindowStart": {
      "!type": "number"
    },
    "appendWindowEnd": {
      "!type": "number"
    },
    "appendBuffer": {
      "!type": "fn(data: ArrayBuffer)"
    },
    "abort": {
      "!type": "fn()"
    },
    "remove": {
      "!type": "fn(start: number, end: number)"
    }
  },
  "SourceBufferList": {
    "length": {
      "!type": "number"
    }
  },
  "SpeechGrammar": {
    "!type": "fn()",
    "prototype": {
      "src": {
        "!type": "string"
      },
      "weight": {
        "!type": "number"
      }
    }
  },
  "SpeechGrammarList": {
    "!type": "fn()",
    "prototype": {
      "length": {
        "!type": "number"
      },
      "item": {
        "!type": "fn(index: number) -> SpeechGrammar"
      },
      "addFromURI": {
        "!type": "fn(src: string, weight?: number)"
      },
      "addFromString": {
        "!type": "fn(string: string, weight?: number)"
      }
    }
  },
  "SpeechRecognition": {
    "!type": "fn()",
    "prototype": {
      "grammars": {
        "!type": "SpeechGrammarList"
      },
      "lang": {
        "!type": "string"
      },
      "continuous": {
        "!type": "bool"
      },
      "interimResults": {
        "!type": "bool"
      },
      "maxAlternatives": {
        "!type": "number"
      },
      "serviceURI": {
        "!type": "string"
      },
      "start": {
        "!type": "fn(stream?: MediaStream)"
      },
      "stop": {
        "!type": "fn()"
      },
      "abort": {
        "!type": "fn()"
      },
      "onaudiostart": {
        "!type": "fn(+Event)"
      },
      "onsoundstart": {
        "!type": "fn(+Event)"
      },
      "onspeechstart": {
        "!type": "fn(+Event)"
      },
      "onspeechend": {
        "!type": "fn(+Event)"
      },
      "onsoundend": {
        "!type": "fn(+Event)"
      },
      "onaudioend": {
        "!type": "fn(+Event)"
      },
      "onresult": {
        "!type": "fn(+Event)"
      },
      "onnomatch": {
        "!type": "fn(+Event)"
      },
      "onerror": {
        "!type": "fn(+Event)"
      },
      "onstart": {
        "!type": "fn(+Event)"
      },
      "onend": {
        "!type": "fn(+Event)"
      }
    }
  },
  "SpeechRecognitionAlternative": {
    "transcript": {
      "!type": "string"
    },
    "confidence": {
      "!type": "number"
    }
  },
  "SpeechRecognitionError": {
    "!type": "fn(type: string, eventInitDict?: SpeechRecognitionErrorInit)",
    "prototype": {
      "error": {
        "!type": "SpeechRecognitionErrorCode"
      },
      "message": {
        "!type": "string"
      }
    }
  },
  "SpeechRecognitionEvent": {
    "!type": "fn(type: string, eventInitDict?: SpeechRecognitionEventInit)",
    "prototype": {
      "resultIndex": {
        "!type": "number"
      },
      "results": {
        "!type": "nsISupports"
      },
      "interpretation": {
        "!type": "string"
      },
      "emma": {
        "!type": "Document"
      }
    }
  },
  "SpeechRecognitionResult": {
    "length": {
      "!type": "number"
    },
    "item": {
      "!type": "fn(index: number) -> SpeechRecognitionAlternative"
    },
    "final": {
      "!type": "bool"
    }
  },
  "SpeechRecognitionResultList": {
    "length": {
      "!type": "number"
    },
    "item": {
      "!type": "fn(index: number) -> SpeechRecognitionResult"
    }
  },
  "SpeechSynthesis": {
    "pending": {
      "!type": "bool"
    },
    "speaking": {
      "!type": "bool"
    },
    "paused": {
      "!type": "bool"
    },
    "speak": {
      "!type": "fn(utterance: SpeechSynthesisUtterance)"
    },
    "cancel": {
      "!type": "fn()"
    },
    "pause": {
      "!type": "fn()"
    },
    "resume": {
      "!type": "fn()"
    },
    "getVoices": {
      "!type": "fn() -> [SpeechSynthesisVoice]"
    }
  },
  "SpeechSynthesisEvent": {
    "!type": "fn(type: string, eventInitDict?: SpeechSynthesisEventInit)",
    "prototype": {
      "charIndex": {
        "!type": "number"
      },
      "elapsedTime": {
        "!type": "number"
      },
      "name": {
        "!type": "string"
      }
    }
  },
  "SpeechSynthesisUtterance": {
    "!type": "fn(text: string)",
    "prototype": {
      "text": {
        "!type": "string"
      },
      "lang": {
        "!type": "string"
      },
      "voice": {
        "!type": "SpeechSynthesisVoice"
      },
      "volume": {
        "!type": "number"
      },
      "rate": {
        "!type": "number"
      },
      "pitch": {
        "!type": "number"
      },
      "onstart": {
        "!type": "fn(+Event)"
      },
      "onend": {
        "!type": "fn(+Event)"
      },
      "onerror": {
        "!type": "fn(+Event)"
      },
      "onpause": {
        "!type": "fn(+Event)"
      },
      "onresume": {
        "!type": "fn(+Event)"
      },
      "onmark": {
        "!type": "fn(+Event)"
      },
      "onboundary": {
        "!type": "fn(+Event)"
      }
    }
  },
  "SpeechSynthesisVoice": {
    "voiceURI": {
      "!type": "string"
    },
    "name": {
      "!type": "string"
    },
    "lang": {
      "!type": "string"
    },
    "localService": {
      "!type": "bool"
    },
    "default": {
      "!type": "bool"
    }
  },
  "StereoPannerNode": {
    "pan": {
      "!type": "AudioParam"
    },
    "passThrough": {
      "!type": "bool"
    }
  },
  "Storage": {
    "length": {
      "!type": "number"
    },
    "key": {
      "!type": "fn(index: number) -> string"
    },
    "getItem": {
      "!type": "fn(key: string) -> string"
    },
    "setItem": {
      "!type": "fn(key: string, value: string)"
    },
    "removeItem": {
      "!type": "fn(key: string)"
    },
    "clear": {
      "!type": "fn()"
    }
  },
  "StorageEvent": {
    "!type": "fn(type: string, eventInitDict?: StorageEventInit)",
    "prototype": {
      "key": {
        "!type": "string"
      },
      "oldValue": {
        "!type": "string"
      },
      "newValue": {
        "!type": "string"
      },
      "url": {
        "!type": "string"
      },
      "storageArea": {
        "!type": "Storage"
      },
      "initStorageEvent": {
        "!type": "fn(type: string, canBubble: bool, cancelable: bool, key: string, oldValue: string, newValue: string, url: string, storageArea: Storage)"
      }
    }
  },
  "StyleSheet": {
    "type": {
      "!type": "string"
    },
    "href": {
      "!type": "string"
    },
    "ownerNode": {
      "!type": "Node"
    },
    "parentStyleSheet": {
      "!type": "StyleSheet"
    },
    "title": {
      "!type": "string"
    },
    "media": {
      "!type": "MediaList"
    },
    "disabled": {
      "!type": "bool"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "StyleSheetList": {
    "length": {
      "!type": "number"
    },
    "item": {
      "!type": "fn(index: number) -> StyleSheet"
    }
  },
  "CryptoKey": {
    "type": {
      "!type": "KeyType"
    },
    "extractable": {
      "!type": "bool"
    },
    "algorithm": {
      "!type": "object"
    },
    "usages": {
      "!type": "[KeyUsage]"
    }
  },
  "SubtleCrypto": {
    "encrypt": {
      "!type": "fn(algorithm: AlgorithmIdentifier, key: CryptoKey, data: CryptoOperationData) -> +Promise[value=?]"
    },
    "decrypt": {
      "!type": "fn(algorithm: AlgorithmIdentifier, key: CryptoKey, data: CryptoOperationData) -> +Promise[value=?]"
    },
    "sign": {
      "!type": "fn(algorithm: AlgorithmIdentifier, key: CryptoKey, data: CryptoOperationData) -> +Promise[value=?]"
    },
    "verify": {
      "!type": "fn(algorithm: AlgorithmIdentifier, key: CryptoKey, signature: CryptoOperationData, data: CryptoOperationData) -> +Promise[value=?]"
    },
    "digest": {
      "!type": "fn(algorithm: AlgorithmIdentifier, data: CryptoOperationData) -> +Promise[value=?]"
    },
    "generateKey": {
      "!type": "fn(algorithm: AlgorithmIdentifier, extractable: bool, keyUsages: [KeyUsage]) -> +Promise[value=?]"
    },
    "deriveKey": {
      "!type": "fn(algorithm: AlgorithmIdentifier, baseKey: CryptoKey, derivedKeyType: AlgorithmIdentifier, extractable: bool, keyUsages: [KeyUsage]) -> +Promise[value=?]"
    },
    "deriveBits": {
      "!type": "fn(algorithm: AlgorithmIdentifier, baseKey: CryptoKey, length: number) -> +Promise[value=?]"
    },
    "importKey": {
      "!type": "fn(format: KeyFormat, keyData: object, algorithm: AlgorithmIdentifier, extractable: bool, keyUsages: [KeyUsage]) -> +Promise[value=?]"
    },
    "exportKey": {
      "!type": "fn(format: KeyFormat, key: CryptoKey) -> +Promise[value=?]"
    },
    "wrapKey": {
      "!type": "fn(format: KeyFormat, key: CryptoKey, wrappingKey: CryptoKey, wrapAlgorithm: AlgorithmIdentifier) -> +Promise[value=?]"
    },
    "unwrapKey": {
      "!type": "fn(format: KeyFormat, wrappedKey: CryptoOperationData, unwrappingKey: CryptoKey, unwrapAlgorithm: AlgorithmIdentifier, unwrappedKeyAlgorithm: AlgorithmIdentifier, extractable: bool, keyUsages: [KeyUsage]) -> +Promise[value=?]"
    }
  },
  "TVChannel": {
    "getPrograms": {
      "!type": "fn(options?: TVGetProgramsOptions) -> +Promise"
    },
    "getCurrentProgram": {
      "!type": "fn() -> +Promise[value=TVProgram]"
    },
    "networkId": {
      "!type": "string"
    },
    "transportStreamId": {
      "!type": "string"
    },
    "serviceId": {
      "!type": "string"
    },
    "source": {
      "!type": "TVSource"
    },
    "type": {
      "!type": "TVChannelType"
    },
    "name": {
      "!type": "string"
    },
    "number": {
      "!type": "string"
    },
    "isEmergency": {
      "!type": "bool"
    },
    "isFree": {
      "!type": "bool"
    }
  },
  "TVCurrentChannelChangedEvent": {
    "!type": "fn(type: string, eventInitDict?: TVCurrentChannelChangedEventInit)",
    "prototype": {
      "channel": {
        "!type": "TVChannel"
      }
    }
  },
  "TVCurrentSourceChangedEvent": {
    "!type": "fn(type: string, eventInitDict?: TVCurrentSourceChangedEventInit)",
    "prototype": {
      "source": {
        "!type": "TVSource"
      }
    }
  },
  "TVEITBroadcastedEvent": {
    "!type": "fn(type: string, eventInitDict?: TVEITBroadcastedEventInit)",
    "prototype": {
      "programs": {
        "!type": "[TVProgram]"
      }
    }
  },
  "TVManager": {
    "getTuners": {
      "!type": "fn() -> +Promise"
    }
  },
  "TVProgram": {
    "getAudioLanguages": {
      "!type": "fn() -> [string]"
    },
    "getSubtitleLanguages": {
      "!type": "fn() -> [string]"
    },
    "eventId": {
      "!type": "string"
    },
    "channel": {
      "!type": "TVChannel"
    },
    "title": {
      "!type": "string"
    },
    "startTime": {
      "!type": "number"
    },
    "duration": {
      "!type": "number"
    },
    "description": {
      "!type": "string"
    },
    "rating": {
      "!type": "string"
    }
  },
  "TVScanningStateChangedEvent": {
    "!type": "fn(type: string, eventInitDict?: TVScanningStateChangedEventInit)",
    "prototype": {
      "state": {
        "!type": "TVScanningState"
      },
      "channel": {
        "!type": "TVChannel"
      }
    }
  },
  "TVSource": {
    "getChannels": {
      "!type": "fn() -> +Promise"
    },
    "setCurrentChannel": {
      "!type": "fn(channelNumber: string) -> +Promise[value=void]"
    },
    "startScanning": {
      "!type": "fn(options?: TVStartScanningOptions) -> +Promise[value=void]"
    },
    "stopScanning": {
      "!type": "fn() -> +Promise[value=void]"
    },
    "tuner": {
      "!type": "TVTuner"
    },
    "type": {
      "!type": "TVSourceType"
    },
    "isScanning": {
      "!type": "bool"
    },
    "currentChannel": {
      "!type": "TVChannel"
    },
    "oncurrentchannelchanged": {
      "!type": "fn(+Event)"
    },
    "oneitbroadcasted": {
      "!type": "fn(+Event)"
    },
    "onscanningstatechanged": {
      "!type": "fn(+Event)"
    }
  },
  "TVTuner": {
    "getSupportedSourceTypes": {
      "!type": "fn() -> [TVSourceType]"
    },
    "getSources": {
      "!type": "fn() -> +Promise"
    },
    "setCurrentSource": {
      "!type": "fn(sourceType: TVSourceType) -> +Promise[value=void]"
    },
    "id": {
      "!type": "string"
    },
    "currentSource": {
      "!type": "TVSource"
    },
    "stream": {
      "!type": "MediaStream"
    },
    "oncurrentsourcechanged": {
      "!type": "fn(+Event)"
    }
  },
  "Telephony": {
    "dial": {
      "!type": "fn(number: string, serviceId?: number) -> +Promise[value=?]"
    },
    "dialEmergency": {
      "!type": "fn(number: string, serviceId?: number) -> +Promise[value=TelephonyCall]"
    },
    "sendTones": {
      "!type": "fn(tones: string, pauseDuration?: number, toneDuration?: number, serviceId?: number) -> +Promise[value=void]"
    },
    "startTone": {
      "!type": "fn(tone: string, serviceId?: number)"
    },
    "stopTone": {
      "!type": "fn(serviceId?: number)"
    },
    "muted": {
      "!type": "bool"
    },
    "speakerEnabled": {
      "!type": "bool"
    },
    "active": {
      "!type": "?"
    },
    "calls": {
      "!type": "CallsList"
    },
    "conferenceGroup": {
      "!type": "TelephonyCallGroup"
    },
    "ready": {
      "!type": "+Promise[value=void]"
    },
    "onincoming": {
      "!type": "fn(+Event)"
    },
    "oncallschanged": {
      "!type": "fn(+Event)"
    },
    "onremoteheld": {
      "!type": "fn(+Event)"
    },
    "onremoteresumed": {
      "!type": "fn(+Event)"
    }
  },
  "TelephonyCall": {
    "serviceId": {
      "!type": "number"
    },
    "id": {
      "!type": "TelephonyCallId"
    },
    "secondId": {
      "!type": "TelephonyCallId"
    },
    "state": {
      "!type": "string"
    },
    "emergency": {
      "!type": "bool"
    },
    "switchable": {
      "!type": "bool"
    },
    "mergeable": {
      "!type": "bool"
    },
    "error": {
      "!type": "DOMError"
    },
    "disconnectedReason": {
      "!type": "TelephonyCallDisconnectedReason"
    },
    "group": {
      "!type": "TelephonyCallGroup"
    },
    "answer": {
      "!type": "fn() -> +Promise[value=void]"
    },
    "hangUp": {
      "!type": "fn() -> +Promise[value=void]"
    },
    "hold": {
      "!type": "fn() -> +Promise[value=void]"
    },
    "resume": {
      "!type": "fn() -> +Promise[value=void]"
    },
    "onstatechange": {
      "!type": "fn(+Event)"
    },
    "ondialing": {
      "!type": "fn(+Event)"
    },
    "onalerting": {
      "!type": "fn(+Event)"
    },
    "onconnected": {
      "!type": "fn(+Event)"
    },
    "ondisconnected": {
      "!type": "fn(+Event)"
    },
    "onheld": {
      "!type": "fn(+Event)"
    },
    "onerror": {
      "!type": "fn(+Event)"
    },
    "ongroupchange": {
      "!type": "fn(+Event)"
    }
  },
  "TelephonyCallGroup": {
    "calls": {
      "!type": "CallsList"
    },
    "add": {
      "!type": "fn(call: TelephonyCall) -> +Promise[value=void]"
    },
    "remove": {
      "!type": "fn(call: TelephonyCall) -> +Promise[value=void]"
    },
    "hangUp": {
      "!type": "fn() -> +Promise[value=void]"
    },
    "hold": {
      "!type": "fn() -> +Promise[value=void]"
    },
    "resume": {
      "!type": "fn() -> +Promise[value=void]"
    },
    "state": {
      "!type": "string"
    },
    "onstatechange": {
      "!type": "fn(+Event)"
    },
    "onconnected": {
      "!type": "fn(+Event)"
    },
    "onheld": {
      "!type": "fn(+Event)"
    },
    "oncallschanged": {
      "!type": "fn(+Event)"
    },
    "onerror": {
      "!type": "fn(+Event)"
    }
  },
  "TelephonyCallId": {
    "number": {
      "!type": "string"
    },
    "numberPresentation": {
      "!type": "CallIdPresentation"
    },
    "name": {
      "!type": "string"
    },
    "namePresentation": {
      "!type": "CallIdPresentation"
    }
  },
  "TestInterfaceJS": {
    "!type": "fn(anyArg?: ?, objectArg?: object, dictionaryArg?: TestInterfaceJSDictionary)",
    "prototype": {
      "anyArg": {
        "!type": "?"
      },
      "objectArg": {
        "!type": "object"
      },
      "dictionaryArg": {
        "!type": "TestInterfaceJSDictionary"
      },
      "anyAttr": {
        "!type": "?"
      },
      "objectAttr": {
        "!type": "object"
      },
      "dictionaryAttr": {
        "!type": "TestInterfaceJSDictionary"
      },
      "pingPongAny": {
        "!type": "fn(arg: ?) -> ?"
      },
      "pingPongObject": {
        "!type": "fn(obj: object) -> object"
      },
      "pingPongObjectOrString": {
        "!type": "fn(objOrString: ?) -> ?"
      },
      "pingPongDictionary": {
        "!type": "fn(dict?: TestInterfaceJSDictionary) -> TestInterfaceJSDictionary"
      },
      "pingPongDictionaryOrLong": {
        "!type": "fn(dictOrLong?: ?) -> number"
      },
      "pingPongMap": {
        "!type": "fn(map: +MozMap) -> string"
      },
      "objectSequenceLength": {
        "!type": "fn(seq: [object]) -> number"
      },
      "anySequenceLength": {
        "!type": "fn(seq: [?]) -> number"
      },
      "getCallerPrincipal": {
        "!type": "fn() -> string"
      },
      "convertSVS": {
        "!type": "fn(svs: string) -> string"
      },
      "pingPongUnion": {
        "!type": "fn(something: ?) -> ?"
      },
      "pingPongUnionContainingNull": {
        "!type": "fn(something: ?) -> ?"
      },
      "pingPongNullableUnion": {
        "!type": "fn(something: ?) -> ?"
      },
      "returnBadUnion": {
        "!type": "fn() -> ?"
      },
      "cachedAttr": {
        "!type": "number"
      },
      "setCachedAttr": {
        "!type": "fn(n: number)"
      },
      "clearCachedAttrCache": {
        "!type": "fn()"
      },
      "testSequenceOverload": {
        "!type": "fn(arg: [string])"
      },
      "testSequenceUnion": {
        "!type": "fn(arg: ?)"
      },
      "testThrowDOMError": {
        "!type": "fn()"
      },
      "testThrowDOMException": {
        "!type": "fn()"
      },
      "testPromiseWithThrowingChromePromiseInit": {
        "!type": "fn() -> +Promise[value=void]"
      },
      "testPromiseWithThrowingContentPromiseInit": {
        "!type": "fn(func: PromiseInit) -> +Promise[value=void]"
      },
      "testPromiseWithDOMExceptionThrowingPromiseInit": {
        "!type": "fn() -> +Promise[value=void]"
      },
      "testPromiseWithThrowingChromeThenFunction": {
        "!type": "fn() -> +Promise[value=void]"
      },
      "testPromiseWithThrowingContentThenFunction": {
        "!type": "fn(func: AnyCallback) -> +Promise[value=void]"
      },
      "testPromiseWithDOMExceptionThrowingThenFunction": {
        "!type": "fn() -> +Promise[value=void]"
      },
      "testPromiseWithThrowingChromeThenable": {
        "!type": "fn() -> +Promise[value=void]"
      },
      "testPromiseWithThrowingContentThenable": {
        "!type": "fn(thenable: object) -> +Promise[value=void]"
      },
      "testPromiseWithDOMExceptionThrowingThenable": {
        "!type": "fn() -> +Promise[value=void]"
      }
    }
  },
  "Text": {
    "!type": "fn(data?: string)",
    "prototype": {
      "splitText": {
        "!type": "fn(offset: number) -> Text"
      },
      "wholeText": {
        "!type": "string"
      },
      "queryInterface": {
        "!type": "fn(iid: IID) -> nsISupports"
      },
      "getBoxQuads": {
        "!type": "fn(options?: BoxQuadOptions) -> [DOMQuad]"
      },
      "convertQuadFromNode": {
        "!type": "fn(quad: DOMQuad, from: GeometryNode, options?: ConvertCoordinateOptions) -> DOMQuad"
      },
      "convertRectFromNode": {
        "!type": "fn(rect: DOMRectReadOnly, from: GeometryNode, options?: ConvertCoordinateOptions) -> DOMQuad"
      },
      "convertPointFromNode": {
        "!type": "fn(point: DOMPointInit, from: GeometryNode, options?: ConvertCoordinateOptions) -> DOMPoint"
      }
    }
  },
  "TextDecoder": {
    "!type": "fn(label?: string, options?: TextDecoderOptions)",
    "prototype": {
      "encoding": {
        "!type": "string"
      },
      "fatal": {
        "!type": "bool"
      },
      "decode": {
        "!type": "fn(input?: BufferSource, options?: TextDecodeOptions) -> string"
      }
    }
  },
  "TextEncoder": {
    "!type": "fn(utfLabel?: string)",
    "prototype": {
      "encoding": {
        "!type": "string"
      },
      "encode": {
        "!type": "fn(input?: string) -> Uint8Array"
      }
    }
  },
  "TextTrack": {
    "kind": {
      "!type": "TextTrackKind"
    },
    "label": {
      "!type": "string"
    },
    "language": {
      "!type": "string"
    },
    "id": {
      "!type": "string"
    },
    "inBandMetadataTrackDispatchType": {
      "!type": "string"
    },
    "mode": {
      "!type": "TextTrackMode"
    },
    "cues": {
      "!type": "TextTrackCueList"
    },
    "activeCues": {
      "!type": "TextTrackCueList"
    },
    "addCue": {
      "!type": "fn(cue: VTTCue)"
    },
    "removeCue": {
      "!type": "fn(cue: VTTCue)"
    },
    "textTrackList": {
      "!type": "TextTrackList"
    }
  },
  "TextTrackCueList": {
    "length": {
      "!type": "number"
    },
    "getCueById": {
      "!type": "fn(id: string) -> VTTCue"
    }
  },
  "TextTrackList": {
    "length": {
      "!type": "number"
    },
    "getTrackById": {
      "!type": "fn(id: string) -> TextTrack"
    },
    "onchange": {
      "!type": "fn(+Event)"
    },
    "onaddtrack": {
      "!type": "fn(+Event)"
    },
    "onremovetrack": {
      "!type": "fn(+Event)"
    },
    "mediaElement": {
      "!type": "HTMLMediaElement"
    }
  },
  "TimeEvent": {
    "detail": {
      "!type": "number"
    },
    "view": {
      "!type": "WindowProxy"
    },
    "initTimeEvent": {
      "!type": "fn(aType: string, aView: Window, aDetail: number)"
    }
  },
  "TimeRanges": {
    "length": {
      "!type": "number"
    },
    "start": {
      "!type": "fn(index: number) -> number"
    },
    "end": {
      "!type": "fn(index: number) -> number"
    }
  },
  "Touch": {
    "identifier": {
      "!type": "number"
    },
    "target": {
      "!type": "EventTarget"
    },
    "screenX": {
      "!type": "number"
    },
    "screenY": {
      "!type": "number"
    },
    "clientX": {
      "!type": "number"
    },
    "clientY": {
      "!type": "number"
    },
    "pageX": {
      "!type": "number"
    },
    "pageY": {
      "!type": "number"
    },
    "radiusX": {
      "!type": "number"
    },
    "radiusY": {
      "!type": "number"
    },
    "rotationAngle": {
      "!type": "number"
    },
    "force": {
      "!type": "number"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "TouchEvent": {
    "touches": {
      "!type": "TouchList"
    },
    "targetTouches": {
      "!type": "TouchList"
    },
    "changedTouches": {
      "!type": "TouchList"
    },
    "altKey": {
      "!type": "bool"
    },
    "metaKey": {
      "!type": "bool"
    },
    "ctrlKey": {
      "!type": "bool"
    },
    "shiftKey": {
      "!type": "bool"
    },
    "initTouchEvent": {
      "!type": "fn(type: string, canBubble: bool, cancelable: bool, view: Window, detail: number, ctrlKey: bool, altKey: bool, shiftKey: bool, metaKey: bool, touches: TouchList, targetTouches: TouchList, changedTouches: TouchList)"
    }
  },
  "TouchList": {
    "length": {
      "!type": "number"
    },
    "item": {
      "!type": "fn(index: number) -> Touch"
    },
    "identifiedTouch": {
      "!type": "fn(identifier: number) -> Touch"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "TrackEvent": {
    "!type": "fn(type: string, eventInitDict?: TrackEventInit)",
    "prototype": {
      "track": {
        "!type": "?"
      }
    }
  },
  "TransitionEvent": {
    "!type": "fn(type: string, eventInitDict?: TransitionEventInit)",
    "prototype": {
      "propertyName": {
        "!type": "string"
      },
      "elapsedTime": {
        "!type": "number"
      },
      "pseudoElement": {
        "!type": "string"
      }
    }
  },
  "TreeColumn": {
    "element": {
      "!type": "Element"
    },
    "columns": {
      "!type": "TreeColumns"
    },
    "x": {
      "!type": "number"
    },
    "width": {
      "!type": "number"
    },
    "id": {
      "!type": "string"
    },
    "index": {
      "!type": "number"
    },
    "primary": {
      "!type": "bool"
    },
    "cycler": {
      "!type": "bool"
    },
    "editable": {
      "!type": "bool"
    },
    "selectable": {
      "!type": "bool"
    },
    "TYPE_TEXT": {
      "!type": "number"
    },
    "TYPE_CHECKBOX": {
      "!type": "number"
    },
    "TYPE_PROGRESSMETER": {
      "!type": "number"
    },
    "type": {
      "!type": "number"
    },
    "getNext": {
      "!type": "fn() -> TreeColumn"
    },
    "getPrevious": {
      "!type": "fn() -> TreeColumn"
    },
    "invalidate": {
      "!type": "fn()"
    }
  },
  "TreeColumns": {
    "tree": {
      "!type": "TreeBoxObject"
    },
    "count": {
      "!type": "number"
    },
    "length": {
      "!type": "number"
    },
    "getFirstColumn": {
      "!type": "fn() -> TreeColumn"
    },
    "getLastColumn": {
      "!type": "fn() -> TreeColumn"
    },
    "getPrimaryColumn": {
      "!type": "fn() -> TreeColumn"
    },
    "getSortedColumn": {
      "!type": "fn() -> TreeColumn"
    },
    "getKeyColumn": {
      "!type": "fn() -> TreeColumn"
    },
    "getColumnFor": {
      "!type": "fn(element: Element) -> TreeColumn"
    },
    "getNamedColumn": {
      "!type": "fn(name: string) -> TreeColumn"
    },
    "getColumnAt": {
      "!type": "fn(index: number) -> TreeColumn"
    },
    "invalidateColumns": {
      "!type": "fn()"
    },
    "restoreNaturalOrder": {
      "!type": "fn()"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "TreeWalker": {
    "root": {
      "!type": "Node"
    },
    "whatToShow": {
      "!type": "number"
    },
    "filter": {
      "!type": "NodeFilter"
    },
    "currentNode": {
      "!type": "Node"
    },
    "parentNode": {
      "!type": "fn() -> Node"
    },
    "firstChild": {
      "!type": "fn() -> Node"
    },
    "lastChild": {
      "!type": "fn() -> Node"
    },
    "previousSibling": {
      "!type": "fn() -> Node"
    },
    "nextSibling": {
      "!type": "fn() -> Node"
    },
    "previousNode": {
      "!type": "fn() -> Node"
    },
    "nextNode": {
      "!type": "fn() -> Node"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "UDPMessageEvent": {
    "!type": "fn(type: string, eventInitDict?: UDPMessageEventInit)",
    "prototype": {
      "remoteAddress": {
        "!type": "string"
      },
      "remotePort": {
        "!type": "number"
      },
      "data": {
        "!type": "?"
      }
    }
  },
  "UDPSocket": {
    "!type": "fn(options?: UDPOptions)",
    "prototype": {
      "localAddress": {
        "!type": "string"
      },
      "localPort": {
        "!type": "number"
      },
      "remoteAddress": {
        "!type": "string"
      },
      "remotePort": {
        "!type": "number"
      },
      "addressReuse": {
        "!type": "bool"
      },
      "loopback": {
        "!type": "bool"
      },
      "readyState": {
        "!type": "SocketReadyState"
      },
      "opened": {
        "!type": "+Promise[value=void]"
      },
      "closed": {
        "!type": "+Promise[value=void]"
      },
      "onmessage": {
        "!type": "fn(+Event)"
      },
      "close": {
        "!type": "fn() -> +Promise[value=void]"
      },
      "joinMulticastGroup": {
        "!type": "fn(multicastGroupAddress: string)"
      },
      "leaveMulticastGroup": {
        "!type": "fn(multicastGroupAddress: string)"
      },
      "send": {
        "!type": "fn(data: ?, remoteAddress?: string, remotePort?: number) -> bool"
      }
    }
  },
  "UIEvent": {
    "!type": "fn(type: string, eventInitDict?: UIEventInit)",
    "prototype": {
      "view": {
        "!type": "WindowProxy"
      },
      "detail": {
        "!type": "number"
      },
      "initUIEvent": {
        "!type": "fn(aType: string, aCanBubble: bool, aCancelable: bool, aView: Window, aDetail: number)"
      },
      "SCROLL_PAGE_UP": {
        "!type": "number"
      },
      "SCROLL_PAGE_DOWN": {
        "!type": "number"
      },
      "layerX": {
        "!type": "number"
      },
      "layerY": {
        "!type": "number"
      },
      "pageX": {
        "!type": "number"
      },
      "pageY": {
        "!type": "number"
      },
      "which": {
        "!type": "number"
      },
      "rangeParent": {
        "!type": "Node"
      },
      "rangeOffset": {
        "!type": "number"
      },
      "cancelBubble": {
        "!type": "bool"
      },
      "isChar": {
        "!type": "bool"
      }
    }
  },
  "URL": {
    "!type": "fn(url: string, base?: string)",
    "createObjectURL": {
      "!type": "fn(blob: Blob, options?: objectURLOptions) -> string"
    },
    "revokeObjectURL": {
      "!type": "fn(url: string)"
    },
    "prototype": {
      "href": {
        "!type": "string"
      },
      "origin": {
        "!type": "string"
      },
      "protocol": {
        "!type": "string"
      },
      "username": {
        "!type": "string"
      },
      "password": {
        "!type": "string"
      },
      "host": {
        "!type": "string"
      },
      "hostname": {
        "!type": "string"
      },
      "port": {
        "!type": "string"
      },
      "pathname": {
        "!type": "string"
      },
      "search": {
        "!type": "string"
      },
      "hash": {
        "!type": "string"
      },
      "searchParams": {
        "!type": "URLSearchParams"
      }
    }
  },
  "URLSearchParams": {
    "!type": "fn(init: URLSearchParams)",
    "prototype": {
      "append": {
        "!type": "fn(name: string, value: string)"
      },
      "delete": {
        "!type": "fn(name: string)"
      },
      "get": {
        "!type": "fn(name: string) -> string"
      },
      "getAll": {
        "!type": "fn(name: string) -> [string]"
      },
      "has": {
        "!type": "fn(name: string) -> bool"
      },
      "set": {
        "!type": "fn(name: string, value: string)"
      }
    }
  },
  "USSDReceivedEvent": {
    "!type": "fn(type: string, eventInitDict?: USSDReceivedEventInit)",
    "prototype": {
      "serviceId": {
        "!type": "number"
      },
      "message": {
        "!type": "string"
      },
      "session": {
        "!type": "USSDSession"
      }
    }
  },
  "USSDSession": {
    "!type": "fn(serviceId: number)",
    "prototype": {
      "send": {
        "!type": "fn(ussd: string) -> +Promise[value=void]"
      },
      "cancel": {
        "!type": "fn() -> +Promise[value=void]"
      }
    }
  },
  "UndoManager": {
    "transact": {
      "!type": "fn(transaction: DOMTransaction, merge: bool)"
    },
    "undo": {
      "!type": "fn()"
    },
    "redo": {
      "!type": "fn()"
    },
    "item": {
      "!type": "fn(index: number) -> [DOMTransaction]"
    },
    "length": {
      "!type": "number"
    },
    "position": {
      "!type": "number"
    },
    "clearUndo": {
      "!type": "fn()"
    },
    "clearRedo": {
      "!type": "fn()"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "UserProximityEvent": {
    "!type": "fn(type: string, eventInitDict?: UserProximityEventInit)",
    "prototype": {
      "near": {
        "!type": "bool"
      }
    }
  },
  "VRFieldOfViewReadOnly": {
    "upDegrees": {
      "!type": "number"
    },
    "rightDegrees": {
      "!type": "number"
    },
    "downDegrees": {
      "!type": "number"
    },
    "leftDegrees": {
      "!type": "number"
    }
  },
  "VRFieldOfView": {
    "!type": "fn(upDegrees: number, rightDegrees: number, downDegrees: number, leftDegrees: number)",
    "prototype": {
      "upDegrees": {
        "!type": "number"
      },
      "rightDegrees": {
        "!type": "number"
      },
      "downDegrees": {
        "!type": "number"
      },
      "leftDegrees": {
        "!type": "number"
      }
    }
  },
  "VRPositionState": {
    "timeStamp": {
      "!type": "number"
    },
    "hasPosition": {
      "!type": "bool"
    },
    "position": {
      "!type": "DOMPoint"
    },
    "linearVelocity": {
      "!type": "DOMPoint"
    },
    "linearAcceleration": {
      "!type": "DOMPoint"
    },
    "hasOrientation": {
      "!type": "bool"
    },
    "orientation": {
      "!type": "DOMPoint"
    },
    "angularVelocity": {
      "!type": "DOMPoint"
    },
    "angularAcceleration": {
      "!type": "DOMPoint"
    }
  },
  "VREyeParameters": {
    "minimumFieldOfView": {
      "!type": "VRFieldOfView"
    },
    "maximumFieldOfView": {
      "!type": "VRFieldOfView"
    },
    "recommendedFieldOfView": {
      "!type": "VRFieldOfView"
    },
    "eyeTranslation": {
      "!type": "DOMPoint"
    },
    "currentFieldOfView": {
      "!type": "VRFieldOfView"
    },
    "renderRect": {
      "!type": "DOMRect"
    }
  },
  "VRDevice": {
    "hardwareUnitId": {
      "!type": "string"
    },
    "deviceId": {
      "!type": "string"
    },
    "deviceName": {
      "!type": "string"
    }
  },
  "HMDVRDevice": {
    "getEyeParameters": {
      "!type": "fn(whichEye: VREye) -> VREyeParameters"
    },
    "setFieldOfView": {
      "!type": "fn(leftFOV?: VRFieldOfViewInit, rightFOV?: VRFieldOfViewInit, zNear?: number, zFar?: number)"
    }
  },
  "PositionSensorVRDevice": {
    "getState": {
      "!type": "fn() -> VRPositionState"
    },
    "getImmediateState": {
      "!type": "fn() -> VRPositionState"
    },
    "resetSensor": {
      "!type": "fn()"
    }
  },
  "VTTCue": {
    "!type": "fn(startTime: number, endTime: number, text: string)",
    "prototype": {
      "track": {
        "!type": "TextTrack"
      },
      "id": {
        "!type": "string"
      },
      "startTime": {
        "!type": "number"
      },
      "endTime": {
        "!type": "number"
      },
      "pauseOnExit": {
        "!type": "bool"
      },
      "region": {
        "!type": "VTTRegion"
      },
      "vertical": {
        "!type": "DirectionSetting"
      },
      "snapToLines": {
        "!type": "bool"
      },
      "line": {
        "!type": "?"
      },
      "lineAlign": {
        "!type": "AlignSetting"
      },
      "position": {
        "!type": "number"
      },
      "positionAlign": {
        "!type": "AlignSetting"
      },
      "size": {
        "!type": "number"
      },
      "align": {
        "!type": "AlignSetting"
      },
      "text": {
        "!type": "string"
      },
      "getCueAsHTML": {
        "!type": "fn() -> DocumentFragment"
      },
      "onenter": {
        "!type": "fn(+Event)"
      },
      "onexit": {
        "!type": "fn(+Event)"
      },
      "displayState": {
        "!type": "HTMLDivElement"
      },
      "hasBeenReset": {
        "!type": "bool"
      }
    }
  },
  "VTTRegion": {
    "!type": "fn()",
    "prototype": {
      "width": {
        "!type": "number"
      },
      "lines": {
        "!type": "number"
      },
      "regionAnchorX": {
        "!type": "number"
      },
      "regionAnchorY": {
        "!type": "number"
      },
      "viewportAnchorX": {
        "!type": "number"
      },
      "viewportAnchorY": {
        "!type": "number"
      },
      "scroll": {
        "!type": "string"
      }
    }
  },
  "ValidityState": {
    "valueMissing": {
      "!type": "bool"
    },
    "typeMismatch": {
      "!type": "bool"
    },
    "patternMismatch": {
      "!type": "bool"
    },
    "tooLong": {
      "!type": "bool"
    },
    "rangeUnderflow": {
      "!type": "bool"
    },
    "rangeOverflow": {
      "!type": "bool"
    },
    "stepMismatch": {
      "!type": "bool"
    },
    "badInput": {
      "!type": "bool"
    },
    "customError": {
      "!type": "bool"
    },
    "valid": {
      "!type": "bool"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "VideoPlaybackQuality": {
    "creationTime": {
      "!type": "DOMHighResTimeStamp"
    },
    "totalVideoFrames": {
      "!type": "number"
    },
    "droppedVideoFrames": {
      "!type": "number"
    },
    "corruptedVideoFrames": {
      "!type": "number"
    }
  },
  "VideoStreamTrack": {},
  "VideoTrack": {
    "id": {
      "!type": "string"
    },
    "kind": {
      "!type": "string"
    },
    "label": {
      "!type": "string"
    },
    "language": {
      "!type": "string"
    },
    "selected": {
      "!type": "bool"
    }
  },
  "VideoTrackList": {
    "length": {
      "!type": "number"
    },
    "getTrackById": {
      "!type": "fn(id: string) -> VideoTrack"
    },
    "selectedIndex": {
      "!type": "number"
    },
    "onchange": {
      "!type": "fn(+Event)"
    },
    "onaddtrack": {
      "!type": "fn(+Event)"
    },
    "onremovetrack": {
      "!type": "fn(+Event)"
    }
  },
  "WaveShaperNode": {
    "curve": {
      "!type": "Float32Array"
    },
    "oversample": {
      "!type": "OverSampleType"
    },
    "passThrough": {
      "!type": "bool"
    }
  },
  "WebGLQuery": {},
  "WebGLSampler": {},
  "WebGLSync": {},
  "WebGLTransformFeedback": {},
  "WebGL2RenderingContext": {
    "READ_BUFFER": {
      "!type": "GLenum"
    },
    "UNPACK_ROW_LENGTH": {
      "!type": "GLenum"
    },
    "UNPACK_SKIP_ROWS": {
      "!type": "GLenum"
    },
    "UNPACK_SKIP_PIXELS": {
      "!type": "GLenum"
    },
    "PACK_ROW_LENGTH": {
      "!type": "GLenum"
    },
    "PACK_SKIP_ROWS": {
      "!type": "GLenum"
    },
    "PACK_SKIP_PIXELS": {
      "!type": "GLenum"
    },
    "COLOR": {
      "!type": "GLenum"
    },
    "DEPTH": {
      "!type": "GLenum"
    },
    "STENCIL": {
      "!type": "GLenum"
    },
    "RED": {
      "!type": "GLenum"
    },
    "RGB8": {
      "!type": "GLenum"
    },
    "RGBA8": {
      "!type": "GLenum"
    },
    "RGB10_A2": {
      "!type": "GLenum"
    },
    "TEXTURE_BINDING_3D": {
      "!type": "GLenum"
    },
    "UNPACK_SKIP_IMAGES": {
      "!type": "GLenum"
    },
    "UNPACK_IMAGE_HEIGHT": {
      "!type": "GLenum"
    },
    "TEXTURE_3D": {
      "!type": "GLenum"
    },
    "TEXTURE_WRAP_R": {
      "!type": "GLenum"
    },
    "MAX_3D_TEXTURE_SIZE": {
      "!type": "GLenum"
    },
    "UNSIGNED_INT_2_10_10_10_REV": {
      "!type": "GLenum"
    },
    "MAX_ELEMENTS_VERTICES": {
      "!type": "GLenum"
    },
    "MAX_ELEMENTS_INDICES": {
      "!type": "GLenum"
    },
    "TEXTURE_MIN_LOD": {
      "!type": "GLenum"
    },
    "TEXTURE_MAX_LOD": {
      "!type": "GLenum"
    },
    "TEXTURE_BASE_LEVEL": {
      "!type": "GLenum"
    },
    "TEXTURE_MAX_LEVEL": {
      "!type": "GLenum"
    },
    "MIN": {
      "!type": "GLenum"
    },
    "MAX": {
      "!type": "GLenum"
    },
    "DEPTH_COMPONENT24": {
      "!type": "GLenum"
    },
    "MAX_TEXTURE_LOD_BIAS": {
      "!type": "GLenum"
    },
    "TEXTURE_COMPARE_MODE": {
      "!type": "GLenum"
    },
    "TEXTURE_COMPARE_FUNC": {
      "!type": "GLenum"
    },
    "CURRENT_QUERY": {
      "!type": "GLenum"
    },
    "QUERY_RESULT": {
      "!type": "GLenum"
    },
    "QUERY_RESULT_AVAILABLE": {
      "!type": "GLenum"
    },
    "STREAM_READ": {
      "!type": "GLenum"
    },
    "STREAM_COPY": {
      "!type": "GLenum"
    },
    "STATIC_READ": {
      "!type": "GLenum"
    },
    "STATIC_COPY": {
      "!type": "GLenum"
    },
    "DYNAMIC_READ": {
      "!type": "GLenum"
    },
    "DYNAMIC_COPY": {
      "!type": "GLenum"
    },
    "MAX_DRAW_BUFFERS": {
      "!type": "GLenum"
    },
    "DRAW_BUFFER0": {
      "!type": "GLenum"
    },
    "DRAW_BUFFER1": {
      "!type": "GLenum"
    },
    "DRAW_BUFFER2": {
      "!type": "GLenum"
    },
    "DRAW_BUFFER3": {
      "!type": "GLenum"
    },
    "DRAW_BUFFER4": {
      "!type": "GLenum"
    },
    "DRAW_BUFFER5": {
      "!type": "GLenum"
    },
    "DRAW_BUFFER6": {
      "!type": "GLenum"
    },
    "DRAW_BUFFER7": {
      "!type": "GLenum"
    },
    "DRAW_BUFFER8": {
      "!type": "GLenum"
    },
    "DRAW_BUFFER9": {
      "!type": "GLenum"
    },
    "DRAW_BUFFER10": {
      "!type": "GLenum"
    },
    "DRAW_BUFFER11": {
      "!type": "GLenum"
    },
    "DRAW_BUFFER12": {
      "!type": "GLenum"
    },
    "DRAW_BUFFER13": {
      "!type": "GLenum"
    },
    "DRAW_BUFFER14": {
      "!type": "GLenum"
    },
    "DRAW_BUFFER15": {
      "!type": "GLenum"
    },
    "MAX_FRAGMENT_UNIFORM_COMPONENTS": {
      "!type": "GLenum"
    },
    "MAX_VERTEX_UNIFORM_COMPONENTS": {
      "!type": "GLenum"
    },
    "SAMPLER_3D": {
      "!type": "GLenum"
    },
    "SAMPLER_2D_SHADOW": {
      "!type": "GLenum"
    },
    "FRAGMENT_SHADER_DERIVATIVE_HINT": {
      "!type": "GLenum"
    },
    "PIXEL_PACK_BUFFER": {
      "!type": "GLenum"
    },
    "PIXEL_UNPACK_BUFFER": {
      "!type": "GLenum"
    },
    "PIXEL_PACK_BUFFER_BINDING": {
      "!type": "GLenum"
    },
    "PIXEL_UNPACK_BUFFER_BINDING": {
      "!type": "GLenum"
    },
    "FLOAT_MAT2x3": {
      "!type": "GLenum"
    },
    "FLOAT_MAT2x4": {
      "!type": "GLenum"
    },
    "FLOAT_MAT3x2": {
      "!type": "GLenum"
    },
    "FLOAT_MAT3x4": {
      "!type": "GLenum"
    },
    "FLOAT_MAT4x2": {
      "!type": "GLenum"
    },
    "FLOAT_MAT4x3": {
      "!type": "GLenum"
    },
    "SRGB": {
      "!type": "GLenum"
    },
    "SRGB8": {
      "!type": "GLenum"
    },
    "SRGB8_ALPHA8": {
      "!type": "GLenum"
    },
    "COMPARE_REF_TO_TEXTURE": {
      "!type": "GLenum"
    },
    "RGBA32F": {
      "!type": "GLenum"
    },
    "RGB32F": {
      "!type": "GLenum"
    },
    "RGBA16F": {
      "!type": "GLenum"
    },
    "RGB16F": {
      "!type": "GLenum"
    },
    "VERTEX_ATTRIB_ARRAY_INTEGER": {
      "!type": "GLenum"
    },
    "MAX_ARRAY_TEXTURE_LAYERS": {
      "!type": "GLenum"
    },
    "MIN_PROGRAM_TEXEL_OFFSET": {
      "!type": "GLenum"
    },
    "MAX_PROGRAM_TEXEL_OFFSET": {
      "!type": "GLenum"
    },
    "MAX_VARYING_COMPONENTS": {
      "!type": "GLenum"
    },
    "TEXTURE_2D_ARRAY": {
      "!type": "GLenum"
    },
    "TEXTURE_BINDING_2D_ARRAY": {
      "!type": "GLenum"
    },
    "R11F_G11F_B10F": {
      "!type": "GLenum"
    },
    "UNSIGNED_INT_10F_11F_11F_REV": {
      "!type": "GLenum"
    },
    "RGB9_E5": {
      "!type": "GLenum"
    },
    "UNSIGNED_INT_5_9_9_9_REV": {
      "!type": "GLenum"
    },
    "TRANSFORM_FEEDBACK_BUFFER_MODE": {
      "!type": "GLenum"
    },
    "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS": {
      "!type": "GLenum"
    },
    "TRANSFORM_FEEDBACK_VARYINGS": {
      "!type": "GLenum"
    },
    "TRANSFORM_FEEDBACK_BUFFER_START": {
      "!type": "GLenum"
    },
    "TRANSFORM_FEEDBACK_BUFFER_SIZE": {
      "!type": "GLenum"
    },
    "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN": {
      "!type": "GLenum"
    },
    "RASTERIZER_DISCARD": {
      "!type": "GLenum"
    },
    "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS": {
      "!type": "GLenum"
    },
    "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS": {
      "!type": "GLenum"
    },
    "INTERLEAVED_ATTRIBS": {
      "!type": "GLenum"
    },
    "SEPARATE_ATTRIBS": {
      "!type": "GLenum"
    },
    "TRANSFORM_FEEDBACK_BUFFER": {
      "!type": "GLenum"
    },
    "TRANSFORM_FEEDBACK_BUFFER_BINDING": {
      "!type": "GLenum"
    },
    "RGBA32UI": {
      "!type": "GLenum"
    },
    "RGB32UI": {
      "!type": "GLenum"
    },
    "RGBA16UI": {
      "!type": "GLenum"
    },
    "RGB16UI": {
      "!type": "GLenum"
    },
    "RGBA8UI": {
      "!type": "GLenum"
    },
    "RGB8UI": {
      "!type": "GLenum"
    },
    "RGBA32I": {
      "!type": "GLenum"
    },
    "RGB32I": {
      "!type": "GLenum"
    },
    "RGBA16I": {
      "!type": "GLenum"
    },
    "RGB16I": {
      "!type": "GLenum"
    },
    "RGBA8I": {
      "!type": "GLenum"
    },
    "RGB8I": {
      "!type": "GLenum"
    },
    "RED_INTEGER": {
      "!type": "GLenum"
    },
    "RGB_INTEGER": {
      "!type": "GLenum"
    },
    "RGBA_INTEGER": {
      "!type": "GLenum"
    },
    "SAMPLER_2D_ARRAY": {
      "!type": "GLenum"
    },
    "SAMPLER_2D_ARRAY_SHADOW": {
      "!type": "GLenum"
    },
    "SAMPLER_CUBE_SHADOW": {
      "!type": "GLenum"
    },
    "UNSIGNED_INT_VEC2": {
      "!type": "GLenum"
    },
    "UNSIGNED_INT_VEC3": {
      "!type": "GLenum"
    },
    "UNSIGNED_INT_VEC4": {
      "!type": "GLenum"
    },
    "INT_SAMPLER_2D": {
      "!type": "GLenum"
    },
    "INT_SAMPLER_3D": {
      "!type": "GLenum"
    },
    "INT_SAMPLER_CUBE": {
      "!type": "GLenum"
    },
    "INT_SAMPLER_2D_ARRAY": {
      "!type": "GLenum"
    },
    "UNSIGNED_INT_SAMPLER_2D": {
      "!type": "GLenum"
    },
    "UNSIGNED_INT_SAMPLER_3D": {
      "!type": "GLenum"
    },
    "UNSIGNED_INT_SAMPLER_CUBE": {
      "!type": "GLenum"
    },
    "UNSIGNED_INT_SAMPLER_2D_ARRAY": {
      "!type": "GLenum"
    },
    "DEPTH_COMPONENT32F": {
      "!type": "GLenum"
    },
    "DEPTH32F_STENCIL8": {
      "!type": "GLenum"
    },
    "FLOAT_32_UNSIGNED_INT_24_8_REV": {
      "!type": "GLenum"
    },
    "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING": {
      "!type": "GLenum"
    },
    "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE": {
      "!type": "GLenum"
    },
    "FRAMEBUFFER_ATTACHMENT_RED_SIZE": {
      "!type": "GLenum"
    },
    "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE": {
      "!type": "GLenum"
    },
    "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE": {
      "!type": "GLenum"
    },
    "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE": {
      "!type": "GLenum"
    },
    "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE": {
      "!type": "GLenum"
    },
    "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE": {
      "!type": "GLenum"
    },
    "FRAMEBUFFER_DEFAULT": {
      "!type": "GLenum"
    },
    "DEPTH_STENCIL_ATTACHMENT": {
      "!type": "GLenum"
    },
    "DEPTH_STENCIL": {
      "!type": "GLenum"
    },
    "UNSIGNED_INT_24_8": {
      "!type": "GLenum"
    },
    "DEPTH24_STENCIL8": {
      "!type": "GLenum"
    },
    "UNSIGNED_NORMALIZED": {
      "!type": "GLenum"
    },
    "DRAW_FRAMEBUFFER_BINDING": {
      "!type": "GLenum"
    },
    "READ_FRAMEBUFFER": {
      "!type": "GLenum"
    },
    "DRAW_FRAMEBUFFER": {
      "!type": "GLenum"
    },
    "READ_FRAMEBUFFER_BINDING": {
      "!type": "GLenum"
    },
    "RENDERBUFFER_SAMPLES": {
      "!type": "GLenum"
    },
    "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER": {
      "!type": "GLenum"
    },
    "MAX_COLOR_ATTACHMENTS": {
      "!type": "GLenum"
    },
    "COLOR_ATTACHMENT1": {
      "!type": "GLenum"
    },
    "COLOR_ATTACHMENT2": {
      "!type": "GLenum"
    },
    "COLOR_ATTACHMENT3": {
      "!type": "GLenum"
    },
    "COLOR_ATTACHMENT4": {
      "!type": "GLenum"
    },
    "COLOR_ATTACHMENT5": {
      "!type": "GLenum"
    },
    "COLOR_ATTACHMENT6": {
      "!type": "GLenum"
    },
    "COLOR_ATTACHMENT7": {
      "!type": "GLenum"
    },
    "COLOR_ATTACHMENT8": {
      "!type": "GLenum"
    },
    "COLOR_ATTACHMENT9": {
      "!type": "GLenum"
    },
    "COLOR_ATTACHMENT10": {
      "!type": "GLenum"
    },
    "COLOR_ATTACHMENT11": {
      "!type": "GLenum"
    },
    "COLOR_ATTACHMENT12": {
      "!type": "GLenum"
    },
    "COLOR_ATTACHMENT13": {
      "!type": "GLenum"
    },
    "COLOR_ATTACHMENT14": {
      "!type": "GLenum"
    },
    "COLOR_ATTACHMENT15": {
      "!type": "GLenum"
    },
    "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE": {
      "!type": "GLenum"
    },
    "MAX_SAMPLES": {
      "!type": "GLenum"
    },
    "HALF_FLOAT": {
      "!type": "GLenum"
    },
    "RG": {
      "!type": "GLenum"
    },
    "RG_INTEGER": {
      "!type": "GLenum"
    },
    "R8": {
      "!type": "GLenum"
    },
    "RG8": {
      "!type": "GLenum"
    },
    "R16F": {
      "!type": "GLenum"
    },
    "R32F": {
      "!type": "GLenum"
    },
    "RG16F": {
      "!type": "GLenum"
    },
    "RG32F": {
      "!type": "GLenum"
    },
    "R8I": {
      "!type": "GLenum"
    },
    "R8UI": {
      "!type": "GLenum"
    },
    "R16I": {
      "!type": "GLenum"
    },
    "R16UI": {
      "!type": "GLenum"
    },
    "R32I": {
      "!type": "GLenum"
    },
    "R32UI": {
      "!type": "GLenum"
    },
    "RG8I": {
      "!type": "GLenum"
    },
    "RG8UI": {
      "!type": "GLenum"
    },
    "RG16I": {
      "!type": "GLenum"
    },
    "RG16UI": {
      "!type": "GLenum"
    },
    "RG32I": {
      "!type": "GLenum"
    },
    "RG32UI": {
      "!type": "GLenum"
    },
    "VERTEX_ARRAY_BINDING": {
      "!type": "GLenum"
    },
    "R8_SNORM": {
      "!type": "GLenum"
    },
    "RG8_SNORM": {
      "!type": "GLenum"
    },
    "RGB8_SNORM": {
      "!type": "GLenum"
    },
    "RGBA8_SNORM": {
      "!type": "GLenum"
    },
    "SIGNED_NORMALIZED": {
      "!type": "GLenum"
    },
    "PRIMITIVE_RESTART_FIXED_INDEX": {
      "!type": "GLenum"
    },
    "COPY_READ_BUFFER": {
      "!type": "GLenum"
    },
    "COPY_WRITE_BUFFER": {
      "!type": "GLenum"
    },
    "COPY_READ_BUFFER_BINDING": {
      "!type": "GLenum"
    },
    "COPY_WRITE_BUFFER_BINDING": {
      "!type": "GLenum"
    },
    "UNIFORM_BUFFER": {
      "!type": "GLenum"
    },
    "UNIFORM_BUFFER_BINDING": {
      "!type": "GLenum"
    },
    "UNIFORM_BUFFER_START": {
      "!type": "GLenum"
    },
    "UNIFORM_BUFFER_SIZE": {
      "!type": "GLenum"
    },
    "MAX_VERTEX_UNIFORM_BLOCKS": {
      "!type": "GLenum"
    },
    "MAX_FRAGMENT_UNIFORM_BLOCKS": {
      "!type": "GLenum"
    },
    "MAX_COMBINED_UNIFORM_BLOCKS": {
      "!type": "GLenum"
    },
    "MAX_UNIFORM_BUFFER_BINDINGS": {
      "!type": "GLenum"
    },
    "MAX_UNIFORM_BLOCK_SIZE": {
      "!type": "GLenum"
    },
    "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS": {
      "!type": "GLenum"
    },
    "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS": {
      "!type": "GLenum"
    },
    "UNIFORM_BUFFER_OFFSET_ALIGNMENT": {
      "!type": "GLenum"
    },
    "ACTIVE_UNIFORM_BLOCKS": {
      "!type": "GLenum"
    },
    "UNIFORM_TYPE": {
      "!type": "GLenum"
    },
    "UNIFORM_SIZE": {
      "!type": "GLenum"
    },
    "UNIFORM_BLOCK_INDEX": {
      "!type": "GLenum"
    },
    "UNIFORM_OFFSET": {
      "!type": "GLenum"
    },
    "UNIFORM_ARRAY_STRIDE": {
      "!type": "GLenum"
    },
    "UNIFORM_MATRIX_STRIDE": {
      "!type": "GLenum"
    },
    "UNIFORM_IS_ROW_MAJOR": {
      "!type": "GLenum"
    },
    "UNIFORM_BLOCK_BINDING": {
      "!type": "GLenum"
    },
    "UNIFORM_BLOCK_DATA_SIZE": {
      "!type": "GLenum"
    },
    "UNIFORM_BLOCK_ACTIVE_UNIFORMS": {
      "!type": "GLenum"
    },
    "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES": {
      "!type": "GLenum"
    },
    "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER": {
      "!type": "GLenum"
    },
    "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER": {
      "!type": "GLenum"
    },
    "INVALID_INDEX": {
      "!type": "GLenum"
    },
    "MAX_VERTEX_OUTPUT_COMPONENTS": {
      "!type": "GLenum"
    },
    "MAX_FRAGMENT_INPUT_COMPONENTS": {
      "!type": "GLenum"
    },
    "MAX_SERVER_WAIT_TIMEOUT": {
      "!type": "GLenum"
    },
    "OBJECT_TYPE": {
      "!type": "GLenum"
    },
    "SYNC_CONDITION": {
      "!type": "GLenum"
    },
    "SYNC_STATUS": {
      "!type": "GLenum"
    },
    "SYNC_FLAGS": {
      "!type": "GLenum"
    },
    "SYNC_FENCE": {
      "!type": "GLenum"
    },
    "SYNC_GPU_COMMANDS_COMPLETE": {
      "!type": "GLenum"
    },
    "UNSIGNALED": {
      "!type": "GLenum"
    },
    "SIGNALED": {
      "!type": "GLenum"
    },
    "ALREADY_SIGNALED": {
      "!type": "GLenum"
    },
    "TIMEOUT_EXPIRED": {
      "!type": "GLenum"
    },
    "CONDITION_SATISFIED": {
      "!type": "GLenum"
    },
    "WAIT_FAILED": {
      "!type": "GLenum"
    },
    "SYNC_FLUSH_COMMANDS_BIT": {
      "!type": "GLenum"
    },
    "VERTEX_ATTRIB_ARRAY_DIVISOR": {
      "!type": "GLenum"
    },
    "ANY_SAMPLES_PASSED": {
      "!type": "GLenum"
    },
    "ANY_SAMPLES_PASSED_CONSERVATIVE": {
      "!type": "GLenum"
    },
    "SAMPLER_BINDING": {
      "!type": "GLenum"
    },
    "RGB10_A2UI": {
      "!type": "GLenum"
    },
    "TEXTURE_SWIZZLE_R": {
      "!type": "GLenum"
    },
    "TEXTURE_SWIZZLE_G": {
      "!type": "GLenum"
    },
    "TEXTURE_SWIZZLE_B": {
      "!type": "GLenum"
    },
    "TEXTURE_SWIZZLE_A": {
      "!type": "GLenum"
    },
    "GREEN": {
      "!type": "GLenum"
    },
    "BLUE": {
      "!type": "GLenum"
    },
    "INT_2_10_10_10_REV": {
      "!type": "GLenum"
    },
    "TRANSFORM_FEEDBACK": {
      "!type": "GLenum"
    },
    "TRANSFORM_FEEDBACK_PAUSED": {
      "!type": "GLenum"
    },
    "TRANSFORM_FEEDBACK_ACTIVE": {
      "!type": "GLenum"
    },
    "TRANSFORM_FEEDBACK_BINDING": {
      "!type": "GLenum"
    },
    "COMPRESSED_R11_EAC": {
      "!type": "GLenum"
    },
    "COMPRESSED_SIGNED_R11_EAC": {
      "!type": "GLenum"
    },
    "COMPRESSED_RG11_EAC": {
      "!type": "GLenum"
    },
    "COMPRESSED_SIGNED_RG11_EAC": {
      "!type": "GLenum"
    },
    "COMPRESSED_RGB8_ETC2": {
      "!type": "GLenum"
    },
    "COMPRESSED_SRGB8_ETC2": {
      "!type": "GLenum"
    },
    "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2": {
      "!type": "GLenum"
    },
    "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2": {
      "!type": "GLenum"
    },
    "COMPRESSED_RGBA8_ETC2_EAC": {
      "!type": "GLenum"
    },
    "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC": {
      "!type": "GLenum"
    },
    "TEXTURE_IMMUTABLE_FORMAT": {
      "!type": "GLenum"
    },
    "MAX_ELEMENT_INDEX": {
      "!type": "GLenum"
    },
    "NUM_SAMPLE_COUNTS": {
      "!type": "GLenum"
    },
    "TEXTURE_IMMUTABLE_LEVELS": {
      "!type": "GLenum"
    },
    "TIMEOUT_IGNORED": {
      "!type": "GLint64"
    },
    "copyBufferSubData": {
      "!type": "fn(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr)"
    },
    "getBufferSubData": {
      "!type": "fn(target: GLenum, offset: GLintptr, returnedData: ArrayBuffer)"
    },
    "blitFramebuffer": {
      "!type": "fn(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum)"
    },
    "framebufferTextureLayer": {
      "!type": "fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint)"
    },
    "getInternalformatParameter": {
      "!type": "fn(target: GLenum, internalformat: GLenum, pname: GLenum) -> ?"
    },
    "invalidateFramebuffer": {
      "!type": "fn(target: GLenum, attachments: [GLenum])"
    },
    "invalidateSubFramebuffer": {
      "!type": "fn(target: GLenum, attachments: [GLenum], x: GLint, y: GLint, width: GLsizei, height: GLsizei)"
    },
    "readBuffer": {
      "!type": "fn(src: GLenum)"
    },
    "renderbufferStorageMultisample": {
      "!type": "fn(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei)"
    },
    "texStorage2D": {
      "!type": "fn(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei)"
    },
    "texStorage3D": {
      "!type": "fn(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei)"
    },
    "texImage3D": {
      "!type": "fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: ArrayBufferView)"
    },
    "texSubImage3D": {
      "!type": "fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: ArrayBufferView)"
    },
    "copyTexSubImage3D": {
      "!type": "fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei)"
    },
    "compressedTexImage3D": {
      "!type": "fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: ArrayBufferView)"
    },
    "compressedTexSubImage3D": {
      "!type": "fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: ArrayBufferView)"
    },
    "getFragDataLocation": {
      "!type": "fn(program: WebGLProgram, name: string) -> GLint"
    },
    "uniform1ui": {
      "!type": "fn(location: WebGLUniformLocation, v0: GLuint)"
    },
    "uniform2ui": {
      "!type": "fn(location: WebGLUniformLocation, v0: GLuint, v1: GLuint)"
    },
    "uniform3ui": {
      "!type": "fn(location: WebGLUniformLocation, v0: GLuint, v1: GLuint, v2: GLuint)"
    },
    "uniform4ui": {
      "!type": "fn(location: WebGLUniformLocation, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint)"
    },
    "uniform1uiv": {
      "!type": "fn(location: WebGLUniformLocation, value: Uint32Array)"
    },
    "uniform2uiv": {
      "!type": "fn(location: WebGLUniformLocation, value: Uint32Array)"
    },
    "uniform3uiv": {
      "!type": "fn(location: WebGLUniformLocation, value: Uint32Array)"
    },
    "uniform4uiv": {
      "!type": "fn(location: WebGLUniformLocation, value: Uint32Array)"
    },
    "uniformMatrix2x3fv": {
      "!type": "fn(location: WebGLUniformLocation, transpose: GLboolean, value: Float32Array)"
    },
    "uniformMatrix3x2fv": {
      "!type": "fn(location: WebGLUniformLocation, transpose: GLboolean, value: Float32Array)"
    },
    "uniformMatrix2x4fv": {
      "!type": "fn(location: WebGLUniformLocation, transpose: GLboolean, value: Float32Array)"
    },
    "uniformMatrix4x2fv": {
      "!type": "fn(location: WebGLUniformLocation, transpose: GLboolean, value: Float32Array)"
    },
    "uniformMatrix3x4fv": {
      "!type": "fn(location: WebGLUniformLocation, transpose: GLboolean, value: Float32Array)"
    },
    "uniformMatrix4x3fv": {
      "!type": "fn(location: WebGLUniformLocation, transpose: GLboolean, value: Float32Array)"
    },
    "vertexAttribI4i": {
      "!type": "fn(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint)"
    },
    "vertexAttribI4iv": {
      "!type": "fn(index: GLuint, v: [GLint])"
    },
    "vertexAttribI4ui": {
      "!type": "fn(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint)"
    },
    "vertexAttribI4uiv": {
      "!type": "fn(index: GLuint, v: [GLuint])"
    },
    "vertexAttribIPointer": {
      "!type": "fn(index: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr)"
    },
    "vertexAttribDivisor": {
      "!type": "fn(index: GLuint, divisor: GLuint)"
    },
    "drawArraysInstanced": {
      "!type": "fn(mode: GLenum, first: GLint, count: GLsizei, instanceCount: GLsizei)"
    },
    "drawElementsInstanced": {
      "!type": "fn(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr, instanceCount: GLsizei)"
    },
    "drawRangeElements": {
      "!type": "fn(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, offset: GLintptr)"
    },
    "drawBuffers": {
      "!type": "fn(buffers: [GLenum])"
    },
    "clearBufferiv": {
      "!type": "fn(buffer: GLenum, drawbuffer: GLint, value: Int32Array)"
    },
    "clearBufferuiv": {
      "!type": "fn(buffer: GLenum, drawbuffer: GLint, value: Uint32Array)"
    },
    "clearBufferfv": {
      "!type": "fn(buffer: GLenum, drawbuffer: GLint, value: Float32Array)"
    },
    "clearBufferfi": {
      "!type": "fn(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint)"
    },
    "createQuery": {
      "!type": "fn() -> WebGLQuery"
    },
    "deleteQuery": {
      "!type": "fn(query: WebGLQuery)"
    },
    "isQuery": {
      "!type": "fn(query: WebGLQuery) -> GLboolean"
    },
    "beginQuery": {
      "!type": "fn(target: GLenum, query: WebGLQuery)"
    },
    "endQuery": {
      "!type": "fn(target: GLenum)"
    },
    "getQuery": {
      "!type": "fn(target: GLenum, pname: GLenum) -> WebGLQuery"
    },
    "getQueryParameter": {
      "!type": "fn(query: WebGLQuery, pname: GLenum) -> ?"
    },
    "createSampler": {
      "!type": "fn() -> WebGLSampler"
    },
    "deleteSampler": {
      "!type": "fn(sampler: WebGLSampler)"
    },
    "isSampler": {
      "!type": "fn(sampler: WebGLSampler) -> GLboolean"
    },
    "bindSampler": {
      "!type": "fn(unit: GLuint, sampler: WebGLSampler)"
    },
    "samplerParameteri": {
      "!type": "fn(sampler: WebGLSampler, pname: GLenum, param: GLint)"
    },
    "samplerParameterf": {
      "!type": "fn(sampler: WebGLSampler, pname: GLenum, param: GLfloat)"
    },
    "getSamplerParameter": {
      "!type": "fn(sampler: WebGLSampler, pname: GLenum) -> ?"
    },
    "fenceSync": {
      "!type": "fn(condition: GLenum, flags: GLbitfield) -> WebGLSync"
    },
    "isSync": {
      "!type": "fn(sync: WebGLSync) -> GLboolean"
    },
    "deleteSync": {
      "!type": "fn(sync: WebGLSync)"
    },
    "clientWaitSync": {
      "!type": "fn(sync: WebGLSync, flags: GLbitfield, timeout: GLint64) -> GLenum"
    },
    "waitSync": {
      "!type": "fn(sync: WebGLSync, flags: GLbitfield, timeout: GLint64)"
    },
    "getSyncParameter": {
      "!type": "fn(sync: WebGLSync, pname: GLenum) -> ?"
    },
    "createTransformFeedback": {
      "!type": "fn() -> WebGLTransformFeedback"
    },
    "deleteTransformFeedback": {
      "!type": "fn(tf: WebGLTransformFeedback)"
    },
    "isTransformFeedback": {
      "!type": "fn(tf: WebGLTransformFeedback) -> GLboolean"
    },
    "bindTransformFeedback": {
      "!type": "fn(target: GLenum, tf: WebGLTransformFeedback)"
    },
    "beginTransformFeedback": {
      "!type": "fn(primitiveMode: GLenum)"
    },
    "endTransformFeedback": {
      "!type": "fn()"
    },
    "transformFeedbackVaryings": {
      "!type": "fn(program: WebGLProgram, varyings: [string], bufferMode: GLenum)"
    },
    "getTransformFeedbackVarying": {
      "!type": "fn(program: WebGLProgram, index: GLuint) -> WebGLActiveInfo"
    },
    "pauseTransformFeedback": {
      "!type": "fn()"
    },
    "resumeTransformFeedback": {
      "!type": "fn()"
    },
    "bindBufferBase": {
      "!type": "fn(target: GLenum, index: GLuint, buffer: WebGLBuffer)"
    },
    "bindBufferRange": {
      "!type": "fn(target: GLenum, index: GLuint, buffer: WebGLBuffer, offset: GLintptr, size: GLsizeiptr)"
    },
    "getIndexedParameter": {
      "!type": "fn(target: GLenum, index: GLuint) -> ?"
    },
    "getUniformIndices": {
      "!type": "fn(program: WebGLProgram, uniformNames: [string]) -> [GLuint]"
    },
    "getActiveUniforms": {
      "!type": "fn(program: WebGLProgram, uniformIndices: [GLuint], pname: GLenum) -> [GLint]"
    },
    "getUniformBlockIndex": {
      "!type": "fn(program: WebGLProgram, uniformBlockName: string) -> GLuint"
    },
    "getActiveUniformBlockParameter": {
      "!type": "fn(program: WebGLProgram, uniformBlockIndex: GLuint, pname: GLenum) -> ?"
    },
    "getActiveUniformBlockName": {
      "!type": "fn(program: WebGLProgram, uniformBlockIndex: GLuint) -> string"
    },
    "uniformBlockBinding": {
      "!type": "fn(program: WebGLProgram, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint)"
    }
  },
  "WebGLBuffer": {},
  "WebGLFramebuffer": {},
  "WebGLProgram": {},
  "WebGLRenderbuffer": {},
  "WebGLShader": {},
  "WebGLTexture": {},
  "WebGLUniformLocation": {},
  "WebGLVertexArray": {},
  "WebGLActiveInfo": {
    "size": {
      "!type": "GLint"
    },
    "type": {
      "!type": "GLenum"
    },
    "name": {
      "!type": "string"
    }
  },
  "WebGLShaderPrecisionFormat": {
    "rangeMin": {
      "!type": "GLint"
    },
    "rangeMax": {
      "!type": "GLint"
    },
    "precision": {
      "!type": "GLint"
    }
  },
  "WebGLRenderingContext": {
    "DEPTH_BUFFER_BIT": {
      "!type": "GLenum"
    },
    "STENCIL_BUFFER_BIT": {
      "!type": "GLenum"
    },
    "COLOR_BUFFER_BIT": {
      "!type": "GLenum"
    },
    "POINTS": {
      "!type": "GLenum"
    },
    "LINES": {
      "!type": "GLenum"
    },
    "LINE_LOOP": {
      "!type": "GLenum"
    },
    "LINE_STRIP": {
      "!type": "GLenum"
    },
    "TRIANGLES": {
      "!type": "GLenum"
    },
    "TRIANGLE_STRIP": {
      "!type": "GLenum"
    },
    "TRIANGLE_FAN": {
      "!type": "GLenum"
    },
    "ZERO": {
      "!type": "GLenum"
    },
    "ONE": {
      "!type": "GLenum"
    },
    "SRC_COLOR": {
      "!type": "GLenum"
    },
    "ONE_MINUS_SRC_COLOR": {
      "!type": "GLenum"
    },
    "SRC_ALPHA": {
      "!type": "GLenum"
    },
    "ONE_MINUS_SRC_ALPHA": {
      "!type": "GLenum"
    },
    "DST_ALPHA": {
      "!type": "GLenum"
    },
    "ONE_MINUS_DST_ALPHA": {
      "!type": "GLenum"
    },
    "DST_COLOR": {
      "!type": "GLenum"
    },
    "ONE_MINUS_DST_COLOR": {
      "!type": "GLenum"
    },
    "SRC_ALPHA_SATURATE": {
      "!type": "GLenum"
    },
    "FUNC_ADD": {
      "!type": "GLenum"
    },
    "BLEND_EQUATION": {
      "!type": "GLenum"
    },
    "BLEND_EQUATION_RGB": {
      "!type": "GLenum"
    },
    "BLEND_EQUATION_ALPHA": {
      "!type": "GLenum"
    },
    "FUNC_SUBTRACT": {
      "!type": "GLenum"
    },
    "FUNC_REVERSE_SUBTRACT": {
      "!type": "GLenum"
    },
    "BLEND_DST_RGB": {
      "!type": "GLenum"
    },
    "BLEND_SRC_RGB": {
      "!type": "GLenum"
    },
    "BLEND_DST_ALPHA": {
      "!type": "GLenum"
    },
    "BLEND_SRC_ALPHA": {
      "!type": "GLenum"
    },
    "CONSTANT_COLOR": {
      "!type": "GLenum"
    },
    "ONE_MINUS_CONSTANT_COLOR": {
      "!type": "GLenum"
    },
    "CONSTANT_ALPHA": {
      "!type": "GLenum"
    },
    "ONE_MINUS_CONSTANT_ALPHA": {
      "!type": "GLenum"
    },
    "BLEND_COLOR": {
      "!type": "GLenum"
    },
    "ARRAY_BUFFER": {
      "!type": "GLenum"
    },
    "ELEMENT_ARRAY_BUFFER": {
      "!type": "GLenum"
    },
    "ARRAY_BUFFER_BINDING": {
      "!type": "GLenum"
    },
    "ELEMENT_ARRAY_BUFFER_BINDING": {
      "!type": "GLenum"
    },
    "STREAM_DRAW": {
      "!type": "GLenum"
    },
    "STATIC_DRAW": {
      "!type": "GLenum"
    },
    "DYNAMIC_DRAW": {
      "!type": "GLenum"
    },
    "BUFFER_SIZE": {
      "!type": "GLenum"
    },
    "BUFFER_USAGE": {
      "!type": "GLenum"
    },
    "CURRENT_VERTEX_ATTRIB": {
      "!type": "GLenum"
    },
    "FRONT": {
      "!type": "GLenum"
    },
    "BACK": {
      "!type": "GLenum"
    },
    "FRONT_AND_BACK": {
      "!type": "GLenum"
    },
    "CULL_FACE": {
      "!type": "GLenum"
    },
    "BLEND": {
      "!type": "GLenum"
    },
    "DITHER": {
      "!type": "GLenum"
    },
    "STENCIL_TEST": {
      "!type": "GLenum"
    },
    "DEPTH_TEST": {
      "!type": "GLenum"
    },
    "SCISSOR_TEST": {
      "!type": "GLenum"
    },
    "POLYGON_OFFSET_FILL": {
      "!type": "GLenum"
    },
    "SAMPLE_ALPHA_TO_COVERAGE": {
      "!type": "GLenum"
    },
    "SAMPLE_COVERAGE": {
      "!type": "GLenum"
    },
    "NO_ERROR": {
      "!type": "GLenum"
    },
    "INVALID_ENUM": {
      "!type": "GLenum"
    },
    "INVALID_VALUE": {
      "!type": "GLenum"
    },
    "INVALID_OPERATION": {
      "!type": "GLenum"
    },
    "OUT_OF_MEMORY": {
      "!type": "GLenum"
    },
    "CW": {
      "!type": "GLenum"
    },
    "CCW": {
      "!type": "GLenum"
    },
    "LINE_WIDTH": {
      "!type": "GLenum"
    },
    "ALIASED_POINT_SIZE_RANGE": {
      "!type": "GLenum"
    },
    "ALIASED_LINE_WIDTH_RANGE": {
      "!type": "GLenum"
    },
    "CULL_FACE_MODE": {
      "!type": "GLenum"
    },
    "FRONT_FACE": {
      "!type": "GLenum"
    },
    "DEPTH_RANGE": {
      "!type": "GLenum"
    },
    "DEPTH_WRITEMASK": {
      "!type": "GLenum"
    },
    "DEPTH_CLEAR_VALUE": {
      "!type": "GLenum"
    },
    "DEPTH_FUNC": {
      "!type": "GLenum"
    },
    "STENCIL_CLEAR_VALUE": {
      "!type": "GLenum"
    },
    "STENCIL_FUNC": {
      "!type": "GLenum"
    },
    "STENCIL_FAIL": {
      "!type": "GLenum"
    },
    "STENCIL_PASS_DEPTH_FAIL": {
      "!type": "GLenum"
    },
    "STENCIL_PASS_DEPTH_PASS": {
      "!type": "GLenum"
    },
    "STENCIL_REF": {
      "!type": "GLenum"
    },
    "STENCIL_VALUE_MASK": {
      "!type": "GLenum"
    },
    "STENCIL_WRITEMASK": {
      "!type": "GLenum"
    },
    "STENCIL_BACK_FUNC": {
      "!type": "GLenum"
    },
    "STENCIL_BACK_FAIL": {
      "!type": "GLenum"
    },
    "STENCIL_BACK_PASS_DEPTH_FAIL": {
      "!type": "GLenum"
    },
    "STENCIL_BACK_PASS_DEPTH_PASS": {
      "!type": "GLenum"
    },
    "STENCIL_BACK_REF": {
      "!type": "GLenum"
    },
    "STENCIL_BACK_VALUE_MASK": {
      "!type": "GLenum"
    },
    "STENCIL_BACK_WRITEMASK": {
      "!type": "GLenum"
    },
    "VIEWPORT": {
      "!type": "GLenum"
    },
    "SCISSOR_BOX": {
      "!type": "GLenum"
    },
    "COLOR_CLEAR_VALUE": {
      "!type": "GLenum"
    },
    "COLOR_WRITEMASK": {
      "!type": "GLenum"
    },
    "UNPACK_ALIGNMENT": {
      "!type": "GLenum"
    },
    "PACK_ALIGNMENT": {
      "!type": "GLenum"
    },
    "MAX_TEXTURE_SIZE": {
      "!type": "GLenum"
    },
    "MAX_VIEWPORT_DIMS": {
      "!type": "GLenum"
    },
    "SUBPIXEL_BITS": {
      "!type": "GLenum"
    },
    "RED_BITS": {
      "!type": "GLenum"
    },
    "GREEN_BITS": {
      "!type": "GLenum"
    },
    "BLUE_BITS": {
      "!type": "GLenum"
    },
    "ALPHA_BITS": {
      "!type": "GLenum"
    },
    "DEPTH_BITS": {
      "!type": "GLenum"
    },
    "STENCIL_BITS": {
      "!type": "GLenum"
    },
    "POLYGON_OFFSET_UNITS": {
      "!type": "GLenum"
    },
    "POLYGON_OFFSET_FACTOR": {
      "!type": "GLenum"
    },
    "TEXTURE_BINDING_2D": {
      "!type": "GLenum"
    },
    "SAMPLE_BUFFERS": {
      "!type": "GLenum"
    },
    "SAMPLES": {
      "!type": "GLenum"
    },
    "SAMPLE_COVERAGE_VALUE": {
      "!type": "GLenum"
    },
    "SAMPLE_COVERAGE_INVERT": {
      "!type": "GLenum"
    },
    "COMPRESSED_TEXTURE_FORMATS": {
      "!type": "GLenum"
    },
    "DONT_CARE": {
      "!type": "GLenum"
    },
    "FASTEST": {
      "!type": "GLenum"
    },
    "NICEST": {
      "!type": "GLenum"
    },
    "GENERATE_MIPMAP_HINT": {
      "!type": "GLenum"
    },
    "BYTE": {
      "!type": "GLenum"
    },
    "UNSIGNED_BYTE": {
      "!type": "GLenum"
    },
    "SHORT": {
      "!type": "GLenum"
    },
    "UNSIGNED_SHORT": {
      "!type": "GLenum"
    },
    "INT": {
      "!type": "GLenum"
    },
    "UNSIGNED_INT": {
      "!type": "GLenum"
    },
    "FLOAT": {
      "!type": "GLenum"
    },
    "DEPTH_COMPONENT": {
      "!type": "GLenum"
    },
    "ALPHA": {
      "!type": "GLenum"
    },
    "RGB": {
      "!type": "GLenum"
    },
    "RGBA": {
      "!type": "GLenum"
    },
    "LUMINANCE": {
      "!type": "GLenum"
    },
    "LUMINANCE_ALPHA": {
      "!type": "GLenum"
    },
    "UNSIGNED_SHORT_4_4_4_4": {
      "!type": "GLenum"
    },
    "UNSIGNED_SHORT_5_5_5_1": {
      "!type": "GLenum"
    },
    "UNSIGNED_SHORT_5_6_5": {
      "!type": "GLenum"
    },
    "FRAGMENT_SHADER": {
      "!type": "GLenum"
    },
    "VERTEX_SHADER": {
      "!type": "GLenum"
    },
    "MAX_VERTEX_ATTRIBS": {
      "!type": "GLenum"
    },
    "MAX_VERTEX_UNIFORM_VECTORS": {
      "!type": "GLenum"
    },
    "MAX_VARYING_VECTORS": {
      "!type": "GLenum"
    },
    "MAX_COMBINED_TEXTURE_IMAGE_UNITS": {
      "!type": "GLenum"
    },
    "MAX_VERTEX_TEXTURE_IMAGE_UNITS": {
      "!type": "GLenum"
    },
    "MAX_TEXTURE_IMAGE_UNITS": {
      "!type": "GLenum"
    },
    "MAX_FRAGMENT_UNIFORM_VECTORS": {
      "!type": "GLenum"
    },
    "SHADER_TYPE": {
      "!type": "GLenum"
    },
    "DELETE_STATUS": {
      "!type": "GLenum"
    },
    "LINK_STATUS": {
      "!type": "GLenum"
    },
    "VALIDATE_STATUS": {
      "!type": "GLenum"
    },
    "ATTACHED_SHADERS": {
      "!type": "GLenum"
    },
    "ACTIVE_UNIFORMS": {
      "!type": "GLenum"
    },
    "ACTIVE_ATTRIBUTES": {
      "!type": "GLenum"
    },
    "SHADING_LANGUAGE_VERSION": {
      "!type": "GLenum"
    },
    "CURRENT_PROGRAM": {
      "!type": "GLenum"
    },
    "NEVER": {
      "!type": "GLenum"
    },
    "LESS": {
      "!type": "GLenum"
    },
    "EQUAL": {
      "!type": "GLenum"
    },
    "LEQUAL": {
      "!type": "GLenum"
    },
    "GREATER": {
      "!type": "GLenum"
    },
    "NOTEQUAL": {
      "!type": "GLenum"
    },
    "GEQUAL": {
      "!type": "GLenum"
    },
    "ALWAYS": {
      "!type": "GLenum"
    },
    "KEEP": {
      "!type": "GLenum"
    },
    "REPLACE": {
      "!type": "GLenum"
    },
    "INCR": {
      "!type": "GLenum"
    },
    "DECR": {
      "!type": "GLenum"
    },
    "INVERT": {
      "!type": "GLenum"
    },
    "INCR_WRAP": {
      "!type": "GLenum"
    },
    "DECR_WRAP": {
      "!type": "GLenum"
    },
    "VENDOR": {
      "!type": "GLenum"
    },
    "RENDERER": {
      "!type": "GLenum"
    },
    "VERSION": {
      "!type": "GLenum"
    },
    "NEAREST": {
      "!type": "GLenum"
    },
    "LINEAR": {
      "!type": "GLenum"
    },
    "NEAREST_MIPMAP_NEAREST": {
      "!type": "GLenum"
    },
    "LINEAR_MIPMAP_NEAREST": {
      "!type": "GLenum"
    },
    "NEAREST_MIPMAP_LINEAR": {
      "!type": "GLenum"
    },
    "LINEAR_MIPMAP_LINEAR": {
      "!type": "GLenum"
    },
    "TEXTURE_MAG_FILTER": {
      "!type": "GLenum"
    },
    "TEXTURE_MIN_FILTER": {
      "!type": "GLenum"
    },
    "TEXTURE_WRAP_S": {
      "!type": "GLenum"
    },
    "TEXTURE_WRAP_T": {
      "!type": "GLenum"
    },
    "TEXTURE_2D": {
      "!type": "GLenum"
    },
    "TEXTURE": {
      "!type": "GLenum"
    },
    "TEXTURE_CUBE_MAP": {
      "!type": "GLenum"
    },
    "TEXTURE_BINDING_CUBE_MAP": {
      "!type": "GLenum"
    },
    "TEXTURE_CUBE_MAP_POSITIVE_X": {
      "!type": "GLenum"
    },
    "TEXTURE_CUBE_MAP_NEGATIVE_X": {
      "!type": "GLenum"
    },
    "TEXTURE_CUBE_MAP_POSITIVE_Y": {
      "!type": "GLenum"
    },
    "TEXTURE_CUBE_MAP_NEGATIVE_Y": {
      "!type": "GLenum"
    },
    "TEXTURE_CUBE_MAP_POSITIVE_Z": {
      "!type": "GLenum"
    },
    "TEXTURE_CUBE_MAP_NEGATIVE_Z": {
      "!type": "GLenum"
    },
    "MAX_CUBE_MAP_TEXTURE_SIZE": {
      "!type": "GLenum"
    },
    "TEXTURE0": {
      "!type": "GLenum"
    },
    "TEXTURE1": {
      "!type": "GLenum"
    },
    "TEXTURE2": {
      "!type": "GLenum"
    },
    "TEXTURE3": {
      "!type": "GLenum"
    },
    "TEXTURE4": {
      "!type": "GLenum"
    },
    "TEXTURE5": {
      "!type": "GLenum"
    },
    "TEXTURE6": {
      "!type": "GLenum"
    },
    "TEXTURE7": {
      "!type": "GLenum"
    },
    "TEXTURE8": {
      "!type": "GLenum"
    },
    "TEXTURE9": {
      "!type": "GLenum"
    },
    "TEXTURE10": {
      "!type": "GLenum"
    },
    "TEXTURE11": {
      "!type": "GLenum"
    },
    "TEXTURE12": {
      "!type": "GLenum"
    },
    "TEXTURE13": {
      "!type": "GLenum"
    },
    "TEXTURE14": {
      "!type": "GLenum"
    },
    "TEXTURE15": {
      "!type": "GLenum"
    },
    "TEXTURE16": {
      "!type": "GLenum"
    },
    "TEXTURE17": {
      "!type": "GLenum"
    },
    "TEXTURE18": {
      "!type": "GLenum"
    },
    "TEXTURE19": {
      "!type": "GLenum"
    },
    "TEXTURE20": {
      "!type": "GLenum"
    },
    "TEXTURE21": {
      "!type": "GLenum"
    },
    "TEXTURE22": {
      "!type": "GLenum"
    },
    "TEXTURE23": {
      "!type": "GLenum"
    },
    "TEXTURE24": {
      "!type": "GLenum"
    },
    "TEXTURE25": {
      "!type": "GLenum"
    },
    "TEXTURE26": {
      "!type": "GLenum"
    },
    "TEXTURE27": {
      "!type": "GLenum"
    },
    "TEXTURE28": {
      "!type": "GLenum"
    },
    "TEXTURE29": {
      "!type": "GLenum"
    },
    "TEXTURE30": {
      "!type": "GLenum"
    },
    "TEXTURE31": {
      "!type": "GLenum"
    },
    "ACTIVE_TEXTURE": {
      "!type": "GLenum"
    },
    "REPEAT": {
      "!type": "GLenum"
    },
    "CLAMP_TO_EDGE": {
      "!type": "GLenum"
    },
    "MIRRORED_REPEAT": {
      "!type": "GLenum"
    },
    "FLOAT_VEC2": {
      "!type": "GLenum"
    },
    "FLOAT_VEC3": {
      "!type": "GLenum"
    },
    "FLOAT_VEC4": {
      "!type": "GLenum"
    },
    "INT_VEC2": {
      "!type": "GLenum"
    },
    "INT_VEC3": {
      "!type": "GLenum"
    },
    "INT_VEC4": {
      "!type": "GLenum"
    },
    "BOOL": {
      "!type": "GLenum"
    },
    "BOOL_VEC2": {
      "!type": "GLenum"
    },
    "BOOL_VEC3": {
      "!type": "GLenum"
    },
    "BOOL_VEC4": {
      "!type": "GLenum"
    },
    "FLOAT_MAT2": {
      "!type": "GLenum"
    },
    "FLOAT_MAT3": {
      "!type": "GLenum"
    },
    "FLOAT_MAT4": {
      "!type": "GLenum"
    },
    "SAMPLER_2D": {
      "!type": "GLenum"
    },
    "SAMPLER_CUBE": {
      "!type": "GLenum"
    },
    "VERTEX_ATTRIB_ARRAY_ENABLED": {
      "!type": "GLenum"
    },
    "VERTEX_ATTRIB_ARRAY_SIZE": {
      "!type": "GLenum"
    },
    "VERTEX_ATTRIB_ARRAY_STRIDE": {
      "!type": "GLenum"
    },
    "VERTEX_ATTRIB_ARRAY_TYPE": {
      "!type": "GLenum"
    },
    "VERTEX_ATTRIB_ARRAY_NORMALIZED": {
      "!type": "GLenum"
    },
    "VERTEX_ATTRIB_ARRAY_POINTER": {
      "!type": "GLenum"
    },
    "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING": {
      "!type": "GLenum"
    },
    "IMPLEMENTATION_COLOR_READ_TYPE": {
      "!type": "GLenum"
    },
    "IMPLEMENTATION_COLOR_READ_FORMAT": {
      "!type": "GLenum"
    },
    "COMPILE_STATUS": {
      "!type": "GLenum"
    },
    "LOW_FLOAT": {
      "!type": "GLenum"
    },
    "MEDIUM_FLOAT": {
      "!type": "GLenum"
    },
    "HIGH_FLOAT": {
      "!type": "GLenum"
    },
    "LOW_INT": {
      "!type": "GLenum"
    },
    "MEDIUM_INT": {
      "!type": "GLenum"
    },
    "HIGH_INT": {
      "!type": "GLenum"
    },
    "FRAMEBUFFER": {
      "!type": "GLenum"
    },
    "RENDERBUFFER": {
      "!type": "GLenum"
    },
    "RGBA4": {
      "!type": "GLenum"
    },
    "RGB5_A1": {
      "!type": "GLenum"
    },
    "RGB565": {
      "!type": "GLenum"
    },
    "DEPTH_COMPONENT16": {
      "!type": "GLenum"
    },
    "STENCIL_INDEX": {
      "!type": "GLenum"
    },
    "STENCIL_INDEX8": {
      "!type": "GLenum"
    },
    "DEPTH_STENCIL": {
      "!type": "GLenum"
    },
    "RENDERBUFFER_WIDTH": {
      "!type": "GLenum"
    },
    "RENDERBUFFER_HEIGHT": {
      "!type": "GLenum"
    },
    "RENDERBUFFER_INTERNAL_FORMAT": {
      "!type": "GLenum"
    },
    "RENDERBUFFER_RED_SIZE": {
      "!type": "GLenum"
    },
    "RENDERBUFFER_GREEN_SIZE": {
      "!type": "GLenum"
    },
    "RENDERBUFFER_BLUE_SIZE": {
      "!type": "GLenum"
    },
    "RENDERBUFFER_ALPHA_SIZE": {
      "!type": "GLenum"
    },
    "RENDERBUFFER_DEPTH_SIZE": {
      "!type": "GLenum"
    },
    "RENDERBUFFER_STENCIL_SIZE": {
      "!type": "GLenum"
    },
    "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE": {
      "!type": "GLenum"
    },
    "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME": {
      "!type": "GLenum"
    },
    "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL": {
      "!type": "GLenum"
    },
    "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE": {
      "!type": "GLenum"
    },
    "COLOR_ATTACHMENT0": {
      "!type": "GLenum"
    },
    "DEPTH_ATTACHMENT": {
      "!type": "GLenum"
    },
    "STENCIL_ATTACHMENT": {
      "!type": "GLenum"
    },
    "DEPTH_STENCIL_ATTACHMENT": {
      "!type": "GLenum"
    },
    "NONE": {
      "!type": "GLenum"
    },
    "FRAMEBUFFER_COMPLETE": {
      "!type": "GLenum"
    },
    "FRAMEBUFFER_INCOMPLETE_ATTACHMENT": {
      "!type": "GLenum"
    },
    "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT": {
      "!type": "GLenum"
    },
    "FRAMEBUFFER_INCOMPLETE_DIMENSIONS": {
      "!type": "GLenum"
    },
    "FRAMEBUFFER_UNSUPPORTED": {
      "!type": "GLenum"
    },
    "FRAMEBUFFER_BINDING": {
      "!type": "GLenum"
    },
    "RENDERBUFFER_BINDING": {
      "!type": "GLenum"
    },
    "MAX_RENDERBUFFER_SIZE": {
      "!type": "GLenum"
    },
    "INVALID_FRAMEBUFFER_OPERATION": {
      "!type": "GLenum"
    },
    "UNPACK_FLIP_Y_WEBGL": {
      "!type": "GLenum"
    },
    "UNPACK_PREMULTIPLY_ALPHA_WEBGL": {
      "!type": "GLenum"
    },
    "CONTEXT_LOST_WEBGL": {
      "!type": "GLenum"
    },
    "UNPACK_COLORSPACE_CONVERSION_WEBGL": {
      "!type": "GLenum"
    },
    "BROWSER_DEFAULT_WEBGL": {
      "!type": "GLenum"
    },
    "canvas": {
      "!type": "HTMLCanvasElement"
    },
    "drawingBufferWidth": {
      "!type": "GLsizei"
    },
    "drawingBufferHeight": {
      "!type": "GLsizei"
    },
    "getContextAttributes": {
      "!type": "fn() -> WebGLContextAttributes"
    },
    "isContextLost": {
      "!type": "fn() -> bool"
    },
    "getSupportedExtensions": {
      "!type": "fn() -> [string]"
    },
    "getExtension": {
      "!type": "fn(name: string) -> object"
    },
    "activeTexture": {
      "!type": "fn(texture: GLenum)"
    },
    "attachShader": {
      "!type": "fn(program: WebGLProgram, shader: WebGLShader)"
    },
    "bindAttribLocation": {
      "!type": "fn(program: WebGLProgram, index: GLuint, name: string)"
    },
    "bindBuffer": {
      "!type": "fn(target: GLenum, buffer: WebGLBuffer)"
    },
    "bindFramebuffer": {
      "!type": "fn(target: GLenum, framebuffer: WebGLFramebuffer)"
    },
    "bindRenderbuffer": {
      "!type": "fn(target: GLenum, renderbuffer: WebGLRenderbuffer)"
    },
    "bindTexture": {
      "!type": "fn(target: GLenum, texture: WebGLTexture)"
    },
    "blendColor": {
      "!type": "fn(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat)"
    },
    "blendEquation": {
      "!type": "fn(mode: GLenum)"
    },
    "blendEquationSeparate": {
      "!type": "fn(modeRGB: GLenum, modeAlpha: GLenum)"
    },
    "blendFunc": {
      "!type": "fn(sfactor: GLenum, dfactor: GLenum)"
    },
    "blendFuncSeparate": {
      "!type": "fn(srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum)"
    },
    "bufferData": {
      "!type": "fn(target: GLenum, size: GLsizeiptr, usage: GLenum)"
    },
    "bufferSubData": {
      "!type": "fn(target: GLenum, offset: GLintptr, data: ArrayBufferView)"
    },
    "checkFramebufferStatus": {
      "!type": "fn(target: GLenum) -> GLenum"
    },
    "clear": {
      "!type": "fn(mask: GLbitfield)"
    },
    "clearColor": {
      "!type": "fn(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat)"
    },
    "clearDepth": {
      "!type": "fn(depth: GLclampf)"
    },
    "clearStencil": {
      "!type": "fn(s: GLint)"
    },
    "colorMask": {
      "!type": "fn(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean)"
    },
    "compileShader": {
      "!type": "fn(shader: WebGLShader)"
    },
    "compressedTexImage2D": {
      "!type": "fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, data: ArrayBufferView)"
    },
    "compressedTexSubImage2D": {
      "!type": "fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, data: ArrayBufferView)"
    },
    "copyTexImage2D": {
      "!type": "fn(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint)"
    },
    "copyTexSubImage2D": {
      "!type": "fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei)"
    },
    "createBuffer": {
      "!type": "fn() -> WebGLBuffer"
    },
    "createFramebuffer": {
      "!type": "fn() -> WebGLFramebuffer"
    },
    "createProgram": {
      "!type": "fn() -> WebGLProgram"
    },
    "createRenderbuffer": {
      "!type": "fn() -> WebGLRenderbuffer"
    },
    "createShader": {
      "!type": "fn(type: GLenum) -> WebGLShader"
    },
    "createTexture": {
      "!type": "fn() -> WebGLTexture"
    },
    "cullFace": {
      "!type": "fn(mode: GLenum)"
    },
    "deleteBuffer": {
      "!type": "fn(buffer: WebGLBuffer)"
    },
    "deleteFramebuffer": {
      "!type": "fn(framebuffer: WebGLFramebuffer)"
    },
    "deleteProgram": {
      "!type": "fn(program: WebGLProgram)"
    },
    "deleteRenderbuffer": {
      "!type": "fn(renderbuffer: WebGLRenderbuffer)"
    },
    "deleteShader": {
      "!type": "fn(shader: WebGLShader)"
    },
    "deleteTexture": {
      "!type": "fn(texture: WebGLTexture)"
    },
    "depthFunc": {
      "!type": "fn(func: GLenum)"
    },
    "depthMask": {
      "!type": "fn(flag: GLboolean)"
    },
    "depthRange": {
      "!type": "fn(zNear: GLclampf, zFar: GLclampf)"
    },
    "detachShader": {
      "!type": "fn(program: WebGLProgram, shader: WebGLShader)"
    },
    "disable": {
      "!type": "fn(cap: GLenum)"
    },
    "disableVertexAttribArray": {
      "!type": "fn(index: GLuint)"
    },
    "drawArrays": {
      "!type": "fn(mode: GLenum, first: GLint, count: GLsizei)"
    },
    "drawElements": {
      "!type": "fn(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr)"
    },
    "enable": {
      "!type": "fn(cap: GLenum)"
    },
    "enableVertexAttribArray": {
      "!type": "fn(index: GLuint)"
    },
    "finish": {
      "!type": "fn()"
    },
    "flush": {
      "!type": "fn()"
    },
    "framebufferRenderbuffer": {
      "!type": "fn(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: WebGLRenderbuffer)"
    },
    "framebufferTexture2D": {
      "!type": "fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: WebGLTexture, level: GLint)"
    },
    "frontFace": {
      "!type": "fn(mode: GLenum)"
    },
    "generateMipmap": {
      "!type": "fn(target: GLenum)"
    },
    "getActiveAttrib": {
      "!type": "fn(program: WebGLProgram, index: GLuint) -> WebGLActiveInfo"
    },
    "getActiveUniform": {
      "!type": "fn(program: WebGLProgram, index: GLuint) -> WebGLActiveInfo"
    },
    "getAttachedShaders": {
      "!type": "fn(program: WebGLProgram) -> [WebGLShader]"
    },
    "getAttribLocation": {
      "!type": "fn(program: WebGLProgram, name: string) -> GLint"
    },
    "getBufferParameter": {
      "!type": "fn(target: GLenum, pname: GLenum) -> ?"
    },
    "getParameter": {
      "!type": "fn(pname: GLenum) -> ?"
    },
    "getError": {
      "!type": "fn() -> GLenum"
    },
    "getFramebufferAttachmentParameter": {
      "!type": "fn(target: GLenum, attachment: GLenum, pname: GLenum) -> ?"
    },
    "getProgramParameter": {
      "!type": "fn(program: WebGLProgram, pname: GLenum) -> ?"
    },
    "getProgramInfoLog": {
      "!type": "fn(program: WebGLProgram) -> string"
    },
    "getRenderbufferParameter": {
      "!type": "fn(target: GLenum, pname: GLenum) -> ?"
    },
    "getShaderParameter": {
      "!type": "fn(shader: WebGLShader, pname: GLenum) -> ?"
    },
    "getShaderPrecisionFormat": {
      "!type": "fn(shadertype: GLenum, precisiontype: GLenum) -> WebGLShaderPrecisionFormat"
    },
    "getShaderInfoLog": {
      "!type": "fn(shader: WebGLShader) -> string"
    },
    "getShaderSource": {
      "!type": "fn(shader: WebGLShader) -> string"
    },
    "getTexParameter": {
      "!type": "fn(target: GLenum, pname: GLenum) -> ?"
    },
    "getUniform": {
      "!type": "fn(program: WebGLProgram, location: WebGLUniformLocation) -> ?"
    },
    "getUniformLocation": {
      "!type": "fn(program: WebGLProgram, name: string) -> WebGLUniformLocation"
    },
    "getVertexAttrib": {
      "!type": "fn(index: GLuint, pname: GLenum) -> ?"
    },
    "getVertexAttribOffset": {
      "!type": "fn(index: GLuint, pname: GLenum) -> GLsizeiptr"
    },
    "hint": {
      "!type": "fn(target: GLenum, mode: GLenum)"
    },
    "isBuffer": {
      "!type": "fn(buffer: WebGLBuffer) -> GLboolean"
    },
    "isEnabled": {
      "!type": "fn(cap: GLenum) -> GLboolean"
    },
    "isFramebuffer": {
      "!type": "fn(framebuffer: WebGLFramebuffer) -> GLboolean"
    },
    "isProgram": {
      "!type": "fn(program: WebGLProgram) -> GLboolean"
    },
    "isRenderbuffer": {
      "!type": "fn(renderbuffer: WebGLRenderbuffer) -> GLboolean"
    },
    "isShader": {
      "!type": "fn(shader: WebGLShader) -> GLboolean"
    },
    "isTexture": {
      "!type": "fn(texture: WebGLTexture) -> GLboolean"
    },
    "lineWidth": {
      "!type": "fn(width: GLfloat)"
    },
    "linkProgram": {
      "!type": "fn(program: WebGLProgram)"
    },
    "pixelStorei": {
      "!type": "fn(pname: GLenum, param: GLint)"
    },
    "polygonOffset": {
      "!type": "fn(factor: GLfloat, units: GLfloat)"
    },
    "readPixels": {
      "!type": "fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: ArrayBufferView)"
    },
    "renderbufferStorage": {
      "!type": "fn(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei)"
    },
    "sampleCoverage": {
      "!type": "fn(value: GLclampf, invert: GLboolean)"
    },
    "scissor": {
      "!type": "fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei)"
    },
    "shaderSource": {
      "!type": "fn(shader: WebGLShader, source: string)"
    },
    "stencilFunc": {
      "!type": "fn(func: GLenum, ref: GLint, mask: GLuint)"
    },
    "stencilFuncSeparate": {
      "!type": "fn(face: GLenum, func: GLenum, ref: GLint, mask: GLuint)"
    },
    "stencilMask": {
      "!type": "fn(mask: GLuint)"
    },
    "stencilMaskSeparate": {
      "!type": "fn(face: GLenum, mask: GLuint)"
    },
    "stencilOp": {
      "!type": "fn(fail: GLenum, zfail: GLenum, zpass: GLenum)"
    },
    "stencilOpSeparate": {
      "!type": "fn(face: GLenum, fail: GLenum, zfail: GLenum, zpass: GLenum)"
    },
    "texImage2D": {
      "!type": "fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: ArrayBufferView)"
    },
    "texParameterf": {
      "!type": "fn(target: GLenum, pname: GLenum, param: GLfloat)"
    },
    "texParameteri": {
      "!type": "fn(target: GLenum, pname: GLenum, param: GLint)"
    },
    "texSubImage2D": {
      "!type": "fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: ArrayBufferView)"
    },
    "uniform1f": {
      "!type": "fn(location: WebGLUniformLocation, x: GLfloat)"
    },
    "uniform1fv": {
      "!type": "fn(location: WebGLUniformLocation, v: Float32Array)"
    },
    "uniform1i": {
      "!type": "fn(location: WebGLUniformLocation, x: GLint)"
    },
    "uniform1iv": {
      "!type": "fn(location: WebGLUniformLocation, v: Int32Array)"
    },
    "uniform2f": {
      "!type": "fn(location: WebGLUniformLocation, x: GLfloat, y: GLfloat)"
    },
    "uniform2fv": {
      "!type": "fn(location: WebGLUniformLocation, v: Float32Array)"
    },
    "uniform2i": {
      "!type": "fn(location: WebGLUniformLocation, x: GLint, y: GLint)"
    },
    "uniform2iv": {
      "!type": "fn(location: WebGLUniformLocation, v: Int32Array)"
    },
    "uniform3f": {
      "!type": "fn(location: WebGLUniformLocation, x: GLfloat, y: GLfloat, z: GLfloat)"
    },
    "uniform3fv": {
      "!type": "fn(location: WebGLUniformLocation, v: Float32Array)"
    },
    "uniform3i": {
      "!type": "fn(location: WebGLUniformLocation, x: GLint, y: GLint, z: GLint)"
    },
    "uniform3iv": {
      "!type": "fn(location: WebGLUniformLocation, v: Int32Array)"
    },
    "uniform4f": {
      "!type": "fn(location: WebGLUniformLocation, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat)"
    },
    "uniform4fv": {
      "!type": "fn(location: WebGLUniformLocation, v: Float32Array)"
    },
    "uniform4i": {
      "!type": "fn(location: WebGLUniformLocation, x: GLint, y: GLint, z: GLint, w: GLint)"
    },
    "uniform4iv": {
      "!type": "fn(location: WebGLUniformLocation, v: Int32Array)"
    },
    "uniformMatrix2fv": {
      "!type": "fn(location: WebGLUniformLocation, transpose: GLboolean, value: Float32Array)"
    },
    "uniformMatrix3fv": {
      "!type": "fn(location: WebGLUniformLocation, transpose: GLboolean, value: Float32Array)"
    },
    "uniformMatrix4fv": {
      "!type": "fn(location: WebGLUniformLocation, transpose: GLboolean, value: Float32Array)"
    },
    "useProgram": {
      "!type": "fn(program: WebGLProgram)"
    },
    "validateProgram": {
      "!type": "fn(program: WebGLProgram)"
    },
    "vertexAttrib1f": {
      "!type": "fn(indx: GLuint, x: GLfloat)"
    },
    "vertexAttrib1fv": {
      "!type": "fn(indx: GLuint, values: Float32Array)"
    },
    "vertexAttrib2f": {
      "!type": "fn(indx: GLuint, x: GLfloat, y: GLfloat)"
    },
    "vertexAttrib2fv": {
      "!type": "fn(indx: GLuint, values: Float32Array)"
    },
    "vertexAttrib3f": {
      "!type": "fn(indx: GLuint, x: GLfloat, y: GLfloat, z: GLfloat)"
    },
    "vertexAttrib3fv": {
      "!type": "fn(indx: GLuint, values: Float32Array)"
    },
    "vertexAttrib4f": {
      "!type": "fn(indx: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat)"
    },
    "vertexAttrib4fv": {
      "!type": "fn(indx: GLuint, values: Float32Array)"
    },
    "vertexAttribPointer": {
      "!type": "fn(indx: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, offset: GLintptr)"
    },
    "viewport": {
      "!type": "fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei)"
    }
  },
  "WebSocket": {
    "!type": "fn(url: string, protocols: [string])",
    "prototype": {
      "url": {
        "!type": "string"
      },
      "CONNECTING": {
        "!type": "number"
      },
      "OPEN": {
        "!type": "number"
      },
      "CLOSING": {
        "!type": "number"
      },
      "CLOSED": {
        "!type": "number"
      },
      "readyState": {
        "!type": "number"
      },
      "bufferedAmount": {
        "!type": "number"
      },
      "onopen": {
        "!type": "fn(+Event)"
      },
      "onerror": {
        "!type": "fn(+Event)"
      },
      "onclose": {
        "!type": "fn(+Event)"
      },
      "extensions": {
        "!type": "string"
      },
      "protocol": {
        "!type": "string"
      },
      "close": {
        "!type": "fn(code?: number, reason?: string)"
      },
      "onmessage": {
        "!type": "fn(+Event)"
      },
      "binaryType": {
        "!type": "BinaryType"
      },
      "send": {
        "!type": "fn(data: string)"
      },
      "queryInterface": {
        "!type": "fn(iid: IID) -> nsISupports"
      }
    }
  },
  "WheelEvent": {
    "!type": "fn(type: string, eventInitDict?: WheelEventInit)",
    "prototype": {
      "DOM_DELTA_PIXEL": {
        "!type": "number"
      },
      "DOM_DELTA_LINE": {
        "!type": "number"
      },
      "DOM_DELTA_PAGE": {
        "!type": "number"
      },
      "deltaX": {
        "!type": "number"
      },
      "deltaY": {
        "!type": "number"
      },
      "deltaZ": {
        "!type": "number"
      },
      "deltaMode": {
        "!type": "number"
      }
    }
  },
  "ApplicationCache": {},
  "Window": {
    "window": {
      "!type": "Window"
    },
    "self": {
      "!type": "WindowProxy"
    },
    "document": {
      "!type": "Document"
    },
    "name": {
      "!type": "string"
    },
    "location": {
      "!type": "Location"
    },
    "history": {
      "!type": "History"
    },
    "locationbar": {
      "!type": "BarProp"
    },
    "menubar": {
      "!type": "BarProp"
    },
    "personalbar": {
      "!type": "BarProp"
    },
    "scrollbars": {
      "!type": "BarProp"
    },
    "statusbar": {
      "!type": "BarProp"
    },
    "toolbar": {
      "!type": "BarProp"
    },
    "status": {
      "!type": "string"
    },
    "close": {
      "!type": "fn()"
    },
    "closed": {
      "!type": "bool"
    },
    "stop": {
      "!type": "fn()"
    },
    "focus": {
      "!type": "fn()"
    },
    "blur": {
      "!type": "fn()"
    },
    "frames": {
      "!type": "WindowProxy"
    },
    "length": {
      "!type": "number"
    },
    "top": {
      "!type": "WindowProxy"
    },
    "opener": {
      "!type": "?"
    },
    "parent": {
      "!type": "WindowProxy"
    },
    "frameElement": {
      "!type": "Element"
    },
    "open": {
      "!type": "fn(url?: string, target?: string, features?: string) -> WindowProxy"
    },
    "navigator": {
      "!type": "Navigator"
    },
    "external": {
      "!type": "External"
    },
    "applicationCache": {
      "!type": "ApplicationCache"
    },
    "alert": {
      "!type": "fn()"
    },
    "confirm": {
      "!type": "fn(message?: string) -> bool"
    },
    "prompt": {
      "!type": "fn(message?: string, default?: string) -> string"
    },
    "print": {
      "!type": "fn()"
    },
    "showModalDialog": {
      "!type": "fn(url: string, argument?: ?, options?: string) -> ?"
    },
    "postMessage": {
      "!type": "fn(message: ?, targetOrigin: string, transfer?: [Transferable])"
    },
    "captureEvents": {
      "!type": "fn()"
    },
    "releaseEvents": {
      "!type": "fn()"
    },
    "getSelection": {
      "!type": "fn() -> Selection"
    },
    "getComputedStyle": {
      "!type": "fn(elt: Element, pseudoElt?: string) -> CSSStyleDeclaration"
    },
    "matchMedia": {
      "!type": "fn(query: string) -> MediaQueryList"
    },
    "screen": {
      "!type": "Screen"
    },
    "moveTo": {
      "!type": "fn(x: number, y: number)"
    },
    "moveBy": {
      "!type": "fn(x: number, y: number)"
    },
    "resizeTo": {
      "!type": "fn(x: number, y: number)"
    },
    "resizeBy": {
      "!type": "fn(x: number, y: number)"
    },
    "innerWidth": {
      "!type": "?"
    },
    "innerHeight": {
      "!type": "?"
    },
    "scroll": {
      "!type": "fn(x: number, y: number)"
    },
    "scrollTo": {
      "!type": "fn(x: number, y: number)"
    },
    "scrollBy": {
      "!type": "fn(x: number, y: number)"
    },
    "scrollX": {
      "!type": "number"
    },
    "pageXOffset": {
      "!type": "number"
    },
    "scrollY": {
      "!type": "number"
    },
    "pageYOffset": {
      "!type": "number"
    },
    "screenX": {
      "!type": "?"
    },
    "screenY": {
      "!type": "?"
    },
    "outerWidth": {
      "!type": "?"
    },
    "outerHeight": {
      "!type": "?"
    },
    "requestAnimationFrame": {
      "!type": "fn(callback: FrameRequestCallback) -> number"
    },
    "cancelAnimationFrame": {
      "!type": "fn(handle: number)"
    },
    "performance": {
      "!type": "Performance"
    },
    "caches": {
      "!type": "CacheStorage"
    },
    "getDefaultComputedStyle": {
      "!type": "fn(elt: Element, pseudoElt?: string) -> CSSStyleDeclaration"
    },
    "scrollByLines": {
      "!type": "fn(numLines: number, options?: ScrollOptions)"
    },
    "scrollByPages": {
      "!type": "fn(numPages: number, options?: ScrollOptions)"
    },
    "sizeToContent": {
      "!type": "fn()"
    },
    "controllers": {
      "!type": "MozControllers"
    },
    "realFrameElement": {
      "!type": "Element"
    },
    "devicePixelRatio": {
      "!type": "number"
    },
    "scrollMaxX": {
      "!type": "number"
    },
    "scrollMaxY": {
      "!type": "number"
    },
    "fullScreen": {
      "!type": "bool"
    },
    "back": {
      "!type": "fn()"
    },
    "forward": {
      "!type": "fn()"
    },
    "home": {
      "!type": "fn()"
    },
    "updateCommands": {
      "!type": "fn(action: string, sel?: Selection, reason?: number)"
    },
    "find": {
      "!type": "fn(str?: string, caseSensitive?: bool, backwards?: bool, wrapAround?: bool, wholeWord?: bool, searchInFrames?: bool, showDialog?: bool) -> bool"
    },
    "onwheel": {
      "!type": "fn(+Event)"
    },
    "ondevicemotion": {
      "!type": "fn(+Event)"
    },
    "ondeviceorientation": {
      "!type": "fn(+Event)"
    },
    "ondeviceproximity": {
      "!type": "fn(+Event)"
    },
    "onuserproximity": {
      "!type": "fn(+Event)"
    },
    "ondevicelight": {
      "!type": "fn(+Event)"
    },
    "dump": {
      "!type": "fn(str: string)"
    },
    "setResizable": {
      "!type": "fn(resizable: bool)"
    },
    "openDialog": {
      "!type": "fn(url?: string, name?: string, options?: string, extraArguments: ?) -> WindowProxy"
    },
    "content": {
      "!type": "object"
    },
    "_content": {
      "!type": "object"
    },
    "getInterface": {
      "!type": "fn(iid: IID) -> ?"
    },
    "windowRoot": {
      "!type": "WindowRoot"
    },
    "console": {
      "!type": "Console"
    },
    "sidebar": {
      "!type": "?"
    },
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    },
    "onabort": {
      "!type": "fn(+Event)"
    },
    "onblur": {
      "!type": "fn(+Event)"
    },
    "onfocus": {
      "!type": "fn(+Event)"
    },
    "oncanplay": {
      "!type": "fn(+Event)"
    },
    "oncanplaythrough": {
      "!type": "fn(+Event)"
    },
    "onchange": {
      "!type": "fn(+Event)"
    },
    "onclick": {
      "!type": "fn(+Event)"
    },
    "oncontextmenu": {
      "!type": "fn(+Event)"
    },
    "ondblclick": {
      "!type": "fn(+Event)"
    },
    "ondrag": {
      "!type": "fn(+Event)"
    },
    "ondragend": {
      "!type": "fn(+Event)"
    },
    "ondragenter": {
      "!type": "fn(+Event)"
    },
    "ondragleave": {
      "!type": "fn(+Event)"
    },
    "ondragover": {
      "!type": "fn(+Event)"
    },
    "ondragstart": {
      "!type": "fn(+Event)"
    },
    "ondrop": {
      "!type": "fn(+Event)"
    },
    "ondurationchange": {
      "!type": "fn(+Event)"
    },
    "onemptied": {
      "!type": "fn(+Event)"
    },
    "onended": {
      "!type": "fn(+Event)"
    },
    "oninput": {
      "!type": "fn(+Event)"
    },
    "oninvalid": {
      "!type": "fn(+Event)"
    },
    "onkeydown": {
      "!type": "fn(+Event)"
    },
    "onkeypress": {
      "!type": "fn(+Event)"
    },
    "onkeyup": {
      "!type": "fn(+Event)"
    },
    "onload": {
      "!type": "fn(+Event)"
    },
    "onloadeddata": {
      "!type": "fn(+Event)"
    },
    "onloadedmetadata": {
      "!type": "fn(+Event)"
    },
    "onloadstart": {
      "!type": "fn(+Event)"
    },
    "onmousedown": {
      "!type": "fn(+Event)"
    },
    "onmouseenter": {
      "!type": "fn(+Event)"
    },
    "onmouseleave": {
      "!type": "fn(+Event)"
    },
    "onmousemove": {
      "!type": "fn(+Event)"
    },
    "onmouseout": {
      "!type": "fn(+Event)"
    },
    "onmouseover": {
      "!type": "fn(+Event)"
    },
    "onmouseup": {
      "!type": "fn(+Event)"
    },
    "onpause": {
      "!type": "fn(+Event)"
    },
    "onplay": {
      "!type": "fn(+Event)"
    },
    "onplaying": {
      "!type": "fn(+Event)"
    },
    "onprogress": {
      "!type": "fn(+Event)"
    },
    "onratechange": {
      "!type": "fn(+Event)"
    },
    "onreset": {
      "!type": "fn(+Event)"
    },
    "onresize": {
      "!type": "fn(+Event)"
    },
    "onscroll": {
      "!type": "fn(+Event)"
    },
    "onseeked": {
      "!type": "fn(+Event)"
    },
    "onseeking": {
      "!type": "fn(+Event)"
    },
    "onselect": {
      "!type": "fn(+Event)"
    },
    "onshow": {
      "!type": "fn(+Event)"
    },
    "onstalled": {
      "!type": "fn(+Event)"
    },
    "onsubmit": {
      "!type": "fn(+Event)"
    },
    "onsuspend": {
      "!type": "fn(+Event)"
    },
    "ontimeupdate": {
      "!type": "fn(+Event)"
    },
    "onvolumechange": {
      "!type": "fn(+Event)"
    },
    "onwaiting": {
      "!type": "fn(+Event)"
    },
    "onpointercancel": {
      "!type": "fn(+Event)"
    },
    "onpointerdown": {
      "!type": "fn(+Event)"
    },
    "onpointerup": {
      "!type": "fn(+Event)"
    },
    "onpointermove": {
      "!type": "fn(+Event)"
    },
    "onpointerout": {
      "!type": "fn(+Event)"
    },
    "onpointerover": {
      "!type": "fn(+Event)"
    },
    "onpointerenter": {
      "!type": "fn(+Event)"
    },
    "onpointerleave": {
      "!type": "fn(+Event)"
    },
    "ongotpointercapture": {
      "!type": "fn(+Event)"
    },
    "onlostpointercapture": {
      "!type": "fn(+Event)"
    },
    "onmozfullscreenchange": {
      "!type": "fn(+Event)"
    },
    "onmozfullscreenerror": {
      "!type": "fn(+Event)"
    },
    "onmozpointerlockchange": {
      "!type": "fn(+Event)"
    },
    "onmozpointerlockerror": {
      "!type": "fn(+Event)"
    },
    "onafterprint": {
      "!type": "fn(+Event)"
    },
    "onbeforeprint": {
      "!type": "fn(+Event)"
    },
    "onbeforeunload": {
      "!type": "OnBeforeUnloadEventHandler"
    },
    "onhashchange": {
      "!type": "fn(+Event)"
    },
    "onlanguagechange": {
      "!type": "fn(+Event)"
    },
    "onmessage": {
      "!type": "fn(+Event)"
    },
    "onoffline": {
      "!type": "fn(+Event)"
    },
    "ononline": {
      "!type": "fn(+Event)"
    },
    "onpagehide": {
      "!type": "fn(+Event)"
    },
    "onpageshow": {
      "!type": "fn(+Event)"
    },
    "onpopstate": {
      "!type": "fn(+Event)"
    },
    "onunload": {
      "!type": "fn(+Event)"
    },
    "setTimeout": {
      "!type": "fn(handler: Function, timeout?: number, arguments: ?) -> number"
    },
    "clearTimeout": {
      "!type": "fn(handle?: number)"
    },
    "setInterval": {
      "!type": "fn(handler: Function, timeout?: number, arguments: ?) -> number"
    },
    "clearInterval": {
      "!type": "fn(handle?: number)"
    },
    "btoa": {
      "!type": "fn(btoa: string) -> string"
    },
    "atob": {
      "!type": "fn(atob: string) -> string"
    },
    "sessionStorage": {
      "!type": "Storage"
    },
    "localStorage": {
      "!type": "Storage"
    },
    "indexedDB": {
      "!type": "IDBFactory"
    },
    "speechSynthesis": {
      "!type": "SpeechSynthesis"
    },
    "dialogArguments": {
      "!type": "?"
    },
    "returnValue": {
      "!type": "?"
    },
    "ontouchstart": {
      "!type": "fn(+Event)"
    },
    "ontouchend": {
      "!type": "fn(+Event)"
    },
    "ontouchmove": {
      "!type": "fn(+Event)"
    },
    "ontouchcancel": {
      "!type": "fn(+Event)"
    },
    "onerror": {
      "!type": "OnErrorEventHandler"
    },
    "STATE_MAXIMIZED": {
      "!type": "number"
    },
    "STATE_MINIMIZED": {
      "!type": "number"
    },
    "STATE_NORMAL": {
      "!type": "number"
    },
    "STATE_FULLSCREEN": {
      "!type": "number"
    },
    "windowState": {
      "!type": "number"
    },
    "browserDOMWindow": {
      "!type": "nsIBrowserDOMWindow"
    },
    "getAttention": {
      "!type": "fn()"
    },
    "getAttentionWithCycleCount": {
      "!type": "fn(aCycleCount: number)"
    },
    "setCursor": {
      "!type": "fn(cursor: string)"
    },
    "maximize": {
      "!type": "fn()"
    },
    "minimize": {
      "!type": "fn()"
    },
    "restore": {
      "!type": "fn()"
    },
    "notifyDefaultButtonLoaded": {
      "!type": "fn(defaultButton: Element)"
    },
    "messageManager": {
      "!type": "nsIMessageBroadcaster"
    },
    "getGroupMessageManager": {
      "!type": "fn(aGroup: string) -> nsIMessageBroadcaster"
    },
    "beginWindowMove": {
      "!type": "fn(mouseDownEvent: Event, panel?: Element)"
    },
    "fetch": {
      "!type": "fn(input: RequestInfo, init?: RequestInit) -> +Promise[value=Response]"
    }
  },
  "ChromeWindow": {
    "STATE_MAXIMIZED": {
      "!type": "number"
    },
    "STATE_MINIMIZED": {
      "!type": "number"
    },
    "STATE_NORMAL": {
      "!type": "number"
    },
    "STATE_FULLSCREEN": {
      "!type": "number"
    },
    "windowState": {
      "!type": "number"
    },
    "browserDOMWindow": {
      "!type": "nsIBrowserDOMWindow"
    },
    "getAttention": {
      "!type": "fn()"
    },
    "getAttentionWithCycleCount": {
      "!type": "fn(aCycleCount: number)"
    },
    "setCursor": {
      "!type": "fn(cursor: string)"
    },
    "maximize": {
      "!type": "fn()"
    },
    "minimize": {
      "!type": "fn()"
    },
    "restore": {
      "!type": "fn()"
    },
    "notifyDefaultButtonLoaded": {
      "!type": "fn(defaultButton: Element)"
    },
    "messageManager": {
      "!type": "nsIMessageBroadcaster"
    },
    "getGroupMessageManager": {
      "!type": "fn(aGroup: string) -> nsIMessageBroadcaster"
    },
    "beginWindowMove": {
      "!type": "fn(mouseDownEvent: Event, panel?: Element)"
    }
  },
  "Worker": {
    "!type": "fn(scriptURL: string)",
    "prototype": {
      "terminate": {
        "!type": "fn()"
      },
      "postMessage": {
        "!type": "fn(message: ?, transfer?: [?])"
      },
      "onmessage": {
        "!type": "fn(+Event)"
      },
      "onerror": {
        "!type": "fn(+Event)"
      }
    }
  },
  "ChromeWorker": {
    "!type": "fn(scriptURL: string)",
    "prototype": {}
  },
  "WorkerDebuggerGlobalScope": {
    "global": {
      "!type": "object"
    },
    "createSandbox": {
      "!type": "fn(name: string, prototype: object) -> object"
    },
    "loadSubScript": {
      "!type": "fn(url: string, sandbox?: object)"
    },
    "enterEventLoop": {
      "!type": "fn()"
    },
    "leaveEventLoop": {
      "!type": "fn()"
    },
    "postMessage": {
      "!type": "fn(message: string)"
    },
    "onmessage": {
      "!type": "fn(+Event)"
    },
    "setImmediate": {
      "!type": "fn(handler: Function)"
    },
    "reportError": {
      "!type": "fn(message: string)"
    },
    "dump": {
      "!type": "fn(string?: string)"
    }
  },
  "WorkerGlobalScope": {
    "self": {
      "!type": "WorkerGlobalScope"
    },
    "console": {
      "!type": "Console"
    },
    "location": {
      "!type": "WorkerLocation"
    },
    "close": {
      "!type": "fn()"
    },
    "onerror": {
      "!type": "OnErrorEventHandler"
    },
    "onoffline": {
      "!type": "fn(+Event)"
    },
    "ononline": {
      "!type": "fn(+Event)"
    },
    "importScripts": {
      "!type": "fn(urls: string)"
    },
    "navigator": {
      "!type": "WorkerNavigator"
    },
    "caches": {
      "!type": "CacheStorage"
    },
    "onclose": {
      "!type": "fn(+Event)"
    },
    "dump": {
      "!type": "fn(str?: string)"
    },
    "performance": {
      "!type": "Performance"
    },
    "setTimeout": {
      "!type": "fn(handler: Function, timeout?: number, arguments: ?) -> number"
    },
    "clearTimeout": {
      "!type": "fn(handle?: number)"
    },
    "setInterval": {
      "!type": "fn(handler: Function, timeout?: number, arguments: ?) -> number"
    },
    "clearInterval": {
      "!type": "fn(handle?: number)"
    },
    "btoa": {
      "!type": "fn(btoa: string) -> string"
    },
    "atob": {
      "!type": "fn(atob: string) -> string"
    },
    "fetch": {
      "!type": "fn(input: RequestInfo, init?: RequestInit) -> +Promise[value=Response]"
    },
    "indexedDB": {
      "!type": "IDBFactory"
    }
  },
  "WorkerLocation": {
    "href": {
      "!type": "string"
    },
    "protocol": {
      "!type": "string"
    },
    "host": {
      "!type": "string"
    },
    "hostname": {
      "!type": "string"
    },
    "port": {
      "!type": "string"
    },
    "pathname": {
      "!type": "string"
    },
    "search": {
      "!type": "string"
    },
    "hash": {
      "!type": "string"
    },
    "origin": {
      "!type": "string"
    }
  },
  "WorkerNavigator": {
    "appCodeName": {
      "!type": "string"
    },
    "appName": {
      "!type": "string"
    },
    "appVersion": {
      "!type": "string"
    },
    "platform": {
      "!type": "string"
    },
    "userAgent": {
      "!type": "string"
    },
    "product": {
      "!type": "string"
    },
    "taintEnabled": {
      "!type": "fn() -> bool"
    },
    "language": {
      "!type": "string"
    },
    "languages": {
      "!type": "[string]"
    },
    "onLine": {
      "!type": "bool"
    },
    "getDataStores": {
      "!type": "fn(name: string, owner?: string) -> +Promise"
    }
  },
  "XMLDocument": {
    "load": {
      "!type": "fn(url: string) -> bool"
    },
    "async": {
      "!type": "bool"
    }
  },
  "XMLHttpRequest": {
    "!type": "fn(ignored: string)",
    "prototype": {
      "onreadystatechange": {
        "!type": "fn(+Event)"
      },
      "UNSENT": {
        "!type": "number"
      },
      "OPENED": {
        "!type": "number"
      },
      "HEADERS_RECEIVED": {
        "!type": "number"
      },
      "LOADING": {
        "!type": "number"
      },
      "DONE": {
        "!type": "number"
      },
      "readyState": {
        "!type": "number"
      },
      "open": {
        "!type": "fn(method: ByteString, url: string)"
      },
      "setRequestHeader": {
        "!type": "fn(header: ByteString, value: ByteString)"
      },
      "timeout": {
        "!type": "number"
      },
      "withCredentials": {
        "!type": "bool"
      },
      "upload": {
        "!type": "XMLHttpRequestUpload"
      },
      "send": {
        "!type": "fn()"
      },
      "abort": {
        "!type": "fn()"
      },
      "responseURL": {
        "!type": "string"
      },
      "status": {
        "!type": "number"
      },
      "statusText": {
        "!type": "ByteString"
      },
      "getResponseHeader": {
        "!type": "fn(header: ByteString) -> ByteString"
      },
      "getAllResponseHeaders": {
        "!type": "fn() -> ByteString"
      },
      "overrideMimeType": {
        "!type": "fn(mime: string)"
      },
      "responseType": {
        "!type": "XMLHttpRequestResponseType"
      },
      "response": {
        "!type": "?"
      },
      "responseText": {
        "!type": "string"
      },
      "responseXML": {
        "!type": "Document"
      },
      "channel": {
        "!type": "MozChannel"
      },
      "networkInterfaceId": {
        "!type": "ByteString"
      },
      "getInterface": {
        "!type": "fn(iid: IID) -> ?"
      },
      "queryInterface": {
        "!type": "fn(iid: IID) -> nsISupports"
      }
    }
  },
  "XMLHttpRequestEventTarget": {
    "onloadstart": {
      "!type": "fn(+Event)"
    },
    "onprogress": {
      "!type": "fn(+Event)"
    },
    "onabort": {
      "!type": "fn(+Event)"
    },
    "onerror": {
      "!type": "fn(+Event)"
    },
    "onload": {
      "!type": "fn(+Event)"
    },
    "ontimeout": {
      "!type": "fn(+Event)"
    },
    "onloadend": {
      "!type": "fn(+Event)"
    }
  },
  "XMLHttpRequestUpload": {
    "queryInterface": {
      "!type": "fn(iid: IID) -> nsISupports"
    }
  },
  "OutputStream": {},
  "XMLSerializer": {
    "!type": "fn()",
    "prototype": {
      "serializeToString": {
        "!type": "fn(root: Node) -> string"
      },
      "serializeToStream": {
        "!type": "fn(root: Node, stream: OutputStream, charset: string)"
      },
      "queryInterface": {
        "!type": "fn(iid: IID) -> nsISupports"
      }
    }
  },
  "XMLStylesheetProcessingInstruction": {
    "sheet": {
      "!type": "StyleSheet"
    }
  },
  "XPathEvaluator": {
    "!type": "fn()",
    "prototype": {
      "createExpression": {
        "!type": "fn(expression: string, resolver: XPathNSResolver) -> XPathExpression"
      },
      "createNSResolver": {
        "!type": "fn(nodeResolver: Node) -> Node"
      },
      "evaluate": {
        "!type": "fn(expression: string, contextNode: Node, resolver: XPathNSResolver, type: number, result: object) -> XPathResult"
      },
      "queryInterface": {
        "!type": "fn(iid: IID) -> nsISupports"
      }
    }
  },
  "XPathExpression": {
    "evaluate": {
      "!type": "fn(contextNode: Node, type: number, result: object) -> XPathResult"
    },
    "evaluateWithContext": {
      "!type": "fn(contextNode: Node, contextPosition: number, contextSize: number, type: number, result: object) -> XPathResult"
    }
  },
  "XPathResult": {
    "ANY_TYPE": {
      "!type": "number"
    },
    "NUMBER_TYPE": {
      "!type": "number"
    },
    "STRING_TYPE": {
      "!type": "number"
    },
    "BOOLEAN_TYPE": {
      "!type": "number"
    },
    "UNORDERED_NODE_ITERATOR_TYPE": {
      "!type": "number"
    },
    "ORDERED_NODE_ITERATOR_TYPE": {
      "!type": "number"
    },
    "UNORDERED_NODE_SNAPSHOT_TYPE": {
      "!type": "number"
    },
    "ORDERED_NODE_SNAPSHOT_TYPE": {
      "!type": "number"
    },
    "ANY_UNORDERED_NODE_TYPE": {
      "!type": "number"
    },
    "FIRST_ORDERED_NODE_TYPE": {
      "!type": "number"
    },
    "resultType": {
      "!type": "number"
    },
    "numberValue": {
      "!type": "number"
    },
    "stringValue": {
      "!type": "string"
    },
    "booleanValue": {
      "!type": "bool"
    },
    "singleNodeValue": {
      "!type": "Node"
    },
    "invalidIteratorState": {
      "!type": "bool"
    },
    "snapshotLength": {
      "!type": "number"
    },
    "iterateNext": {
      "!type": "fn() -> Node"
    },
    "snapshotItem": {
      "!type": "fn(index: number) -> Node"
    }
  },
  "XSLTProcessor": {
    "!type": "fn()",
    "prototype": {
      "importStylesheet": {
        "!type": "fn(style: Node)"
      },
      "transformToFragment": {
        "!type": "fn(source: Node, output: Document) -> DocumentFragment"
      },
      "transformToDocument": {
        "!type": "fn(source: Node) -> Document"
      },
      "setParameter": {
        "!type": "fn(namespaceURI: string, localName: string, value: ?)"
      },
      "getParameter": {
        "!type": "fn(namespaceURI: string, localName: string) -> nsIVariant"
      },
      "removeParameter": {
        "!type": "fn(namespaceURI: string, localName: string)"
      },
      "clearParameters": {
        "!type": "fn()"
      },
      "reset": {
        "!type": "fn()"
      },
      "DISABLE_ALL_LOADS": {
        "!type": "number"
      },
      "flags": {
        "!type": "number"
      }
    }
  },
  "window": {
    "!type": "Window"
  },
  "self": {
    "!type": "WindowProxy"
  },
  "document": {
    "!type": "Document"
  },
  "name": {
    "!type": "string"
  },
  "location": {
    "!type": "Location"
  },
  "history": {
    "!type": "History"
  },
  "locationbar": {
    "!type": "BarProp"
  },
  "menubar": {
    "!type": "BarProp"
  },
  "personalbar": {
    "!type": "BarProp"
  },
  "scrollbars": {
    "!type": "BarProp"
  },
  "statusbar": {
    "!type": "BarProp"
  },
  "toolbar": {
    "!type": "BarProp"
  },
  "status": {
    "!type": "string"
  },
  "close": {
    "!type": "fn()"
  },
  "closed": {
    "!type": "bool"
  },
  "stop": {
    "!type": "fn()"
  },
  "focus": {
    "!type": "fn()"
  },
  "blur": {
    "!type": "fn()"
  },
  "frames": {
    "!type": "WindowProxy"
  },
  "length": {
    "!type": "number"
  },
  "top": {
    "!type": "WindowProxy"
  },
  "opener": {
    "!type": "?"
  },
  "parent": {
    "!type": "WindowProxy"
  },
  "frameElement": {
    "!type": "Element"
  },
  "open": {
    "!type": "fn(url?: string, target?: string, features?: string) -> WindowProxy"
  },
  "navigator": {
    "!type": "Navigator"
  },
  "external": {
    "!type": "External"
  },
  "applicationCache": {
    "!type": "ApplicationCache"
  },
  "alert": {
    "!type": "fn()"
  },
  "confirm": {
    "!type": "fn(message?: string) -> bool"
  },
  "prompt": {
    "!type": "fn(message?: string, default?: string) -> string"
  },
  "print": {
    "!type": "fn()"
  },
  "showModalDialog": {
    "!type": "fn(url: string, argument?: ?, options?: string) -> ?"
  },
  "postMessage": {
    "!type": "fn(message: ?, targetOrigin: string, transfer?: [Transferable])"
  },
  "captureEvents": {
    "!type": "fn()"
  },
  "releaseEvents": {
    "!type": "fn()"
  },
  "getSelection": {
    "!type": "fn() -> Selection"
  },
  "getComputedStyle": {
    "!type": "fn(elt: Element, pseudoElt?: string) -> CSSStyleDeclaration"
  },
  "matchMedia": {
    "!type": "fn(query: string) -> MediaQueryList"
  },
  "screen": {
    "!type": "Screen"
  },
  "moveTo": {
    "!type": "fn(x: number, y: number)"
  },
  "moveBy": {
    "!type": "fn(x: number, y: number)"
  },
  "resizeTo": {
    "!type": "fn(x: number, y: number)"
  },
  "resizeBy": {
    "!type": "fn(x: number, y: number)"
  },
  "innerWidth": {
    "!type": "?"
  },
  "innerHeight": {
    "!type": "?"
  },
  "scroll": {
    "!type": "fn(x: number, y: number)"
  },
  "scrollTo": {
    "!type": "fn(x: number, y: number)"
  },
  "scrollBy": {
    "!type": "fn(x: number, y: number)"
  },
  "scrollX": {
    "!type": "number"
  },
  "pageXOffset": {
    "!type": "number"
  },
  "scrollY": {
    "!type": "number"
  },
  "pageYOffset": {
    "!type": "number"
  },
  "screenX": {
    "!type": "?"
  },
  "screenY": {
    "!type": "?"
  },
  "outerWidth": {
    "!type": "?"
  },
  "outerHeight": {
    "!type": "?"
  },
  "requestAnimationFrame": {
    "!type": "fn(callback: FrameRequestCallback) -> number"
  },
  "cancelAnimationFrame": {
    "!type": "fn(handle: number)"
  },
  "performance": {
    "!type": "Performance"
  },
  "caches": {
    "!type": "CacheStorage"
  },
  "getDefaultComputedStyle": {
    "!type": "fn(elt: Element, pseudoElt?: string) -> CSSStyleDeclaration"
  },
  "scrollByLines": {
    "!type": "fn(numLines: number, options?: ScrollOptions)"
  },
  "scrollByPages": {
    "!type": "fn(numPages: number, options?: ScrollOptions)"
  },
  "sizeToContent": {
    "!type": "fn()"
  },
  "controllers": {
    "!type": "MozControllers"
  },
  "realFrameElement": {
    "!type": "Element"
  },
  "devicePixelRatio": {
    "!type": "number"
  },
  "scrollMaxX": {
    "!type": "number"
  },
  "scrollMaxY": {
    "!type": "number"
  },
  "fullScreen": {
    "!type": "bool"
  },
  "back": {
    "!type": "fn()"
  },
  "forward": {
    "!type": "fn()"
  },
  "home": {
    "!type": "fn()"
  },
  "updateCommands": {
    "!type": "fn(action: string, sel?: Selection, reason?: number)"
  },
  "find": {
    "!type": "fn(str?: string, caseSensitive?: bool, backwards?: bool, wrapAround?: bool, wholeWord?: bool, searchInFrames?: bool, showDialog?: bool) -> bool"
  },
  "onwheel": {
    "!type": "fn(+Event)"
  },
  "ondevicemotion": {
    "!type": "fn(+Event)"
  },
  "ondeviceorientation": {
    "!type": "fn(+Event)"
  },
  "ondeviceproximity": {
    "!type": "fn(+Event)"
  },
  "onuserproximity": {
    "!type": "fn(+Event)"
  },
  "ondevicelight": {
    "!type": "fn(+Event)"
  },
  "dump": {
    "!type": "fn(str: string)"
  },
  "setResizable": {
    "!type": "fn(resizable: bool)"
  },
  "openDialog": {
    "!type": "fn(url?: string, name?: string, options?: string, extraArguments: ?) -> WindowProxy"
  },
  "content": {
    "!type": "object"
  },
  "_content": {
    "!type": "object"
  },
  "getInterface": {
    "!type": "fn(iid: IID) -> ?"
  },
  "windowRoot": {
    "!type": "WindowRoot"
  },
  "console": {
    "!type": "Console"
  },
  "sidebar": {
    "!type": "?"
  },
  "queryInterface": {
    "!type": "fn(iid: IID) -> nsISupports"
  },
  "onabort": {
    "!type": "fn(+Event)"
  },
  "onblur": {
    "!type": "fn(+Event)"
  },
  "onfocus": {
    "!type": "fn(+Event)"
  },
  "oncanplay": {
    "!type": "fn(+Event)"
  },
  "oncanplaythrough": {
    "!type": "fn(+Event)"
  },
  "onchange": {
    "!type": "fn(+Event)"
  },
  "onclick": {
    "!type": "fn(+Event)"
  },
  "oncontextmenu": {
    "!type": "fn(+Event)"
  },
  "ondblclick": {
    "!type": "fn(+Event)"
  },
  "ondrag": {
    "!type": "fn(+Event)"
  },
  "ondragend": {
    "!type": "fn(+Event)"
  },
  "ondragenter": {
    "!type": "fn(+Event)"
  },
  "ondragleave": {
    "!type": "fn(+Event)"
  },
  "ondragover": {
    "!type": "fn(+Event)"
  },
  "ondragstart": {
    "!type": "fn(+Event)"
  },
  "ondrop": {
    "!type": "fn(+Event)"
  },
  "ondurationchange": {
    "!type": "fn(+Event)"
  },
  "onemptied": {
    "!type": "fn(+Event)"
  },
  "onended": {
    "!type": "fn(+Event)"
  },
  "oninput": {
    "!type": "fn(+Event)"
  },
  "oninvalid": {
    "!type": "fn(+Event)"
  },
  "onkeydown": {
    "!type": "fn(+Event)"
  },
  "onkeypress": {
    "!type": "fn(+Event)"
  },
  "onkeyup": {
    "!type": "fn(+Event)"
  },
  "onload": {
    "!type": "fn(+Event)"
  },
  "onloadeddata": {
    "!type": "fn(+Event)"
  },
  "onloadedmetadata": {
    "!type": "fn(+Event)"
  },
  "onloadstart": {
    "!type": "fn(+Event)"
  },
  "onmousedown": {
    "!type": "fn(+Event)"
  },
  "onmouseenter": {
    "!type": "fn(+Event)"
  },
  "onmouseleave": {
    "!type": "fn(+Event)"
  },
  "onmousemove": {
    "!type": "fn(+Event)"
  },
  "onmouseout": {
    "!type": "fn(+Event)"
  },
  "onmouseover": {
    "!type": "fn(+Event)"
  },
  "onmouseup": {
    "!type": "fn(+Event)"
  },
  "onpause": {
    "!type": "fn(+Event)"
  },
  "onplay": {
    "!type": "fn(+Event)"
  },
  "onplaying": {
    "!type": "fn(+Event)"
  },
  "onprogress": {
    "!type": "fn(+Event)"
  },
  "onratechange": {
    "!type": "fn(+Event)"
  },
  "onreset": {
    "!type": "fn(+Event)"
  },
  "onresize": {
    "!type": "fn(+Event)"
  },
  "onscroll": {
    "!type": "fn(+Event)"
  },
  "onseeked": {
    "!type": "fn(+Event)"
  },
  "onseeking": {
    "!type": "fn(+Event)"
  },
  "onselect": {
    "!type": "fn(+Event)"
  },
  "onshow": {
    "!type": "fn(+Event)"
  },
  "onstalled": {
    "!type": "fn(+Event)"
  },
  "onsubmit": {
    "!type": "fn(+Event)"
  },
  "onsuspend": {
    "!type": "fn(+Event)"
  },
  "ontimeupdate": {
    "!type": "fn(+Event)"
  },
  "onvolumechange": {
    "!type": "fn(+Event)"
  },
  "onwaiting": {
    "!type": "fn(+Event)"
  },
  "onpointercancel": {
    "!type": "fn(+Event)"
  },
  "onpointerdown": {
    "!type": "fn(+Event)"
  },
  "onpointerup": {
    "!type": "fn(+Event)"
  },
  "onpointermove": {
    "!type": "fn(+Event)"
  },
  "onpointerout": {
    "!type": "fn(+Event)"
  },
  "onpointerover": {
    "!type": "fn(+Event)"
  },
  "onpointerenter": {
    "!type": "fn(+Event)"
  },
  "onpointerleave": {
    "!type": "fn(+Event)"
  },
  "ongotpointercapture": {
    "!type": "fn(+Event)"
  },
  "onlostpointercapture": {
    "!type": "fn(+Event)"
  },
  "onmozfullscreenchange": {
    "!type": "fn(+Event)"
  },
  "onmozfullscreenerror": {
    "!type": "fn(+Event)"
  },
  "onmozpointerlockchange": {
    "!type": "fn(+Event)"
  },
  "onmozpointerlockerror": {
    "!type": "fn(+Event)"
  },
  "onafterprint": {
    "!type": "fn(+Event)"
  },
  "onbeforeprint": {
    "!type": "fn(+Event)"
  },
  "onbeforeunload": {
    "!type": "OnBeforeUnloadEventHandler"
  },
  "onhashchange": {
    "!type": "fn(+Event)"
  },
  "onlanguagechange": {
    "!type": "fn(+Event)"
  },
  "onmessage": {
    "!type": "fn(+Event)"
  },
  "onoffline": {
    "!type": "fn(+Event)"
  },
  "ononline": {
    "!type": "fn(+Event)"
  },
  "onpagehide": {
    "!type": "fn(+Event)"
  },
  "onpageshow": {
    "!type": "fn(+Event)"
  },
  "onpopstate": {
    "!type": "fn(+Event)"
  },
  "onunload": {
    "!type": "fn(+Event)"
  },
  "setTimeout": {
    "!type": "fn(handler: Function, timeout?: number, arguments: ?) -> number"
  },
  "clearTimeout": {
    "!type": "fn(handle?: number)"
  },
  "setInterval": {
    "!type": "fn(handler: Function, timeout?: number, arguments: ?) -> number"
  },
  "clearInterval": {
    "!type": "fn(handle?: number)"
  },
  "btoa": {
    "!type": "fn(btoa: string) -> string"
  },
  "atob": {
    "!type": "fn(atob: string) -> string"
  },
  "sessionStorage": {
    "!type": "Storage"
  },
  "localStorage": {
    "!type": "Storage"
  },
  "indexedDB": {
    "!type": "IDBFactory"
  },
  "speechSynthesis": {
    "!type": "SpeechSynthesis"
  },
  "dialogArguments": {
    "!type": "?"
  },
  "returnValue": {
    "!type": "?"
  },
  "ontouchstart": {
    "!type": "fn(+Event)"
  },
  "ontouchend": {
    "!type": "fn(+Event)"
  },
  "ontouchmove": {
    "!type": "fn(+Event)"
  },
  "ontouchcancel": {
    "!type": "fn(+Event)"
  },
  "onerror": {
    "!type": "OnErrorEventHandler"
  },
  "STATE_MAXIMIZED": {
    "!type": "number"
  },
  "STATE_MINIMIZED": {
    "!type": "number"
  },
  "STATE_NORMAL": {
    "!type": "number"
  },
  "STATE_FULLSCREEN": {
    "!type": "number"
  },
  "windowState": {
    "!type": "number"
  },
  "browserDOMWindow": {
    "!type": "nsIBrowserDOMWindow"
  },
  "getAttention": {
    "!type": "fn()"
  },
  "getAttentionWithCycleCount": {
    "!type": "fn(aCycleCount: number)"
  },
  "setCursor": {
    "!type": "fn(cursor: string)"
  },
  "maximize": {
    "!type": "fn()"
  },
  "minimize": {
    "!type": "fn()"
  },
  "restore": {
    "!type": "fn()"
  },
  "notifyDefaultButtonLoaded": {
    "!type": "fn(defaultButton: Element)"
  },
  "messageManager": {
    "!type": "nsIMessageBroadcaster"
  },
  "getGroupMessageManager": {
    "!type": "fn(aGroup: string) -> nsIMessageBroadcaster"
  },
  "beginWindowMove": {
    "!type": "fn(mouseDownEvent: Event, panel?: Element)"
  },
  "fetch": {
    "!type": "fn(input: RequestInfo, init?: RequestInit) -> +Promise[value=Response]"
  }
}
